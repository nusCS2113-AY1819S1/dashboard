[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d Student Planner"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003e Insert Marketing Blurb here"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "https://travis-ci.com/CS2113-AY1819S1-T13-1/main[image:https://travis-ci.com/CS2113-AY1819S1-T13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "https://ci.appveyor.com/project/QzSG/main[image:https://ci.appveyor.com/api/projects/status/g6ikkdmvc9v4mqop?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* This is a desktop Student Planner. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* The awesome https://github.com/se-edu/addressbook-level4[Addressbook-Level4] used as the starting point of this amazing application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "QzSG": 10,
      "-": 29
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"githubId\": \"QzSG\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"displayName\": \"ADR...HUA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"authorNames\": [\"QzSG\",\"Adrian\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"githubId\": \"ChenSongJian\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"displayName\": \"CHE...IAN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"authorNames\": [\"ChenSongJian\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"githubId\": \"T0roloco\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"displayName\": \"GON...AVO\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"authorNames\": [\"T0roloco\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"githubId\": \"ian-tjahjono\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"displayName\": \"IAN...ONO\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"authorNames\": [\"ian-tjahjono\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"githubId\": \"luhan02\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"displayName\": \"LU ...HAN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "      \"authorNames\": [\"luhan02\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    implementation group: \u0027org.kohsuke\u0027, name: \u0027github-api\u0027, version: \u00271.94\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        \u0027site-name\u0027: \u0027Student-Planner\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-T13-1/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        //\u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "QzSG": 4,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Student Planner was developed by the https://cs2113-ay1819s1-t13-1.github.io/main/AboutUs.html[Student Planner] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//Alphabetical order : AT, CSG, I , LH , MGGM"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//Image naming format : [yourgithubusername].jpg Example: QzSG.jpg"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//TODO: Portfolio for everyone"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Adrian Tan Guo Hua"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "image::qzsg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "{empty}[https://qz.sg[homepage]] [https://github.com/qzsg[github]] [\u003c\u003cadrian#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Role: Team Lead, Developer, Git Expert +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Responsibilities: Devops, Integration, Scheduling and tracking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Chen Songjian"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "image::chensongjian.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "{empty}[http://github.com/ChenSongJian[github]][\u003c\u003csongjian#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ian Tjahjono"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "image::ian-tjahjono.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/ian-tjahjono[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lu Han"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "image::luhan02.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "{empty}[https://github.com/luhan02[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "\u003d\u003d\u003d Mario Gustavo Gonzaelz Munoz"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "image::t0roloco.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "{empty}[https://github.com/T0roloco[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Responsibilities: Code Standards and Quality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 4,
      "ChenSongJian": 3,
      "QzSG": 14,
      "-": 36
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T13-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "By: `CS2113-AY1819S1-T13-1`      Since: `September`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "After forking the repo, the documentation will still have the Student Planner branding and refer to the `CS2113-AY1819S1-T13-1/main` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2113-AY1819S1-T13-1/main`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* stores the Student Planner data consisting of"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Address Book"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Expense Book"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Task Book"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Event Book"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cT\u003e` where `T` is of type `Person`, `Expense`, `Event`, or `Task` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* can save the Student Planner data in xml format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The Student Planner data consists of Addresses, Events, Expenses and Task data"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How data is being stored"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **Alternative 1:** Saves the entire student planner data as one gigantic xml file."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Negatively impacts requirements of allowing user to still be able to manually modify data as it may be"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "QzSG"
        },
        "content": " difficult to navigate and modify a single huge file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **Alternative 2: (current choice)** Separation into individual storage files."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Pros: Allows for easy modification of data by end user as each file can be easily modified even if it is"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "QzSG"
        },
        "content": "large as there is no tight coupling with other files. Also allows for faster backup of data online as we can utilize"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "QzSG"
        },
        "content": " multithreading to upload all the xml files at the same time instead of one large file."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Cons: We must ensure that the implementation of each individual storage are correct, especially"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "QzSG"
        },
        "content": "for files which when converted to their respectively objects may have some dependencies from the other features."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//tag::tasks[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "luhan02"
        },
        "content": "\u003d\u003d\u003d Tasks (CRUD) feature"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "luhan02"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "luhan02"
        },
        "content": "The tasks\u0027 CRUD mechanism is facilitated by `AddTaskCommand`,`listTaskCommand`,`findTaskCommand`,`UpdateTaskCommand`,`DeleteTaskCommand`. It extends `Command` and implement the following operation:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "luhan02"
        },
        "content": "* `Command#AddTaskCommand()` -- Create a new task to Student Planner"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "luhan02"
        },
        "content": "* `Command#ListTaskCommand()`,`Command#FindTaskCommand()` -- View/ search existing tasks"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "luhan02"
        },
        "content": "* `Command#UpdateTaskCommand()` -- Update existing tasks from history"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "luhan02"
        },
        "content": "* `Command#DeleteTaskCommand()` -- Remove existing tasks from history"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "luhan02"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#hasTask()`,`Model#addTask()`,`Model#listTask()`,`Model#updateTask()` and `Model#deleteTask()` respectively."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Given below is an example usage scenario and how the CRUD mechanism behaves at each step."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 1. The user launches the application for the first time. The Student Planner will be initialized with the initial task planner state."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 2. The user executes `add t/submission ...` command to add a new submission task to the student planner. The `add` command calls `Model#addTask()` which returns a task to be shown in the task list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 3. The user executes  `find ...` command to search any existing task. The `find` command calls `Model#findTask()` and it does not modify the student planner, the studentPlannerStateList remains unchanged."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 4. The user then decides to executes `update ...` command to update an existing task. The `update` command calls `Model#updateTask()`, causing a modified task to be saved."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 5. The user executes `list` command to view the existing task list, which calls `Model#listTask()`. The `list` command does not modify the student planner, the studentPlannerStateList remains unchanged."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "luhan02"
        },
        "content": "Step 6. The user now decides that the task added was a mistake, and decides to remove that task by executing the `delete 6` command to delete the 6th task in the task list of the student planner. The `delete` command will call `Model#deleteTask()`, causing the modified state of the student planner after the `delete 5` command executes to be saved in the studentPlannerStateList."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "luhan02"
        },
        "content": "// end::tasks[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// tag::backuprestore[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Backup Feature"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d Backups Types"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The application supports both local and online backups"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d Backup Implementation"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "QzSG"
        },
        "content": "A `OnlineStorage` interface must be implemented by all forms of Online backup services. This allows developers to easily add and extend the list of supported backup services by implementing a common set of methods."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The current minimum set of methods that must be implemented are"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `OnlineStorage#saveContentToStorage`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `OnlineStorage#readContentFromStorage`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "QzSG"
        },
        "content": "For local backups, the book specific `{Book}Storage` interface adapted from `AddressBookStorage` are implemented and used."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How is the backup command initiated"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The backup mechanism is unique from the other command implementation as the execution of a `BackupCommand` uses an event driven approach to activate a backup request instead of going through the model manager. Backup command is executed this way"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "QzSG"
        },
        "content": "because of the following reason."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Backup requires the current in memory book data inside the `Model`, however the `execute` function is actually passed our `model` containing the required books data. We can raise a backup event directly with the books data provided in the model we have access too"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The raised event is observed and handled by the storage manager which performs the backup (either local or through supported online services) using the books from the `model` passed in through the `OnlineBackupEvent` or `LocalBackupEvent`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of performing backup"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **Alternative 1 (current choice):** Performing backup of data files using worker threads."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Pros: Solves the age old problem of a graphical application appearing to freeze which can away end user experience as when the main JavaFX thread is blocked as is the case in the inherited default AB4 codebase"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Cons: Difficult to ensure that threads have no unsafe threads operations especially since we are dealing with file storage. Cross thread exception is difficult to handle."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "QzSG"
        },
        "content": "   Difficult to ensure that no two threads attempt to access the same resource."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "QzSG"
        },
        "content": "   Inter-thread synchronisation and cross thread exception handling is difficult too."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "QzSG"
        },
        "content": "   we have to implement a way to check when all threads are complete and signal the main ui thread to provide user with a proper success or failure notification"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **Alternative 2:** Utilise the existing implementation of blocking the main GUI thread whenever a file storage operation is being performed"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Pros: No work needed in implementation."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Cons: Notable freezes in Student Planner application even for small files. User cannot perform any other operation while backup is being performed"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Further justification"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Concurrency is not a topic commonly taught in beginning software engineering classes. The class that this application was created for is no exception. The common reason for this is that concurrency and multithreading"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "QzSG"
        },
        "content": "are two slightly advanced topics that students will not usually touch in beginning modules. However, one can consider this to be a paradox as most beginner software engineering modules will involve the creation of an"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "QzSG"
        },
        "content": "application with graphical output which usually consists of long running operations which should not be handled or performed on the main GUI thread. This is the best time to teach students about using worker or"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "QzSG"
        },
        "content": " background threads to prevent main GUI thread from blocking operations such as file I/O, it is also the most succinct demonstration of the need for concurrency."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d\u003d Command Flow"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "QzSG"
        },
        "content": "image::backup-example.png[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "QzSG"
        },
        "content": "When a user enters a backup command to perform data backup. `BackupCommand#execute` raises a `LocalBackupEvent` or a `OnlineBackupEvent`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The `StorageManager` subscribes to the events and will perform the backup of the various books such as `ReadOnlyAddressBook`, `ReadOnlyExpenseBook` etc provided in the event payload. This allows us to separate"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "QzSG"
        },
        "content": "backup concerns from the Model as explain above earlier, in a similar manner, the storage component is also decoupled from the model component with regards to backup operations."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "QzSG"
        },
        "content": "For example in the case of saving backup data to GitHub. We have the flow of steps."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". After a correct backup command is entered by the user, `BackupCommand#execute` raises a `OnlineBackupEvent` with the payload consisting of `OnlineStorage.Type` , the various book models, and a authentication token."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". `StorageManager#handleOnlineBackupEvent` calls `backupOnline` which starts an `ExecutorService` to perform data backup to Github storage with worker tasks from `getOnlineBackupTask`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "QzSG"
        },
        "content": "To prevent the main JavaFX UI thread from freezing during the entire duration of the online backup, worker threads are used to performs the online backup without blocking the main thread."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Tasks created using `javafx.concurrent.tasks` allows us to use task handlers which run in the context of the main JavaFX application thread."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "QzSG"
        },
        "content": "This allows us to capture any thrown exceptions in the worker thread and show to the user in the form of a error popup."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "QzSG"
        },
        "content": "```"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "QzSG"
        },
        "content": "backupTask.setOnFailed(event -\u003e {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    raise(new DataSavingExceptionEvent((Exception) backupTask.getException()));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "QzSG"
        },
        "content": "});"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "QzSG"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "QzSG"
        },
        "content": "This multi-threaded approach allows us to perform long running tasks on worker threads while still waiting for all backup threads"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "QzSG"
        },
        "content": "to complete before showing success notification for the user."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "QzSG"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "QzSG"
        },
        "content": "backupTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    raise(new NewResultAvailableEvent(backupTask.getMessage()));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    raise((OnlineBackupSuccessResultEvent) backupTask.getValue());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "QzSG"
        },
        "content": "});"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "QzSG"
        },
        "content": "```"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". The specific online service that implements the `OnlineStorage` interface will be called."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "QzSG"
        },
        "content": "In this example, `GithubStorage#saveContentToStorage` is called for the respective data books which utilises a third party Github API Library"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "QzSG"
        },
        "content": " to create and save gists to GitHub."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". When each backup task for each book data is completed, a `OnlineBackupSuccessResultEvent` is raised by the `setOnSucceeded` task handler."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". `Model#handleOnlineBackupSuccessResultEvent` receives the event and updates the `UserPrefs` model based on the gist id returned from the successful backup"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". A `UserPrefsChangedEvent` is fired which is handled by `Storage` which saves the updated `UserPrefs` to storage."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "QzSG"
        },
        "content": ". A `NewNotificationAvailableEvent` is also fired. This event is handled by the `UiManager` which calls `showNotification` that creates a new notification and shows"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "QzSG"
        },
        "content": " it to the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// end::backuprestore[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//author"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "QzSG"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "QzSG"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author ChenSongJian"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "// tag::expensefeature[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Expense tracker feature"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The implementation of expense feature is similar to the Address Book, it has similar basic functions such as: `addExpense` `clearExpense` `deleteExpense` `editExpense` `redoExpense` `undoExpense`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "In addition, `expenseTrend` and `monthlyExpense` functions were implemented to assist the user in analysing his/her spending habit."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d\u003d Expense trend"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "This function displays the total expense value for the past 6 months in a new window."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "This function is facilitated by `ExpenseTrendCommand`, it extends the `Command`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "When user executes `expenseTrend` command, the command calls `Model#getFilteredExpenseList()` to obtain the list of expense, it then creates a `TreeMap` containing the expense trend data by calling `getExpenseTrendData()`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The list of expense will be filtered by the month of expense occurred in the `getExpenseTrendData()`, `java.time.YearMonth` is imported to obtain the current month and `TreeMap` is used to ensure that the months are sorted in ascending order."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The command then calls `EventsCenter#post(new DisplayExpenseTrendEvent(expenseTrendData))` to create an display expense trend event with the expense trend data, and pass the event to the EventCenter."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`MainWindow` will subscribe and handle the event, the expense trend data is passed to `ExpenseTrendWindow` by calling `ExpenseTrendWindow#setExpenseTrendData()`."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`ExpenseTrendWindow` creates a bar chart with the data and open a new window to display the bar chart."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d\u003d Monthly expense"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "This function displays the expense value of each category for the selected month in a new window."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "This function is facilitated by `MonthlyExpenseCommand`, it extends the `Command`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "When user executes `monthlyExpense` command, the `MonthlyExpenseCommandParser` will check if the parameter entered are in correct format and is a valid month. An error message is displayed if the parameter is incorrect, else a `MonthlyExpenseCommand` with the selected month will be instantiated."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "the command then calls `Model#getFilteredExpenseList()` to obtain the list of expense, it also creates a `HashMap` containing the monthly expense data by calling `getMonthlyData()`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The list of expense will be filtered by the selected month in the `getMonthlyExpenseData()`, `HashMap` is used to ensure that to associate the expense value and its category."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The command then calls `EventsCenter#post(new DisplayMonthlyExpenseEvent(monthlyData))` to create an display monthly expense event with the monthly expense data, and pass the event to the EventCenter."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The rest are similar to the Expense Trend but the data were represented in a pie chart instead of a bar chart."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "// end::expensefeature[]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Target user profile*: Busy final year SoC/Business Double Major student"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Value proposition*: Manage tasks faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* * *` |user |add a new task | track the tasks"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "luhan02"
        },
        "content": "|`* * *` |user |list the tasks | view all the tasks avaiable"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "luhan02"
        },
        "content": "|`* * *` |user |update the task | change the task information where necessary"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* * *` |user |delete a task |remove entries that I no longer need"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* * *` |user |find a task by name |locate task/s without having to go through the entire list"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "luhan02"
        },
        "content": "|`* *` |user |find a task by details |locate task/s without having to go through the details of the entire list of tasks"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* * *` |user with many tasks in the address book |sort tasks by deadline |locate upcoming due tasks easily"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "luhan02"
        },
        "content": "|`* *` |user with many tasks in the address book |sort tasks by priority |locate important tasks easily"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* *` |paranoid user|backup tasks locally |I have a backup in case I accidentally delete my tasks file"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* *` |paranoid user|backup tasks online |I have a backup in case my desktop computer dies or I have to switch computers."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|`* *` |user|be notified of upcoming deadlines |complete the tasks on time"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "QzSG"
        },
        "content": "(For all use cases below, the *System* is the `StudentPlanner` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: List task (UC1)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to list tasks"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner shows a list of tasks"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2a1. StudentPlanner informs User that there are no tasks."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Add task (UC2)"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to add a new task with details"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner adds new task with given details"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2a. A similar tasks exists."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2a1. StudentPlanner informs user about skipping adding possible duplicated task."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2b. Insufficient or Invalid details provided."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2b1. StudentPlanner informs user about unsuccessful adding of task."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "** 2b2. StudentPlanner \u003c\u003c_use_case_app_usage_uc6,shows application usage (UC6)\u003e\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Delete task (UC3)"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to list tasks"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner shows a list of tasks"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "QzSG"
        },
        "content": "3.  User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "QzSG"
        },
        "content": "4.  StudentPlanner deletes the task"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 3a1. StudentPlanner shows an error message."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Find tasks by name (UC4)"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Prerequisite*"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1. At least one tasks exists"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to find task by name/s in the list"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner shows the list of task/s with provided name/s"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2a1. StudentPlanner informs user that no tasks found"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Find tasks by details (UC5)"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Prerequisite*"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1. At least one tasks exists"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to find tasks by details"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner shows the list of task/s with provided details/s"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2a1. StudentPlanner informs user that no tasks found"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: App Usage (UC6)"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to see help"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner shows help and example usage."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Invalid command (UC7)"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User enters a command that does not exists"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner informs User about unknown command"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "QzSG"
        },
        "content": "3.  StudentPlanner \u003c\u003c_use_case_app_usage_uc6,shows application usage (UC6)\u003e\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Use case: Local tasks backup (UC8)"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Prerequisite*"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1. At least one tasks exists"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "QzSG"
        },
        "content": "1.  User requests to backup all data to another local folder"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "QzSG"
        },
        "content": "2.  StudentPlanner backups current data to specified folder"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* 2a. Folder provided cannot be written to"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** 2a1. StudentPlanner informs user that folder cannot be used for backup"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Use case: Online tasks backup (UC9)"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Prerequisite*"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "1. At least one online backup service has been set up."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "1.  User requests to backup all data to an online service"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "2.  StudentPlanner backups current data to online service"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2a. Service has not been set up previously"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "QzSG"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2a1. StudentPlanner prompts user to first set up the specified online service."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2b. Service is not recognised or unsupported"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2b1. StudentPlanner shows error."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2b2. StudentPlanner shows help for online backup."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "QzSG"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author ChenSongJian"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Use case: Add Expense(UC11)"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "1.  User requests to add an new expense with details"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "2.  StudentPlanner adds new expense with given details"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2a. Insufficient or Invalid details provided."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2a1. StudentPlanner informs user about unsuccessful adding of expense"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Use case: Add Event (UC10)"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "1.  User requests to add an event"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "2.  StudentPlanner adds new event with given details"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2a. A similar event exists"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2a1. StudentPlanner prompts user that a similar event exists. Event is not added."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2b. Insufficient or Invalid details provided."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2b1. StudentPlanner shows required command format to user. Event is not added."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Use case: Add Event (UC10)"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "1.  User requests to add an event"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "2.  StudentPlanner adds new event with given details"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2a. A similar event exists"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2a1. StudentPlanner prompts user that a similar event exists. Event is not added."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* 2b. Insufficient or Invalid details provided."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** 2b1. StudentPlanner shows required command format to user. Event is not added."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".  Should take no longer than 5 seconds on each startup"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".  Should have internet connectivity for features requiring online interactivity."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "*EverNote*"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Author: Adrian Tan link:https://github.com/QzSG[@QzSG]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Lots of features including"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** Tasks, Events, Notes, Meetings"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Cross Platform"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* No power user friendly features like in built console based commands"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Not free, good features are premium only"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Not open source."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "   Expected: Shows the GUI with a set of sample tasks. The window size may not be optimum."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "luhan02": 33,
      "ChenSongJian": 200,
      "QzSG": 315,
      "-": 835
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d Student Planner - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "By: `CS2113-AY1819S1-T13-1`      Since: `September 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Student Planner (SP) is for a *one stop desktop app for students to manage their schedule*. More importantly, SP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, you can use SP for all your daily scheduling done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ".  Download the latest `studentplanner.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Student Planner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *`list`* : lists all tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **`add`**`n/Attend Post Modern Jukebox concert e/180918_2000 p/HIGH` : adds a task named `Attend Post Modern Jukebox concert` on `18 September 2018 at 8pm` with `HIGH`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "priority to the Address Book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* **`delete`**`3` : deletes the 3rd task shown in the current list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME d/DATE`, `d/DATE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Adds a task to the schedule planner +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Format: `add n/NAME [b/BODY] [s/START_DATETIME] [e/END_DATETIME] [t/TAG]... [p/PRIORITY]`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `add n/Buy stationary tomorrow p/MED`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `add n/Attend PostModern JukeBox concert e/180918_2000 p/HIGH`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Shows a list of all tasks in the schedule planner. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Editing a task : `edit`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Edits an existing task in the schedule planner. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Format: `edit INDEX [n/NAME] [b/BODY] [s/START_DATETIME] [e/END_DATETIME] [t/TAG]... [p/PRIORITY]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* When editing tags, the existing tags of the task will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* You can remove all the task\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `edit 1 b/Need two pens` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Edits the body of the 1st task to be `Need two pens`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `edit 2 t/` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Edits the 2nd task by clearing all existing tags."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "\u003d\u003d\u003d Locating contacts by address: `findaddress`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Finds contacts whose address or body contain any of the given keywords. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Format: `findaddress KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* The search is case insensitive. e.g `college` will match `College`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* The order of the keywords does not matter. e.g. `Ave College` will match `College Ave`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only the address and body is searched."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only full words will be matched e.g. `Colle` will not match `College`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Contacts matching at least one keyword will be returned (i.e. `OR` search). e.g. `College Tampines` will return all contacts with address containing any of the keywords college or tampines"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress College` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns `college` and `College ave e`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress college lorong tampines` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns any contacts having an address or body that contains `college`, `lorong`, or `tampines`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "\u003d\u003d\u003d Locating contacts by name: `findname`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Finds contacts whose name or body contain any of the given keywords. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Format: `findname KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* The search is case insensitive. e.g `mario` will match `Mario`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* The order of the keywords does not matter. e.g. `Gonzalez Mario` will match `Mario Gonzalez`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only the name and body is searched."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only full words will be matched e.g. `Gonza` will not match `Gonzalez`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Contacts matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress Mario` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns `mario` and `Mario Gonzalez`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress mario alex david` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns any contacts having names or body that contains `mario`, `alex`, or `david`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "\u003d\u003d\u003d Locating contacts by phone: `findphone`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Finds contacts whose phone number or body contain any of the given keywords. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Format: `findname KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only the phone number and body is searched."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Only full phone numbers will be matched e.g. `98835` will not match `98835761`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* Contacts matching at least one keyword will be returned (i.e. `OR` search). e.g. `98835761 87438807 ` will return the contacts with phone number 98835761 or 87438807."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress 98835761` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns `98835761` and the contact with that phone number"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "* `findaddress 98835761 87438807` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "Returns any contacts having phone number or body that contains `98835761`, or `87438807`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Locating tasks by name: `find`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Finds tasks whose names or body contain any of the given keywords. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* Only the name and body is searched."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `find Pen` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Returns `pen` and `Pen pineapple pen`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `find concert meeting cute` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Returns any task having names or body `concert`, `meeting`, or `cute`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Deletes the specified task from the schedule planner. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Deletes the 2nd task in the schedule planner."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `find Pen` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Restores the schedule planner to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Undoable commands: those commands that modify the schedule planner\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Clears all entries from the schedule planner. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author ChenSongJian"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "// tag::expense[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `addExpense`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Adds an expense to the expense book +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `addExpense c/CATEGORY v/VALUE d/DATE [t/TAG]...`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "An expense can have any number of tags (including 0)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `addExpense c/taobao v/1111.11 d/11/11/2018`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `addExpense c/Lunch v/6.66 d/10/10/2018 t/nomorecaipng t/fishtooexpensive`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Editing an expense : `editExpense`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Edits an existing expense in the Expense book. +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `edit INDEX [c/CATEGORY] [v/VALUE] [d/DATE] [t/TAG]...`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Edits the expense at the specified `INDEX`. The index refers to the index number shown in the displayed expense list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* You can remove all the expense\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `editExpense 1 v/998.00 +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Edits the value of expense of the 1st expense"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `editExpense 2 c/food t/lunch` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Edits the category of the 2nd person to be `food`, remove the existing tags and add new tag."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Deleting an expense : `deleteExpense`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Deletes the specified expense from the expense book. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `deleteExpense INDEX`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Deletes the expense at the specified `INDEX`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* The index refers to the index number shown in the displayed expense list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Deletes the 2nd expense in the expense book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undoExpense`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Restores the expense book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `undoExpense`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Undoable commands: those commands that modify the expense book\u0027s content (`addExpense`, `deleteExpense`, `editExpense` and `clearExpense`)."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `expenseTrend` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The `undoExpense` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`clearExpense` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `clearExpense` command) +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redoExpense`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Reverses the most recent `undoExpense` command. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `redoExpense`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`redoExpense` (reapplies the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`redoExpense` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The `redoExpense` command fails as there are no `undoExpense` commands executed previously."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `deleteExpense 1` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`clearExpense` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `clearExpense` command) +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`undoExpense` (reverses the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`redoExpense` (reapplies the `deleteExpense 1` command) +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "`redoExpense` (reapplies the `clearExpense` command)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Clearing all expense entries : `clearExpense`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Clears all entries from the expense book. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `clearExpense"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Displaying expense trend : `expenseTrend`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Displays a bar chart of the monthly expense value occurred the past 6 months in a new window +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Format: `expenseTrend`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d\u003d Displaying monthly expense : `monthlyExpense`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Displays a pie chart of the expense value for each category occurred in the selected month in a new window +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "format: `monthlyExpense MM/YYYY`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* Displays the monthly expense for the specified `MM/YYYY`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* The month *must be a valid month and in MM/YYYY format* 01/0001, 10/2018 ..."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "****"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* `monthlyExpense 11/2018` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Displays the monthly expense data for November 2018 in a new window"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "// end::expense[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Schedule planner data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Sending notification"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Alert user when a deadline is due"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// tag::databackup[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Backup data : `backup`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Allow user to backup data _locally_ or to online services."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Format: `backup | [GITHUB ACCESS_TOKEN]`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "QzSG"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* For GitHub online backup, a personal access token must be provided in `ACCESS_TOKEN`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "QzSG"
        },
        "content": "****"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `backup` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Creates a local backup to the backup paths in `preferences.json`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `backup github ACCESS_TOKEN_HERE` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Creates an online backup to GitHub Gists using the provided personal access token."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// end::databackup[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// tag::datarestore[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Restore data : `restore`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Allow user to restore data backups _locally_ or from online services."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Format: `restore | [GITHUB ACCESS_TOKEN]`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "QzSG"
        },
        "content": "****"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* For GitHub online restore, a personal access token must be provided in `ACCESS_TOKEN`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "QzSG"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `restore` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Restores Student Planner data using local backups in backup paths inside `preferences.json`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* `restore github ACCESS_TOKEN_HERE` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Restores Student Planner data on GitHub Gists using the provided personal access token."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d\u003d Configure backup and restore settings `[coming in v2.0]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Allow user to configure backup settings (configure and save cloud services authentication tokens like GitHub gists or Google Drive, backup location) by calling `backup doctor`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "QzSG"
        },
        "content": "// end::datarestore[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Allow user to enable encryption by calling `encrypt p/PASSWORD` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Application will prompt for decryption password if encryption is enabled"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous schedule planner folder."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Alternatively you can perform a backup to a supported online service like GitHub and restore form another computer after changing the relevant gist ids in your preferences.json file"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Add* `add n/NAME [b/BODY] [s/START_DATETIME] [e/END_DATETIME] [t/TAG]... [p/PRIORITY]` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "QzSG"
        },
        "content": "e.g. `add n/Attend PostModern JukeBox concert e/180918_2000 p/HIGH`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [b/BODY] [s/START_DATETIME] [e/END_DATETIME] [t/TAG]…​ [p/PRIORITY]` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "QzSG"
        },
        "content": "e.g. `edit 2 n/Buy fruits e/010119_0700`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "QzSG"
        },
        "content": "e.g. `find pen Apple`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Backup* : `backup | [GITHUB ACCESS_TOKEN]`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "QzSG"
        },
        "content": "e.g. `backup GITHUB MY_ACCESS_TOKEN`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Restore* : `restore | [GITHUB ACCESS_TOKEN]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "QzSG"
        },
        "content": "e.g. `restore GITHUB MY_ACCESS_TOKEN`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author ChenSongJian"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *AddExpense* : `addExpense c/CATEGORY v/VALUE d/DATE [t/TAG]...` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "e.g. `addExpense c/Food v/11.11 d/11/11/2018 t/KFC t/lunch t/fat`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *ClearExpense* : `clearExpense`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *DeleteExpense* : `deleteExpense INDEX` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "e.g. `deleteExpense 3`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *EditExpense* : `editExpense INDEX [c/CATEGORY] [v/VALUE] [d/DATE] [t/TAG]...` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "e.g. `editExpense 2 c/Travel v/998.00`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *UndoExpense* : `undoExpense`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *RedoExpense* : `redoExpense`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *ExpenseTrend* : `expenseTrend`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *MonthlyExpense* : `monthlyExpense MM/YYYY` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "e.g. `monthlyExpense 11/2018`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "T0roloco": 43,
      "ChenSongJian": 138,
      "QzSG": 107,
      "-": 200
    }
  },
  {
    "path": "docs/team/adrian.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d Adrian Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d Role: Team Lead, Developer, Git Expert"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Responsibilities: Devops, Integration, Scheduling and tracking"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d PROJECT: Student Planner"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "Student Planner is a all-in-one desktop manager application that allows students to manage their contacts, tasks, events and expenses. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Major enhancement*: added *the ability to backup/restore user data*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** What it does: allows the user to backup current user data both online and locally. Backups can be restored by using the restore command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Justification: This feature improves the product significantly because a user may have the app on many desktops and this provides a convenient way to synchronise them among many devices."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Highlights: This enhancement enables a generic class that can be easily extended by developers to support more types of online backup services in future. It requires an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The implementation too was challenging as the backing up of data online may take a long time, existing implementation will cause the application to freeze until any backup is completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "The current implementation exhibits a working knowledge of multithreading applications, concurrency as well as event driven programming."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Credits: GitHub Api by kohsuke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Minor enhancement*: added a user preferences command that allows the user to customise their application preferences such as default backup locations, online backup data location and other application settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Managed all releases on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Setup and modified most of the initial documentation prior to v1.1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Wrote additional tests for existing features (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-T13-1/main/pull/42[1], https://github.com/CS2113-AY1819S1-T13-1/main/pull/72[2]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nusCS2113-AY1819S1/forum/issues/30[1], https://github.com/nusCS2113-AY1819S1/forum/issues/4[2], https://github.com/nusCS2113-AY1819S1/forum/issues/27[3], https://github.com/nusCS2113-AY1819S1/forum/issues/16[4] , https://github.com/nusCS2113-AY1819S1/forum/issues?q\u003dcommenter%3AQzSG[full list])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/nusCS2113-AY1819S1/forum/issues/4[1], https://github.com/nusCS2113-AY1819S1/forum/issues/27[2])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Integrated a third party library (Github Api by kohsuke) to the project (https://github.com/kohsuke/github-api)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "*** Integrated a new Github App (Travis.com) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "**** This is different from other teams still using the old deprecated OAuth Flow used on the older Travis.org domain"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddatabackup]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddatarestore]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbackuprestore]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "QzSG": 69
    }
  },
  {
    "path": "docs/team/songjian.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d Chen Songjian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Role: Developer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Responsibilities: Developing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d PROJECT: Student Planner"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "Student Planner is a all-in-one desktop manager application that allows students to manage their contacts, tasks, events and expenses. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *Major enhancement*: added *the Expense tracker feature*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** What it does: allows the user to track the expenses and assist the user to analyse his/her spending habit"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "** Justification: This feature improves the product significantly because a user may overspent but may not realise which category of his/her spending can be reduced."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "The user can use `monthlyExpense` command to determine the expenses in which category can be cut down and use `expenseTrend` command to check whether the monthly expenses has decreased."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "These commands assist the user to analyse his/her spending habit and make a better planing for the following month."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *Minor enhancement*: added autocomplete that allows the user to enter the command faster and provides a pre-filled format for the commands with parameter(s)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexpense]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensefeature]"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.storage.ExpenseBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.storage.XmlExpenseBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Student Planner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBookStorage expenseBookStorage \u003d new XmlExpenseBookStorage(userPrefs.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, expenseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Optional\u003cReadOnlyExpenseBook\u003e expenseBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ReadOnlyExpenseBook initialExpense;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Student Planner\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Student Planner\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Student Planner\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseBookOptional \u003d storage.readExpenseBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (!expenseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Expense Book\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            initialExpense \u003d expenseBookOptional.orElseGet(SampleDataUtil::getSampleExpenseBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Expense Book\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            initialExpense \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Expense Book\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            initialExpense \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ModelManager(initialData, initialExpense, userPrefs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(\"Starting Student Planner \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Student Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 1,
      "ChenSongJian": 23,
      "QzSG": 6,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private String appTitle \u003d \"Student Planner\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath.toAbsolutePath(), o.userPrefsFilePath.toAbsolutePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author luhan02"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    //@@author ian-tjahjono"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luhan02": 3,
      "ian-tjahjono": 3,
      "ChenSongJian": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookLocalBackupEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a AddressBook backup request*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class AddressBookLocalBackupEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Path filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public AddressBookLocalBackupEvent(ReadOnlyAddressBook data, Path filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Creating local backup at \" + filePath.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookLocalRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a AddressBook restore request*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class AddressBookLocalRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyAddressBook readOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public AddressBookLocalRestoreEvent(ReadOnlyAddressBook readOnlyAddressBook) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.readOnlyAddressBook \u003d readOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring local backup from \" + readOnlyAddressBook.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookOnlineRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a AddressBook online restore request*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class AddressBookOnlineRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public AddressBookOnlineRestoreEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring online backup\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExpenseBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/** Indicates the ExpenseBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final ReadOnlyExpenseBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBookChangedEvent(ReadOnlyExpenseBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return \"number of expenses \" + data.getExpenseList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExpenseBookLocalBackupEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/** Indicates the ExpenseBook in the model has changed*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseBookLocalBackupEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final ReadOnlyExpenseBook data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final Path filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBookLocalBackupEvent(ReadOnlyExpenseBook data, Path filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return \"Creating local backup at \" + filePath.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExpenseBookLocalRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a AddressBook restore request*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class ExpenseBookLocalRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyExpenseBook readOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public ExpenseBookLocalRestoreEvent(ReadOnlyExpenseBook readOnlyExpenseBook) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.readOnlyExpenseBook \u003d readOnlyExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring local backup from \" + readOnlyExpenseBook.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExpenseBookOnlineRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a ExpenseBook online restore request*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class ExpenseBookOnlineRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyExpenseBook data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public ExpenseBookOnlineRestoreEvent(ReadOnlyExpenseBook data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring online backup\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/UserPrefsChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class UserPrefsChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final UserPrefs data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public UserPrefsChangedEvent(UserPrefs data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"User Prefs Update\\n\" + data.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/DataRestoreExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Indicates an exception during a file restore"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class DataRestoreExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public DataRestoreExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/LocalBackupEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a AddressBook restore request*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class LocalBackupEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyAddressBook readOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyExpenseBook readOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Path addressBookPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Path expenseBookPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public LocalBackupEvent(ReadOnlyAddressBook readOnlyAddressBook, Path addressBookPath,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            ReadOnlyExpenseBook readOnlyExpenseBook, Path expenseBookPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.readOnlyAddressBook \u003d readOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.addressBookPath \u003d addressBookPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.readOnlyExpenseBook \u003d readOnlyExpenseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseBookPath \u003d expenseBookPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Sending local backup request to storage manager\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/LocalRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a request for local restore*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class LocalRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Path addressBookPath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Path expenseBookPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public LocalRestoreEvent(Path addressBookPath, Path expenseBookPath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.addressBookPath \u003d addressBookPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseBookPath \u003d expenseBookPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring local backup\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/OnlineBackupEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a request for online backup*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class OnlineBackupEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final OnlineStorage.Type target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyAddressBook addressData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ReadOnlyExpenseBook expenseData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Optional\u003cString\u003e authToken;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public OnlineBackupEvent(OnlineStorage.Type target, ReadOnlyAddressBook addressData,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                             ReadOnlyExpenseBook expenseData, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.addressData \u003d addressData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseData \u003d expenseData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.authToken \u003d authToken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Saving data online\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/OnlineBackupSuccessResultEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a request for online backup*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class OnlineBackupSuccessResultEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final OnlineStorage.Type target;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final UserPrefs.TargetBook targetBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final String ref;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public OnlineBackupSuccessResultEvent(OnlineStorage.Type target, UserPrefs.TargetBook targetBook, String ref) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.targetBook \u003d targetBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.ref \u003d ref;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Signaling user preference update with success reference from specific online service\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/OnlineRestoreEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/** Indicates a request for online backup*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class OnlineRestoreEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final OnlineStorage.Type target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final UserPrefs.TargetBook targetBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final String ref;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Optional\u003cString\u003e authToken;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public OnlineRestoreEvent(OnlineStorage.Type target, UserPrefs.TargetBook targetBook,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                              String ref, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.targetBook \u003d targetBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.ref \u003d ref;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.authToken \u003d authToken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return \"Restoring online backup\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayExpenseTrendEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * An event requesting to view the expense trend page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DisplayExpenseTrendEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final TreeMap\u003cString, Double\u003e expenseTrendData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public DisplayExpenseTrendEvent(TreeMap\u003cString, Double\u003e expenseTrendData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseTrendData \u003d expenseTrendData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public TreeMap\u003cString, Double\u003e getexEenseTrendData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(this.expenseTrendData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this.expenseTrendData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayMonthlyExpenseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * An event requesting to display the monthly expense page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DisplayMonthlyExpenseEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final HashMap\u003cString, String\u003e monthlyData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public DisplayMonthlyExpenseEvent(HashMap\u003cString, String\u003e monthlyData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.monthlyData \u003d monthlyData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public HashMap\u003cString, String\u003e getMonthlyData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(this.monthlyData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this.monthlyData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExpensePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents a selection change in the Expense List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpensePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Expense newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpensePanelSelectionChangedEvent(Expense newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Expense getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewNotificationAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class NewNotificationAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final Duration duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public NewNotificationAvailableEvent(String title, String message, Optional\u003cDuration\u003e duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.duration \u003d duration.orElse(Duration.seconds(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/OnlineBackupFailureException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Signals that some online backup failed for some reason."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class OnlineBackupFailureException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param message should contain relevant information on failure reason(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public OnlineBackupFailureException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param message should contain relevant information on failure reason(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public OnlineBackupFailureException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Converts the data in the file to a string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *                               into xml and returning the string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static \u003cT\u003e String convertDataToString(T data) throws JAXBException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        m.marshal(data, stringWriter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return stringWriter.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Returns the xml data in the string as an object of the specified type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param dataString     Points to a valid xml string containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws JAXBException         Thrown if the data string is empty or does not have the correct format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static \u003cT\u003e T getDataFromString(String dataString, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throws JAXBException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(dataString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        StringReader stringReader \u003d new StringReader(dataString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return ((T) um.unmarshal(stringReader));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 44,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Returns an list of commands */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    ArrayList\u003cString\u003e getCommandList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenses */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 10,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.BackupCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ClearExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ExpenseTrendCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindAddressCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindPhoneCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.MonthlyExpenseCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.RedoExpenseCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.UndoExpenseCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    //@@author ian-tjahjono"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ArrayList\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_NAME + \" \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_PHONE + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EMAIL + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_ADDRESS + \" \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_TAG);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(AddExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(AddExpenseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_CATEGORY + \" \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_VALUE + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_DATE + \" \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_TAG);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(BackupCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(ClearExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_WORD + \" INDEX\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(DeleteExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(DeleteExpenseCommand.COMMAND_WORD + \"INDEX\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(EditCommand.COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_NAME + \" \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_PHONE + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EMAIL + \" \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_ADDRESS + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_TAG);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(EditExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(EditExpenseCommand.COMMAND_WORD + \" INDEX \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_CATEGORY + \" \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_DATE + \" \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_EXPENSE_VALUE + \" \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + PREFIX_TAG);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(ExpenseTrendCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(FindAddressCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(FindCommand.COMMAND_WORD + \" KEYWORD\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(FindNameCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(FindPhoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(MonthlyExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(MonthlyExpenseCommand.COMMAND_WORD + \" MM/YYYY\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(RedoExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_WORD + \" INDEX\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandList.add(UndoExpenseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 3,
      "ian-tjahjono": 6,
      "ChenSongJian": 105,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Adds an expense to the expenses list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExpense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expenses list. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_CATEGORY + \"EXPENSE_CATEGORY \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_VALUE + \"EXPENSE_VALUE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_DATE + \"EXPENSE_DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_CATEGORY + \"food \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_VALUE + \"11.11 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_DATE + \"11/11/2011 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_TAG + \"taobao\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates an AddExpenseCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public AddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.commitExpenseBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof AddExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddExpenseCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Adds a task to the student planner."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"task\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"[\" + PREFIX_BODY + \"BODY] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"[\" + PREFIX_START + \"START_DATETIME] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_END + \"END_DATETIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_NAME + \"Submission \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_BODY + \"CG2027_assign2 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_START + \"09/10_1700 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_END + \"16/10_1400 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_PRIORITY + \"HIGH \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + PREFIX_TAG + \"IVLE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BackupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalBackupEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineBackupEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class BackupCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"backup\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \": Backups student planner data to location specified (backups to default data path if not provided)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Parameters: [github authToken]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" github my_personal_access_token\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Initiating Backup to %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Optional\u003cPath\u003e backupPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private boolean isLocal \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private OnlineStorage.Type target;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Optional\u003cString\u003e authToken;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Creates a BackupCommand to backup data to storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public BackupCommand(Optional\u003cPath\u003e backupPath, boolean isLocal,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                         Optional\u003cOnlineStorage.Type\u003e target, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (isLocal \u0026\u0026 authToken.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This should never happen. authToken should not exist if isLocal is true.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (!isLocal \u0026\u0026 !authToken.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This should never happen. authToken should always exist if isLocal is false.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.backupPath \u003d backupPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.isLocal \u003d isLocal;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.target \u003d target.orElse(OnlineStorage.Type.GITHUB);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.authToken \u003d authToken;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (isLocal) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            localBackupCommand(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"local storage\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            onlineBackupCommand(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"GitHub Gists\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrievePath(Model model) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return backupPath.orElse(model.getUserPrefs().getAddressBookBackupFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrieveAddressBookPath(Model model) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return model.getUserPrefs().getAddressBookBackupFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrieveExpenseBookPath(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return model.getUserPrefs().getExpenseBookBackupFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                || (other instanceof BackupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 backupPath.equals(((BackupCommand) other).backupPath));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Raises event to indicate new online backup command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param model Memory model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void onlineBackupCommand(Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                new OnlineBackupEvent(target, model.getAddressBook(), model.getExpenseBook(), authToken));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Raises event to indicate new online backup command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param model Memory model"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void localBackupCommand(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        EventsCenter.getInstance().post(new LocalBackupEvent(model.getAddressBook(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                model.getUserPrefs().getAddressBookBackupFilePath(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                model.getExpenseBook(), model.getUserPrefs().getExpenseBookBackupFilePath()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Clears the expense book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ClearExpenseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearExpense\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.resetData(new ExpenseBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.commitExpenseBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "//@@author ian-tjahjono"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteEvent\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ian-tjahjono": 44,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the expense book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteExpense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Expense deleted successfully\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public DeleteExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.commitExpenseBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof DeleteExpenseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteExpenseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the student planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskDelete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Edits the details of an existing expense in the expense book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editExpense\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"[\" + PREFIX_EXPENSE_CATEGORY + \"EXPENSE CATEGORY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"[\" + PREFIX_EXPENSE_DATE + \"EXPENSE DATE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"[\" + PREFIX_EXPENSE_VALUE + \"EXPENSE VALUE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            + PREFIX_EXPENSE_VALUE + \"11.11\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Expense edited successfully\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.updateExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.commitExpenseBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseCategory updatedExpenseCategory \u003d editExpenseDescriptor.getExpenseCategory()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .orElse(expenseToEdit.getExpenseCategory());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseDate updatedExpenseDate \u003d editExpenseDescriptor.getExpenseDate()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .orElse(expenseToEdit.getExpenseDate());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseValue updatedExpenseValue \u003d editExpenseDescriptor.getExpenseValue()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .orElse(expenseToEdit.getExpenseValue());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenseDescriptor.getTags().orElse(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new Expense(updatedExpenseCategory, updatedExpenseDate, updatedExpenseValue, updatedTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!(other instanceof EditExpenseCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand e \u003d (EditExpenseCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private ExpenseCategory expenseCategory;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private ExpenseDate expenseDate;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private ExpenseValue expenseValue;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            setExpenseCategory(toCopy.expenseCategory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            setExpenseDate(toCopy.expenseDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            setExpenseValue(toCopy.expenseValue);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(expenseCategory, expenseDate, expenseValue, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void setExpenseCategory(ExpenseCategory expenseCategory) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.expenseCategory \u003d expenseCategory;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public Optional\u003cExpenseCategory\u003e getExpenseCategory() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.ofNullable(expenseCategory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void setExpenseDate(ExpenseDate expenseDate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.expenseDate \u003d expenseDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public Optional\u003cExpenseDate\u003e getExpenseDate() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.ofNullable(expenseDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void setExpenseValue(ExpenseValue expenseValue) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.expenseValue \u003d expenseValue;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public Optional\u003cExpenseValue\u003e getExpenseValue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.ofNullable(expenseValue);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return getExpenseCategory().equals(e.getExpenseCategory())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u0026\u0026 getExpenseDate().equals(e.getExpenseDate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u0026\u0026 getExpenseValue().equals(e.getExpenseValue())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpenseTrendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayExpenseTrendEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Display a new window for the trend of expense for the past 6 months"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseTrendCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expenseTrend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display expense trend for past 6 months\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final double INITIAL_EXPENSE_VALUE \u003d 0.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ObservableList\u003cExpense\u003e expenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        TreeMap\u003cString, Double\u003e expenseTrendData \u003d getExpenseTrendData(expenseList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EventsCenter.getInstance().post(new DisplayExpenseTrendEvent(expenseTrendData));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private TreeMap\u003cString, Double\u003e getExpenseTrendData(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        YearMonth currentMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        TreeMap\u003cString, Double\u003e expenseTrendData \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            YearMonth selectedMonth \u003d currentMonth.minusMonths(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseTrendData.put(selectedMonth.toString(), INITIAL_EXPENSE_VALUE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            String formattedMonth \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    selectedMonth.toString().substring(5) + \"/\" + selectedMonth.toString().substring(0, 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            for (Expense expense : expenseList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                if (expense.getExpenseDate().toString().contains(formattedMonth)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    double storedValue \u003d expenseTrendData.get(selectedMonth.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    double expenseValue \u003d Double.parseDouble(expense.getExpenseValue().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    expenseTrendData.put(selectedMonth.toString(), storedValue + expenseValue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseTrendData;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindAddressCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Finds and lists all persons in address book whose address contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindAddressCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findaddress\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose address contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" College Geylang Kio \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    private final AddressContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindAddressCommand(AddressContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                || (other instanceof FindAddressCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAddressCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindNameCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findname\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindNameCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                || (other instanceof FindNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNameCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPhoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Finds and lists all persons in address book whose phone number contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindPhoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findphone\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose phone number contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 98835761 87438807\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    private final PhoneContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindPhoneCommand(PhoneContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                || (other instanceof FindPhoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPhoneCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Lists all tasks in the student planner to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskList\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MonthlyExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayMonthlyExpenseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Display a new window for the expense of the selected month."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class MonthlyExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"monthlyExpense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display monthly expense\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_MONTHLY_EXPENSE_COMMAND_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \"Argument should be a valid month and in MM/YYYY format!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final String selectedMonth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates an MonthlyExpenseCommand to display the expense for the select month."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public MonthlyExpenseCommand(String selectedMonth) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(selectedMonth);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.selectedMonth \u003d selectedMonth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(this.selectedMonth);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ObservableList\u003cExpense\u003e expenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        HashMap\u003cString, String\u003e monthlyData \u003d getMonthlyData(expenseList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EventsCenter.getInstance().post(new DisplayMonthlyExpenseEvent(monthlyData));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private HashMap\u003cString, String\u003e getMonthlyData(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        HashMap\u003cString, String\u003e monthlyData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (Expense expense : expenseList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (expense.getExpenseDate().toString().contains(this.selectedMonth)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                if (monthlyData.containsKey(expense.getExpenseCategory().toString())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    double storedValue \u003d Double.parseDouble(monthlyData.get(expense.getExpenseCategory().toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    double expenseValue \u003d Double.parseDouble(expense.getExpenseValue().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    String newValue \u003d Double.toString(storedValue + expenseValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    monthlyData.put(expense.getExpenseCategory().toString(), newValue);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    monthlyData.put(expense.getExpenseCategory().toString(), expense.getExpenseValue().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return monthlyData;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Reverts the {@code model}\u0027s expense book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class RedoExpenseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redoExpense\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!model.canRedoExpenseBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.redoExpenseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RestoreCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalRestoreEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineRestoreEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class RestoreCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restore\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \": Restore student planner data from location specified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"(restores from default backup data path if no parameters provided)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Parameters: [github authToken]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" github my_personal_access_token\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Restoring Backup from %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please perform an online backup using %s first or set relevant\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "             + \" settings in user prefs\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_FAILURE_SAMPLE \u003d \": backup github [personal_access_token]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Invalid online service provided\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Optional\u003cPath\u003e backupPath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private boolean isLocal;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private OnlineStorage.Type target;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Optional\u003cString\u003e authToken;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Creates a RestoreCommand to backup data to storage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public RestoreCommand(Optional\u003cPath\u003e backupPath, boolean isLocal,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                          Optional\u003cOnlineStorage.Type\u003e target, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (isLocal \u0026\u0026 authToken.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This should never happen. authToken should not exist if isLocal is true.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (!isLocal \u0026\u0026 !authToken.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This should never happen. authToken should always exist if isLocal is false.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.backupPath \u003d backupPath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.isLocal \u003d isLocal;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.target \u003d target.orElse(OnlineStorage.Type.GITHUB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.authToken \u003d authToken;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (isLocal) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return localRestoreCommand(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return onlineRestoreCommand(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Raises event to indicate new local restore command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private CommandResult localRestoreCommand(Model model) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        EventsCenter.getInstance().post(new LocalRestoreEvent("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                retrieveAddressBookPath(model), retrieveExpenseBookPath(model)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, retrievePath(model).getParent().toString()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Raises event to indicate new online restore command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private CommandResult onlineRestoreCommand(Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (target \u003d\u003d OnlineStorage.Type.GITHUB) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            String gistId \u003d model.getUserPrefs().getAddressBookGistId();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            if (gistId \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_FAILURE, MESSAGE_FAILURE_SAMPLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            EventsCenter.getInstance().post(new OnlineRestoreEvent(target, UserPrefs.TargetBook.AddressBook,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    model.getUserPrefs().getAddressBookGistId(), authToken));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            EventsCenter.getInstance().post(new OnlineRestoreEvent(target, UserPrefs.TargetBook.ExpenseBook,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    model.getUserPrefs().getExpenseBookGistId(), authToken));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"GitHub Gists\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrievePath(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return backupPath.orElse(model.getUserPrefs().getAddressBookBackupFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrieveAddressBookPath(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return model.getUserPrefs().getAddressBookBackupFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path retrieveExpenseBookPath(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return model.getUserPrefs().getExpenseBookBackupFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                || (other instanceof RestoreCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 backupPath.equals(((RestoreCommand) other).backupPath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoExpenseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Reverts the {@code model}\u0027s expense book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class UndoExpenseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undoExpense\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!model.canUndoExpenseBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.undoExpenseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Parses input arguments and creates a new AddExpenseCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class AddExpenseCommandParser implements Parser\u003cAddExpenseCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExpenseCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * and returns an AddExpenseCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public AddExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXPENSE_CATEGORY,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                PREFIX_EXPENSE_VALUE, PREFIX_EXPENSE_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXPENSE_CATEGORY, PREFIX_EXPENSE_VALUE, PREFIX_EXPENSE_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseCategory expenseCategory \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ParserUtil.parseExpenseCategory(argMultimap.getValue(PREFIX_EXPENSE_CATEGORY).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseDate expenseDate \u003d ParserUtil.parseExpenseDate(argMultimap.getValue(PREFIX_EXPENSE_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseValue expenseValue \u003d ParserUtil.parseExpenseValue(argMultimap.getValue(PREFIX_EXPENSE_VALUE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expense \u003d new Expense(expenseCategory, expenseDate, expenseValue, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new AddExpenseCommand(expense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BODY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public AddTaskCommandParser() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public AddTaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_NAME, PREFIX_BODY, PREFIX_START, PREFIX_END,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                        PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_BODY, PREFIX_START, PREFIX_END, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        TaskName taskName \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        Body body \u003d ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        Task task \u003d new Task(taskName, body, startDateTime, endDateTime, priority, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.BackupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ClearExpenseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ExpenseTrendCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindAddressCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindPhoneCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.ListTaskCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.MonthlyExpenseCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.RedoExpenseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.RestoreCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.UndoExpenseCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        case FindAddressCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            return new FindAddressCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        case FindNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            return new FindNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        case FindPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            return new FindPhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        //@@author QzSG"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        case BackupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new BackupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        case RestoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new RestoreCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        //@@author luhan02"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        //@@author ian-tjahjono"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //@@author ChenSongJian"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case AddExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new AddExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case ClearExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new ClearExpenseCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case DeleteExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new DeleteExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case EditExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new EditExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case ExpenseTrendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new ExpenseTrendCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case MonthlyExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new MonthlyExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case RedoExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new RedoExpenseCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case UndoExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new UndoExpenseCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 13,
      "T0roloco": 12,
      "ian-tjahjono": 7,
      "ChenSongJian": 33,
      "QzSG": 8,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BackupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.BackupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Parses input arguments and creates a new RestoreCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class BackupCommandParser implements Parser\u003cBackupCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BackupCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * and returns a BackupCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public BackupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return new BackupCommand(Optional.empty(), true, Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return parseArguments(trimmedArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BackupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Parses extra arguments given by the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return BackupCommand for execution"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private BackupCommand parseArguments(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        List\u003cString\u003e argumentList \u003d Arrays.asList(args.split(\" \", 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        /* temp removal of custom backup location"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (argumentList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new BackupCommand(ParserUtil.parsePath(argumentList.get(0)), true,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (argumentList.size() \u003d\u003d 2 \u0026\u0026 argumentList.get(0).toLowerCase().equals(\"github\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new BackupCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(argumentList.get(1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BackupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final Prefix PREFIX_BODY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE_VALUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 4,
      "ChenSongJian": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "//@@author ian-tjahjono"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * and returns an DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ian-tjahjono": 21,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Parses input arguments and creates a new DeleteExpenseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DeleteExpenseCommandParser implements Parser\u003cDeleteExpenseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExpenseCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * and returns an DeleteExpenseCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public DeleteExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new DeleteExpenseCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "//@@author luhan02"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * and returns an DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Parses input arguments and creates a new EditExpenseCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseCommandParser implements Parser\u003cEditExpenseCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * and returns an EditExpenseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXPENSE_CATEGORY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                PREFIX_EXPENSE_DATE, PREFIX_EXPENSE_VALUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPENSE_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            editExpenseDescriptor.setExpenseCategory("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ParserUtil.parseExpenseCategory(argMultimap.getValue(PREFIX_EXPENSE_CATEGORY).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPENSE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            editExpenseDescriptor.setExpenseDate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ParserUtil.parseExpenseDate(argMultimap.getValue(PREFIX_EXPENSE_DATE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPENSE_VALUE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            editExpenseDescriptor.setExpenseValue("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ParserUtil.parseExpenseValue(argMultimap.getValue(PREFIX_EXPENSE_VALUE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException(EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new EditExpenseCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindAddressCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindAddressCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Parses input arguments and creates a new FindAddressCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindAddressCommandParser implements Parser\u003cFindAddressCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAddressCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * and returns an FindAddressCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindAddressCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAddressCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new FindAddressCommand(new AddressContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindNameCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Parses input arguments and creates a new FindNameCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindNameCommandParser implements Parser\u003cFindNameCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindNameCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * and returns an FindNameCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPhoneCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.commands.FindPhoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Parses input arguments and creates a new FindPhoneCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class FindPhoneCommandParser implements Parser\u003cFindPhoneCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * and returns an FindPhoneCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public FindPhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return new FindPhoneCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MonthlyExpenseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.MonthlyExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Parses input arguments and creates a new MonthlyExpenseCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class MonthlyExpenseCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MonthlyExpenseCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * and returns an MonthlyExpenseCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws java.text.ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public MonthlyExpenseCommand parse(String args) throws seedu.address.logic.parser.exceptions.ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String pattern \u003d \"MM/yyyy\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (args.length() !\u003d pattern.length()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new seedu.address.logic.parser.exceptions.ParseException(String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    MonthlyExpenseCommand.MESSAGE_MONTHLY_EXPENSE_COMMAND_CONSTRAINTS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat (pattern);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            dateFormat.parse(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new seedu.address.logic.parser.exceptions.ParseException(String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    MonthlyExpenseCommand.MESSAGE_MONTHLY_EXPENSE_COMMAND_CONSTRAINTS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new MonthlyExpenseCommand(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.eventContacts.EventContacts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Body;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.DateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Path is not a valid file location\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Parses {@code string} into a {@code Path}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static Optional\u003cPath\u003e parsePath(String stringPath) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (!FileUtil.isValidPath(stringPath.trim())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return Optional.ofNullable(Paths.get(stringPath));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses a {@code String name} into a {@code TaskName}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static TaskName parseTaskName(String name) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new TaskName(trimmedName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses a {@code String body} into a {@codeBody}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the given {@code body} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static Body parseBody(String body) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new Body(body);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses a {@code String stareDateTime } into an {@code DateTime}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the given {@code startDateTime} is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static DateTime parseDateTime(String startDateTime) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        String trimmedStartDateTime \u003d startDateTime.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedStartDateTime)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new DateTime(trimmedStartDateTime);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses a {@code String endDateTime} into an {@code DateTime}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the given {@code endDateTime} is invalid."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static DateTime parseTagDateTime(String endDateTime) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(endDateTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        String trimmedEndDateTime \u003d endDateTime.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedEndDateTime)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new DateTime(trimmedEndDateTime);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code EventName}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventName parseEventName(String name) throws ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String eventDate} into an {@code Event Date}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code eventDate} is invalid."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Date parseEventDate(String eventDate) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEventDate \u003d eventDate.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Date.isValidDate(trimmedEventDate)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Date.MESSAGE_EVENT_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Date(trimmedEventDate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String eventTime} into an {@code Event Time}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code eventTime} is invalid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Time parseEventTime(String eventTime) throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEventTime \u003d eventTime.trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Time.isValidTime(trimmedEventTime)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Time.MESSAGE_EVENT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Time(trimmedEventTime);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String eventContacts} into a {@code EventContacts}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code eventContacts} is invalid."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventContacts parseEventContacts(String eventContacts) throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(eventContacts);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEventContacts \u003d eventContacts.trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedEventContacts)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EventContacts.MESSAGE_EVENT_CONTACTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EventContacts(trimmedEventContacts);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e eventContacts} into a {@code Set\u003cEventContacts\u003e}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cEventContacts\u003e parseEventContacts(Collection\u003cString\u003e eventContacts) throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(eventContacts);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cEventContacts\u003e eventContactsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String eventContactsName : eventContacts) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            eventContactsSet.add(parseEventContacts(eventContactsName));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return eventContactsSet;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses a {@code String expenseValue} into a {@code expenseValue}."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static ExpenseCategory parseExpenseCategory(String expenseCategory) throws ParseException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseCategory);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String trimmedExpenseCategory \u003d expenseCategory.trim();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseCategory.isValidExpenseCategory(trimmedExpenseCategory)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException(ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ExpenseCategory(trimmedExpenseCategory);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses a {@code String expenseDate} into a {@code expenseDate}."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static ExpenseDate parseExpenseDate(String expenseDate) throws ParseException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseDate);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String trimmedExpenseDate \u003d expenseDate.trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseDate.isValidDate(trimmedExpenseDate)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException(ExpenseDate.MESSAGE_EXPENSE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ExpenseDate(trimmedExpenseDate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses a {@code String expenseValue} into a {@code expenseValue}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static ExpenseValue parseExpenseValue(String expenseValue) throws ParseException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseValue);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String trimmedExpenseValue \u003d expenseValue.trim();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseValue.isValidExpenseValue(trimmedExpenseValue)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ParseException(ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ExpenseValue(trimmedExpenseValue);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 75,
      "ChenSongJian": 50,
      "QzSG": 15,
      "-": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RestoreCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.RestoreCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Parses input arguments and creates a new RestoreCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class RestoreCommandParser implements Parser\u003cRestoreCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RestoreCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * and returns a RestoreCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public RestoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return new RestoreCommand(Optional.empty(), true, Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return parseArguments(trimmedArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Parses extra arguments given by the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return RestoreCommand for execution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private RestoreCommand parseArguments(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        List\u003cString\u003e argumentList \u003d Arrays.asList(args.split(\" \", 0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        /* temp disable custom restore"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (argumentList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new RestoreCommand(ParserUtil.parsePath(argumentList.get(0)), true,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (argumentList.size() \u003d\u003d 2 \u0026\u0026 argumentList.get(0).toLowerCase().equals(\"github\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return new RestoreCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(argumentList.get(1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenseBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Wraps all data at the expense-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseBook implements ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final ExpenseList expenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBook() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates an ExpenseBook using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBook(ReadOnlyExpenseBook toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Resets the existing data of this {@code ExpenseBook} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Adds an expense to the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void addExpense(Expense e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses.add(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code target} must exist in the expense book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses.setExpenses(target, editedExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseBook}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code key} must exist in the expense book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author luhan02"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Clears existing expense model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void resetData(ReadOnlyExpenseBook newData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /** Returns the UserPreferences */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    UserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Restore address book from storage."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param restoredAddressBook"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void restoreAddressBook(ReadOnlyAddressBook restoredAddressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Restore address book from storage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param restoredExpenseBook"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void restoreExpenseBook(ReadOnlyExpenseBook restoredExpenseBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author luhan02"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * The task must exist in the student planner."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * {@code task} must not already exist in the student planner."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * {@code target} must exist in the task list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * The task identity of {@code editedPerson} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    void updateTask(Task target, Task editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    //@@author ian-tjahjono"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the student planner."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * The event must exist in the student planner."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     * {@code event} must not already exist in the student planner."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ian-tjahjono"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Returns the ExpenseBook */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * The expense must exist in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code target} must exist in the expense book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void updateExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    boolean canUndoExpenseBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    boolean canRedoExpenseBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void undoExpenseBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void redoExpenseBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves the current expense book state for undo/redo."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void commitExpenseBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luhan02": 40,
      "ian-tjahjono": 22,
      "ChenSongJian": 63,
      "QzSG": 16,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.AddressBookLocalBackupEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.AddressBookLocalRestoreEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.AddressBookOnlineRestoreEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookLocalBackupEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookLocalRestoreEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookOnlineRestoreEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.UserPrefsChangedEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineBackupSuccessResultEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.ui.NewNotificationAvailableEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static final int BOOK_COUNT \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final VersionedExpenseBook versionedExpenseBook;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private int restoreCounter \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyExpenseBook expenseBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook \u003d new VersionedExpenseBook(expenseBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(versionedExpenseBook.getExpenseList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this(new AddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.resetData(newData);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /** Raises an event to indicate the model has changed with custom message*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void indicateAddressBookChanged(String message) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new NewResultAvailableEvent(message));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /** Raises an event to indicate the request to backup model to persistent storage*/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void indicateAddressBookBackupRequest() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new AddressBookLocalBackupEvent(versionedAddressBook, userPrefs.getAddressBookBackupFilePath()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*@Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupAddressBookLocal(Path backupPath) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        indicateAddressBookBackupRequest(backupPath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupExpenseBookLocal(Path backupPath) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        indicateExpenseBookBackupRequest(backupPath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void restoreAddressBook(ReadOnlyAddressBook restoredAddressBook) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        versionedAddressBook.resetData(restoredAddressBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Platform.runLater(() -\u003e indicateAddressBookChanged(\"Data Restored\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        checkAllRestored();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void restoreExpenseBook(ReadOnlyExpenseBook restoredExpenseBook) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        versionedExpenseBook.resetData(restoredExpenseBook);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Platform.runLater(() -\u003e indicateExpenseBookChanged(\"Data Restored\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        checkAllRestored();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Checks that all books successfully restored"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void checkAllRestored() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreCounter++;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (restoreCounter \u003d\u003d BOOK_COUNT) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            restoreCounter \u003d 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new NewNotificationAvailableEvent(\"Restore Operation\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    \"Data restore successful\", Optional.ofNullable(Duration.seconds(5))));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleAddressBookLocalRestoreEvent(AddressBookLocalRestoreEvent event) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Restoring address book from local storage\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreAddressBook(event.readOnlyAddressBook);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleExpenseBookLocalRestoreEvent(ExpenseBookLocalRestoreEvent event) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Restoring expense book from local storage\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreExpenseBook(event.readOnlyExpenseBook);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleAddressBookOnlineRestoreEvent(AddressBookOnlineRestoreEvent event) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Restoring address book from online storage\"));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreAddressBook(event.data);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleOnlineBackupSuccessResultEvent(OnlineBackupSuccessResultEvent event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                String.format(\"Successfully restored %s from online storage\", event.targetBook.name())));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        handleOnlineBackupSuccessResult(event.target, event.targetBook, event.ref);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleExpenseBookOnlineRestoreEvent(ExpenseBookOnlineRestoreEvent event) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Restoring expense book from online storage\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreExpenseBook(event.data);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Processes the success callback object returned from {@code OnlineBackupSuccessResultEvent}. Updates the relevant"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * fields in UserPreferences and raises an event to Storage Manager."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param target {@code OnlineStorage.Type}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param ref Reference object returned from successful online backup callback"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void handleOnlineBackupSuccessResult(OnlineStorage.Type target, UserPrefs.TargetBook targetBook,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                                 String ref) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        switch (target) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        case GITHUB:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            updateGithubRelevantUserPrefs(targetBook, ref);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new UserPrefsChangedEvent(userPrefs));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new NewNotificationAvailableEvent(\"Backup Operation\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                String.format(\"%s saved to gist.github.com/%s!\", targetBook.name(), ref),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(Duration.seconds(8))));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Updates the relevant fields inside User Preferences based on the {@code targetBook}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param targetBook AddressBook, ExpenseBook, etc"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param ref Reference Field depending on online service"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void updateGithubRelevantUserPrefs(UserPrefs.TargetBook targetBook, String ref) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        switch (targetBook) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        case AddressBook:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            userPrefs.setAddressBookGistId(ref);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        case ExpenseBook:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            userPrefs.setExpenseBookGistId(ref);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw (new IllegalStateException(\"Reached illegal flow of code.\"));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author luhan02"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public void addTask(Task person) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public void updateTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return versionedExpenseBook;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void indicateExpenseBookChanged() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        raise(new ExpenseBookChangedEvent(versionedExpenseBook));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /** Raises an event to indicate the model has changed with custom message*/"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void indicateExpenseBookChanged(String message) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new ExpenseBookChangedEvent(versionedExpenseBook));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new NewResultAvailableEvent(message));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /** Raises an event to indicate the request to backup model to persistent storage*/"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void indicateExpenseBookBackupRequest(Path backupPath) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        raise(new ExpenseBookLocalBackupEvent(versionedExpenseBook, userPrefs.getExpenseBookBackupFilePath()));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.removeExpense(target);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.updateExpense(target, editedExpense);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code versionedExpenseBook}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredExpenses);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean canUndoExpenseBook() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return versionedExpenseBook.canUndo();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean canRedoExpenseBook() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return versionedExpenseBook.canRedo();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void undoExpenseBook() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.undo();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void redoExpenseBook() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.redo();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        indicateExpenseBookChanged();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void commitExpenseBook() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        versionedExpenseBook.commit();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 35,
      "ChenSongJian": 93,
      "QzSG": 165,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenseBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Unmodifiable view of an expense book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public interface ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path addressBookFilePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path addressBookBackupFilePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private String addressBookGistId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path expenseBookFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Path expenseBookBackupFilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private String expenseBookGistId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        setAddressBookFilePath(getAddressBookFilePath());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        setAddressBookBackupFilePath(getAddressBookBackupFilePath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        setExpenseBookFilePath(getExpenseBookFilePath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        setExpenseBookBackupFilePath(getExpenseBookBackupFilePath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Enum type used to identify specific data book to target"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public enum TargetBook {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        AddressBook,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExpenseBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return addressBookFilePath \u003d\u003d null ? Paths.get(\"data\" , \"addressbook.xml\") : addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public Path getAddressBookBackupFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return addressBookBackupFilePath \u003d\u003d null ? Paths.get(\"data\" , \"addressbook.bak\") : addressBookBackupFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setAddressBookBackupFilePath(Path addressBookBackupFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.addressBookBackupFilePath \u003d addressBookBackupFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String getAddressBookGistId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return addressBookGistId;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setAddressBookGistId(String addressBookGistId) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.addressBookGistId \u003d addressBookGistId;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String getExpenseBookGistId() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return expenseBookGistId;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setExpenseBookGistId(String expenseBookGistId) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseBookGistId \u003d expenseBookGistId;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath.toAbsolutePath(), o.addressBookFilePath.toAbsolutePath())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 Objects.equals("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        addressBookBackupFilePath.toAbsolutePath(), o.addressBookBackupFilePath.toAbsolutePath())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookGistId, o.addressBookGistId);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                addressBookBackupFilePath, addressBookGistId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        sb.append(\"\\nLocal data backup file location : \" + addressBookBackupFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        sb.append(\"\\nOnline data backup gist id : \" + addressBookGistId);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return expenseBookFilePath \u003d\u003d null ? Paths.get(\"data\" , \"expensebook.xml\") : expenseBookFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseBookFilePath \u003d expenseBookFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Path getExpenseBookBackupFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return expenseBookBackupFilePath \u003d\u003d null ? Paths.get(\"data\" , \"expensebook.bak\") : expenseBookBackupFilePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setExpenseBookBackupFilePath(Path expenseBookBackupFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.expenseBookBackupFilePath \u003d expenseBookBackupFilePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 10,
      "QzSG": 63,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedExpenseBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * {@code ExpenseBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class VersionedExpenseBook extends ExpenseBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final List\u003cReadOnlyExpenseBook\u003e expenseBookStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public VersionedExpenseBook(ReadOnlyExpenseBook initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBookStateList.add(new ExpenseBook(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves a copy of the current {@code ExpenseBook} state at the end of the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBookStateList.add(new ExpenseBook(this));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBookStateList.subList(currentStatePointer + 1, expenseBookStateList.size()).clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Restores the expense book to its previous state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        resetData(expenseBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Restores the expense book to its previously undone state."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        resetData(expenseBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if {@code undo()} has expense book states to undo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if {@code redo()} has expense book states to redo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return currentStatePointer \u003c expenseBookStateList.size() - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!(other instanceof VersionedExpenseBook)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        VersionedExpenseBook otherVersionedExpenseBook \u003d (VersionedExpenseBook) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return super.equals(otherVersionedExpenseBook)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 expenseBookStateList.equals(otherVersionedExpenseBook.expenseBookStateList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedExpenseBook.currentStatePointer;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            super(\"Current state pointer at start of expenseBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            super(\"Current state pointer at end of expenseBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents an Expense in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class Expense implements Comparable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final ExpenseCategory expenseCategory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final ExpenseDate expenseDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final ExpenseValue expenseValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Expense(ExpenseCategory expenseCategory, ExpenseDate expenseDate, ExpenseValue expenseValue, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireAllNonNull(expenseCategory, expenseValue, expenseDate, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseCategory \u003d expenseCategory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseDate \u003d expenseDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseValue \u003d expenseValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseCategory getExpenseCategory() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this.expenseCategory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseDate getExpenseDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this.expenseDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseValue getExpenseValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this.expenseValue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return Objects.hash(expenseCategory, expenseDate, expenseValue, tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        builder.append(\"Category: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(getExpenseCategory())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(\" $\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(getExpenseValue())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(\" spent on: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(getExpenseDate())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int compareTo(Expense expense) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Date date1 \u003d simpleDateFormat.parse(this.getExpenseDate().toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Date date2 \u003d simpleDateFormat.parse(expense.getExpenseDate().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return date2.compareTo(date1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseCategory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents an Expense\u0027s category in the expense book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpenseCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseCategory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \"Expense category should only contain alphabets.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_CATEGORY_VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final String expenseCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Constructs a {@code ExpenseCategory}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param expenseCategory A valid expense category."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseCategory(String expenseCategory) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseCategory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        checkArgument(isValidExpenseCategory(expenseCategory), MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseCategory \u003d expenseCategory.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static boolean isValidExpenseCategory(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return test.matches(EXPENSE_CATEGORY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseCategory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof ExpenseCategory // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 expenseCategory.equals(((ExpenseCategory) other).expenseCategory)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseCategory.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents an expense\u0027s date in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_EXPENSE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \"Expense date should be a valid date in DD/MM/YYYY format.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final String expenseDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Constructs a {@code ExpenseDate}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param expenseDate A valid expense date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseDate(String expenseDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        checkArgument(isValidDate(expenseDate), MESSAGE_EXPENSE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseDate \u003d expenseDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String pattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (test.length() !\u003d pattern.length()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat (pattern);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            dateFormat.parse(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof ExpenseDate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 expenseDate.equals(((ExpenseDate) other).expenseDate)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseDate.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A list of expense that does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " **/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Adds an expense to the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        insertionSort(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setExpenses(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof ExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenseList) other).internalList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param internalList list of expenses to be sorted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void insertionSort(ObservableList\u003cExpense\u003e internalList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        int n \u003d internalList.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (int i \u003d 1; i \u003c n; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Expense key \u003d internalList.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            int j \u003d i - 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            while (j \u003e\u003d 0 \u0026\u0026 internalList.get(j).compareTo(key) \u003e 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                internalList.set(j + 1, internalList.get(j));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                j \u003d j - 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            internalList.set(j + 1, key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseValue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents an expense\u0027s value in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpenseValue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseValue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_EXPENSE_VALUE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \"Expense value should only contain numbers, in 2 decimal points and more than 0.00.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final double ZERO_EXPENSE_VALUE \u003d 0.00;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_VALUE_VALIDATION_REGEX \u003d \"\\\\d+\\\\.\\\\d{2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final String expenseValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Constructs a {@code ExpenseValue}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param expenseValue A valid expense value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseValue(String expenseValue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        checkArgument(isValidExpenseValue(expenseValue), MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseValue \u003d expenseValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if a given string is a valid value with 2 decimal places."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static boolean isValidExpenseValue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (test.matches(EXPENSE_VALUE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Double.parseDouble(test) !\u003d ZERO_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseValue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                || (other instanceof ExpenseValue // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 expenseValue.equals(((ExpenseValue) other).expenseValue)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseValue.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "T0roloco": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "T0roloco"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "T0roloco"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "T0roloco"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "T0roloco": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Body.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Represents a Task\u0027s datails in the task list ."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class Body {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_BODY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            \"Task body can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private String bodyString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Body(String bodyString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.bodyString \u003d bodyString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return bodyString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Represents a Task\u0027s start \u0026 end date time in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_DATETIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            \"Date \u0026 Time should only contain numbers, \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                    +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                    \"and it should in DD/MM_HHmm format\\\";should be at least 4 digits long\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String DATETIME_VALIDATION_REGEX \u003d \"\\\\d+\\\\/\\\\d+(\\\\w\\\\d+)?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private String dateTimeString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.dateTimeString \u003d dateTimeString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns true if a given string is a valid date \u0026 time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return test.matches(DATETIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return dateTimeString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Represents a Task\u0027s priority in the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            \"Task body can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private String priorityString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Priority(String priorityString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.priorityString \u003d priorityString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return priorityString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Represents a Task in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final TaskName taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final Body body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Task(TaskName taskName, Body body, DateTime startDateTime, DateTime endDateTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireAllNonNull(taskName, body, startDateTime, endDateTime, priority, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public TaskName getTaskName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return Objects.hash(taskName, body, startDateTime, endDateTime, priority, tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        builder.append(getTaskName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(\" Body: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(getBody())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(\" Start DateTime: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(getStartDateTime())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(\" End DateTime: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(getEndDateTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(\" priority: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Represents a Task\u0027s name in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class TaskName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public TaskName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luhan02"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                || (other instanceof TaskName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luhan02"
        },
        "content": "                \u0026\u0026 fullName.equals(((TaskName) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/expections/DuplicateListException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task.expections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class DuplicateListException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    public DuplicateListException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luhan02"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/expections/ListNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luhan02"
        },
        "content": "package seedu.address.model.task.expections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luhan02"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luhan02"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luhan02"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luhan02"
        },
        "content": "public class ListNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luhan02"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luhan02": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            new Expense(new ExpenseCategory(\"Food\"), new ExpenseDate(\"11/11/1111\"), new ExpenseValue(\"11.11\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    getTagSet(\"friends\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static ReadOnlyExpenseBook getSampleExpenseBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBook sampleEb \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            sampleEb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return sampleEb;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 33,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook, Path backupFilePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenseBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ExpenseBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public interface ExpenseBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns ExpenseBook data as a {@link ReadOnlyExpenseBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @see #getExpenseBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param expenseBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @see #saveExpenseBook(ReadOnlyExpenseBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void backupExpenseBook(ReadOnlyExpenseBook expenseBook, Path backupFilePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GitHubStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.kohsuke.github.GHGist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.kohsuke.github.GHGistBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.kohsuke.github.GHGistFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.kohsuke.github.GitHub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * A class to handle saving data to Github Gists."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class GitHubStorage implements OnlineStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Successfully saved to Github Gists\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static GitHub github_ \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private String authToken \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public GitHubStorage(String authToken) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(authToken);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        this.authToken \u003d authToken;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void saveContentToStorage(String content, String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        throw new UnsupportedOperationException(\"This online storage does not \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                + \"support saveContentToStorage with 2 variables\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public URL saveContentToStorage(String content, String fileName, String description)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        github_ \u003d GitHub.connectUsingOAuth(authToken);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GHGistBuilder ghGistBuilder \u003d buildGistFromContent(content, fileName, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GHGist ghGist \u003d ghGistBuilder.create();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return ghGist.getHtmlUrl();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String readContentFromStorage(UserPrefs.TargetBook targetBook, String ref) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        requireNonNull(ref);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return readContentFromGist(targetBook, ref);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private GHGistBuilder buildGistFromContent(String content, String fileName, String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GHGistBuilder ghGistBuilder \u003d new GHGistBuilder(github_);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ghGistBuilder.public_(false).description(description).file(fileName, content);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return ghGistBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Reads content from Gist and returns it as a string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param gistId"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public String readContentFromGist(UserPrefs.TargetBook targetBook, String gistId) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        github_ \u003d GitHub.connectUsingOAuth(authToken);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GHGist ghGist \u003d github_.getGist(gistId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GHGistFile gistFile \u003d ghGist.getFile(String.format(\"%s.bak\", targetBook.name()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return gistFile.getContent();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OnlineStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.exceptions.OnlineBackupFailureException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * API of the OnlineStorage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public interface OnlineStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Enum types for support online storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    enum Type {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        GITHUB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Saves the given {@code content} to the online storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param content cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param fileName cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws OnlineBackupFailureException if there was any problem saving to online storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void saveContentToStorage(String content, String fileName) throws IOException, OnlineBackupFailureException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Saves the given {@code content} to the online storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param content cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param fileName cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param description can be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return Object representing the return of a successful online backup, can be a String or a URL"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws OnlineBackupFailureException if there was any problem saving to online storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    Object saveContentToStorage(String content, String fileName, String description)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throws IOException, OnlineBackupFailureException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Reads the given {@code targetBook} with reference id from online storage and returns contents as a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param targetBook {@code UserPrefs.TargetBook} book type of backup content"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param ref Reference string used to identity backup content on online service, example would"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *            be gists id from Github"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return Contents of backup returned as a string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    String readContentFromStorage(UserPrefs.TargetBook targetBook, String ref) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalBackupEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalRestoreEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineBackupEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineRestoreEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public interface Storage extends AddressBookStorage, ExpenseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void handleOnlineBackupEvent(OnlineBackupEvent obe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void handleLocalBackupEvent(LocalBackupEvent lbe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void handleOnlineRestoreEvent(OnlineRestoreEvent ore);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    void handleLocalRestoreEvent(LocalRestoreEvent lre);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves the current version of the Expense Book to the hard disk."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    void handleExpenseBookChangedEvent(ExpenseBookChangedEvent abce);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves the current version of the Expense Book to the hard disk as a backup."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *   Creates the backup file if it is missing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //void handleExpenseBookLocalBackupEvent(ExpenseBookLocalBackupEvent abce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 26,
      "QzSG": 16,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.concurrent.ExecutorService;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.AddressBookLocalRestoreEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.AddressBookOnlineRestoreEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookLocalRestoreEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.ExpenseBookOnlineRestoreEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.model.UserPrefsChangedEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.DataRestoreExceptionEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalBackupEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.LocalRestoreEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineBackupEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineBackupSuccessResultEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.OnlineRestoreEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.ui.NewNotificationAvailableEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.exceptions.OnlineBackupFailureException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseBookStorage expenseBookStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private GitHubStorage gitHubStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                          ExpenseBookStorage expenseBookStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseBookStorage \u003d expenseBookStorage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleUserPrefsChangedEvent(UserPrefsChangedEvent event) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        saveUserPrefs(event.data);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook, Path backupFilePath) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.fine(\"Attempting to backup address book data file: \" + backupFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleLocalBackupEvent(LocalBackupEvent event) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Saving student planner data as backup\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupLocal(event.readOnlyAddressBook, event.readOnlyExpenseBook,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    event.addressBookPath, event.expenseBookPath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Performs local backup to local storage"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param addressData  {@code ReadOnlyAddressBook} addressData"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param expenseData  {@code ReadOnlyExpenseBook} expenseData"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param addressBookPath Location to save address data to"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param expenseBookPath Location to save expense data to"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void backupLocal(ReadOnlyAddressBook addressData, ReadOnlyExpenseBook expenseData,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                              Path addressBookPath, Path expenseBookPath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExecutorService executorService \u003d Executors.newSingleThreadExecutor();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        executorService.submit(getLocalBackupTask(addressData, expenseData, addressBookPath, expenseBookPath));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Creates a local backup tasks and returns the created task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param addressData  {@code ReadOnlyAddressBook} addressData"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param expenseData  {@code ReadOnlyExpenseBook} expenseData"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param addressBookPath Location to save address data to"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param expenseBookPath Location to save expense data to"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return Local Backup Task"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Task getLocalBackupTask(ReadOnlyAddressBook addressData, ReadOnlyExpenseBook expenseData,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    Path addressBookPath, Path expenseBookPath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Task backupTask \u003d new Task\u003cVoid\u003e() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            @Override public Void call() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                backupAddressBook(addressData, addressBookPath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                backupExpenseBook(expenseData, expenseBookPath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        };"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new NewNotificationAvailableEvent(\"Backup Operation\", \"Local Backup succeeded!\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(Duration.seconds(5))));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupTask.setOnFailed(event -\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataSavingExceptionEvent((Exception) backupTask.getException()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return backupTask;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    Listens directly to RestoreCommand"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleLocalRestoreEvent(LocalRestoreEvent event) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Retrieving student planner data from storage\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            ReadOnlyAddressBook restoredReadOnlyAddressBook \u003d readAddressBook(event.addressBookPath).get();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            ReadOnlyExpenseBook restoredReadOnlyExpenseBook \u003d readExpenseBook(event.expenseBookPath).get();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new AddressBookLocalRestoreEvent(restoredReadOnlyAddressBook));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new ExpenseBookLocalRestoreEvent(restoredReadOnlyExpenseBook));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (IOException | DataConversionException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataRestoreExceptionEvent(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GitHub Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Listens directly to BackupCommand"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleOnlineBackupEvent(OnlineBackupEvent event) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Saving data to online storage\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupOnline(event.target, event.addressData, event.expenseData, event.authToken);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Listens directly to RestoreCommand"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleOnlineRestoreEvent(OnlineRestoreEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Restoring data from online storage\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreOnline(event.target, event.targetBook, event.ref, event.authToken);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Performs online backup to supported online storage"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param target {@code OnlineStorage.Type} such as GITHUB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param addressData  {@code ReadOnlyAddressBook} addressData"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param expenseData  {@code ReadOnlyExpenseBook} expenseData"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param authToken Personal Access Token for GitHub Authentication"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void backupOnline(OnlineStorage.Type target, ReadOnlyAddressBook addressData,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                              ReadOnlyExpenseBook expenseData, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExecutorService executorService \u003d Executors.newSingleThreadExecutor();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        executorService.submit(getOnlineBackupTask(target, addressData, \"AddressBook.bak\", authToken));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        executorService.submit(getOnlineBackupTask(target, expenseData, \"ExpenseBook.bak\", authToken));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Performs restoration from supported online storage"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param target {@code OnlineStorage.Type} such as GITHUB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param ref   Reference String to uniquely identify a file or a url to the backup resource."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param authToken JWT or any other form of access token required by specific online backup service"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void restoreOnline(OnlineStorage.Type target, UserPrefs.TargetBook targetBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                               String ref, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExecutorService executorService \u003d Executors.newSingleThreadExecutor();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Task restoreTask \u003d getOnlineRestoreTask(target, targetBook, ref, authToken);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        executorService.submit(restoreTask);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Performs restoration from local storage"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param path File path to local backup"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void restoreLocal(Path path) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Task getOnlineRestoreTask(OnlineStorage.Type target, UserPrefs.TargetBook targetBook,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                      String ref, Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Task restoreTask \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            @Override public Object call() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                switch(target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    case GITHUB:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        gitHubStorage \u003d new GitHubStorage("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            authToken.orElseThrow(() -\u003e new OnlineBackupFailureException(\"Invalid auth \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    + \"token received\")));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        if (targetBook \u003d\u003d UserPrefs.TargetBook.AddressBook) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            AddressBook restoredAddressBook \u003d XmlUtil.getDataFromString("
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    gitHubStorage.readContentFromStorage(targetBook, ref),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            return restoredAddressBook;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        if (targetBook \u003d\u003d UserPrefs.TargetBook.ExpenseBook) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            ExpenseBook restoredExpenseBook \u003d XmlUtil.getDataFromString("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    gitHubStorage.readContentFromStorage(targetBook, ref),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                    XmlSerializableExpenseBook.class).toModelType();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            return restoredExpenseBook;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                            throw (new IllegalValueException(\"Invalid book data\"));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        };"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            if (targetBook \u003d\u003d UserPrefs.TargetBook.AddressBook) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                raise(new AddressBookOnlineRestoreEvent(((Task\u003cAddressBook\u003e) restoreTask).getValue()));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            } else if (targetBook \u003d\u003d UserPrefs.TargetBook.ExpenseBook) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                raise(new ExpenseBookOnlineRestoreEvent(((Task\u003cExpenseBook\u003e) restoreTask).getValue()));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        restoreTask.setOnFailed(event -\u003e {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            restoreTask.getException().printStackTrace();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataRestoreExceptionEvent((Exception) restoreTask.getException()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return restoreTask;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Creates an online backup tasks based on {@code OnlineStorage.Type} and returns the created task."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param target {@code OnlineStorage.Type} such as GITHUB"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param data  {@code Object} data"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param fileName Name of save backup file"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param authToken Personal Access Token for GitHub Authentication"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Task getOnlineBackupTask(OnlineStorage.Type target, Object data, String fileName,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                     Optional\u003cString\u003e authToken) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Task backupTask \u003d new Task\u003cOnlineBackupSuccessResultEvent\u003e() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            @Override public OnlineBackupSuccessResultEvent call() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                switch(target) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    case GITHUB:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        gitHubStorage \u003d new GitHubStorage("
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                authToken.orElseThrow(() -\u003e new OnlineBackupFailureException(\"Invalid auth \""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                        + \"token received\")));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        URL url \u003d gitHubStorage.saveContentToStorage(handleBookData(data), fileName,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                \"Student Book Backup\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        String successMessage \u003d GitHubStorage.SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        updateMessage(successMessage);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        String ref \u003d url.getPath().substring(1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        return new OnlineBackupSuccessResultEvent(OnlineStorage.Type.GITHUB,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                                handleUserPrefsUpdateField(data), ref);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        };"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupTask.setOnSucceeded(event -\u003e {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new NewResultAvailableEvent(backupTask.getMessage()));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise((OnlineBackupSuccessResultEvent) backupTask.getValue());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupTask.setOnFailed(event -\u003e {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataSavingExceptionEvent((Exception) backupTask.getException()));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return backupTask;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Returns the proper xml to string content based on the type of book data"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param data"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return Book data serialised as a string"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws JAXBException"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private String handleBookData(Object data) throws IllegalValueException, JAXBException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (data instanceof ReadOnlyAddressBook) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return XmlUtil.convertDataToString("
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    new XmlSerializableAddressBook((ReadOnlyAddressBook) data));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (data instanceof ReadOnlyExpenseBook) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return XmlUtil.convertDataToString("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    new XmlSerializableExpenseBook((ReadOnlyExpenseBook) data));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw (new IllegalValueException(\"Invalid data provided\"));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Converts data object to its book data type used to update specific User Preference fields"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param data"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @return Type of data book"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @throws JAXBException"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private UserPrefs.TargetBook handleUserPrefsUpdateField(Object data) throws IllegalValueException, JAXBException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (data instanceof ReadOnlyAddressBook) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return UserPrefs.TargetBook.AddressBook;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        if (data instanceof ReadOnlyExpenseBook) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            return UserPrefs.TargetBook.ExpenseBook;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw (new IllegalValueException(\"Invalid data provided\"));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return readExpenseBook(expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return expenseBookStorage.readExpenseBook(filePath);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        return expenseBookStorage.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        saveExpenseBook(expenseBook, expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        expenseBookStorage.saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupExpenseBook(ReadOnlyExpenseBook expenseBook, Path backupFilePath) throws IOException {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.fine(\"Attempting to backup expense book data file: \" + backupFilePath);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        expenseBookStorage.backupExpenseBook(expenseBook, backupFilePath);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleExpenseBookChangedEvent(ExpenseBookChangedEvent event) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            saveExpenseBook(event.data);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void handleExpenseBookLocalBackupEvent(ExpenseBookLocalBackupEvent event) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Saving student planner data as backup\"));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            backupExpenseBook(event.data, event.filePath);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 7,
      "QzSG": 341,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedExpense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * JAXB-friendly version of the Expense."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class XmlAdaptedExpense {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Constructs an XmlAdaptedExpense."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlAdaptedExpense() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Constructs an {@code XmlAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlAdaptedExpense(String category, String date, String value, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Converts a given Expense into this class for JAXB use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedExpense"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        category \u003d source.getExpenseCategory().expenseCategory;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        date \u003d source.getExpenseDate().expenseDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        value \u003d source.getExpenseValue().expenseValue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Converts this jaxb-friendly adapted Expense object into the model\u0027s Expense object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Expense"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ExpenseCategory.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseCategory.isValidExpenseCategory(category)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final ExpenseCategory modelCategory \u003d new ExpenseCategory(category);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ExpenseDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(ExpenseDate.MESSAGE_EXPENSE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final ExpenseDate modelDate \u003d new ExpenseDate(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    ExpenseValue.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!ExpenseValue.isValidExpenseValue(value)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalValueException(ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final ExpenseValue modelValue \u003d new ExpenseValue(value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new Expense(modelCategory, modelDate, modelValue, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!(other instanceof XmlAdaptedExpense)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        XmlAdaptedExpense otherExpense \u003d (XmlAdaptedExpense) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return Objects.equals(category, otherExpense.category)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherExpense.date)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 Objects.equals(value, otherExpense.value)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u0026\u0026 tagged.equals(otherExpense.tagged);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook, Path backupFilePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        saveAddressBook(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlExpenseBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A class to access ExpenseBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class XmlExpenseBookStorage implements ExpenseBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlExpenseBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlExpenseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return readExpenseBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Similar to {@link #readExpenseBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.info(\"ExpenseBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        XmlSerializableExpenseBook xmlExpenseBook \u003d XmlFileStorage.loadExpenseFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return Optional.of(xmlExpenseBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Similar to {@link #saveExpenseBook(ReadOnlyExpenseBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(expenseBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableExpenseBook(expenseBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void backupExpenseBook(ReadOnlyExpenseBook expenseBook, Path backupFilePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        saveExpenseBook(expenseBook, backupFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Saves the given expenseBook data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableExpenseBook expenseBook)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            XmlUtil.saveDataToFile(file, expenseBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns expense book in the file or an empty expense book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static XmlSerializableExpenseBook loadExpenseFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableExpenseBook.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 27,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableExpenseBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * An Immutable ExpenseBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "@XmlRootElement(name \u003d \"expensebook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class XmlSerializableExpenseBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private List\u003cXmlAdaptedExpense\u003e expenses;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates an empty XmlSerializableExpenseBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlSerializableExpenseBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public XmlSerializableExpenseBook(ReadOnlyExpenseBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenses.addAll(src.getExpenseList().stream().map(XmlAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Converts this expensebook into the model\u0027s {@code ExpenseBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (XmlAdaptedExpense p : expenses) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Expense expense \u003d p.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!(other instanceof XmlSerializableExpenseBook)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenses.equals(((XmlSerializableExpenseBook) other).expenses);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.controlsfx.control.textfield.AutoCompletionBinding;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private AutoCompletionBinding autoCompletionBinding;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.commandList \u003d logic.getCommandList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //@@author ChenSongJian"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        autoCompletionBinding \u003d TextFields.bindAutoCompletion(commandTextField, commandList -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return commandList.getUserText().isEmpty() ? null : this.commandList.stream().filter(command -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                return command.toLowerCase().startsWith(commandList.getUserText().toLowerCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //@@"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@author ChenSongJian"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void offAutoComplete() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.autoCompletionBinding.dispose();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //@@"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 132,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        category.setText(expense.getExpenseCategory().expenseCategory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        date.setText(expense.getExpenseDate().expenseDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        value.setText(expense.getExpenseValue().expenseValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expense.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.ExpensePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e personList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void setConnections(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        raise(new ExpensePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Scrolls to the {@code ExpenseCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseTrendWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Controller for a expense trend page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseTrendWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ExpenseTrendWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String FXML \u003d \"ExpenseTrendWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates a new ExpenseTrendWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param root Stage to use as the root of the ExpenseTrendWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseTrendWindow(Stage root) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates a new ExpenseTrendWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseTrendWindow() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setExpenseTrendData(TreeMap\u003cString, Double\u003e expenseTrendData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        displayExpenseTrendData(updateBarChart(expenseTrendData));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * updates the bar chart with the expense trend data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param expenseTrendData the total value of monthly expense for past 6 months"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public BarChart updateBarChart(TreeMap\u003cString, Double\u003e expenseTrendData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        XYChart.Series\u003cString, Double\u003e series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (String key : expenseTrendData.keySet()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(key, expenseTrendData.get(key)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        xAxis.setLabel(\"Month\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        yAxis.setLabel(\"Monthly Expense ($)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        series.setName(\"Expense\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        BarChart barChart \u003d new BarChart(xAxis, yAxis);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        barChart.getData().add(series);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return barChart;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * displays the expense trend data in a new window"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param barChart the bar chart of the expense trend"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void displayExpenseTrendData (BarChart barChart) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        AnchorPane anchorPane \u003d new AnchorPane(barChart);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().setScene(scene);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Shows the expense trend window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        logger.fine(\"Showing monthly expense window about the selected month.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if the expense trend window is currently being shown."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Focuses on the expense trend window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayExpenseTrendEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayMonthlyExpenseEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseTrendWindow expenseTrendWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private MonthlyExpenseWindow monthlyExpenseWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseTrendWindow \u003d new ExpenseTrendWindow();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        monthlyExpenseWindow \u003d new MonthlyExpenseWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        //eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    //public EventListPanel getEventListPanel() {return  eventListPanel;}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void handleDisplayExpenseTrendEvent(DisplayExpenseTrendEvent event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        handleDisplayExpenseTrend(event.getexEenseTrendData());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Display the expense trend window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void handleDisplayExpenseTrend(TreeMap\u003cString, Double\u003e expenseTrend) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseTrendWindow.setExpenseTrendData(expenseTrend);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!expenseTrendWindow.isShowing()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseTrendWindow.show();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expenseTrendWindow.focus();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private void handleDisplayMonthlyExpenseEvent(DisplayMonthlyExpenseEvent event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        handleDisplayMonthlyExpense(event.getMonthlyData());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Display the monthly expense window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void handleDisplayMonthlyExpense(HashMap\u003cString, String\u003e monthlyData) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        monthlyExpenseWindow.setMonthlyData(monthlyData);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (!monthlyExpenseWindow.isShowing()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            monthlyExpenseWindow.show();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            monthlyExpenseWindow.focus();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 61,
      "QzSG": 1,
      "-": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MonthlyExpenseWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Controller for a monthly expense page"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class MonthlyExpenseWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MonthlyExpenseWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String FXML \u003d \"MonthlyExpenseWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates a new MonthlyExpenseWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param root Stage to use as the root of the MonthlyExpenseWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public MonthlyExpenseWindow(Stage root) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Creates a new MonthlyExpenseWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public MonthlyExpenseWindow() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setMonthlyData(HashMap\u003cString, String\u003e monthlyData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        displayMonthlyData(updatePieChart(monthlyData));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * updates the pie chart with the monthly expense data"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param monthlyData the values of each category for the selected month"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public PieChart updatePieChart(HashMap\u003cString, String\u003e monthlyData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ArrayList\u003cPieChart.Data\u003e pieChartDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (HashMap.Entry\u003cString, String\u003e entry : monthlyData.entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            pieChartDataList.add(new PieChart.Data(entry.getKey() + \": $\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    + entry.getValue(), Double.parseDouble(entry.getValue())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e observablePieChartDataList \u003d FXCollections.observableList(pieChartDataList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        PieChart pieChart \u003d new PieChart(observablePieChartDataList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        pieChart.setTitle(\"Monthly Expense\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return pieChart;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * displays the monthly data in a new window"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @param pieChart the pie chart of expense value for each category"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void displayMonthlyData (PieChart pieChart) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        AnchorPane anchorPane \u003d new AnchorPane(pieChart);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().setScene(scene);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Shows the monthly expense window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        logger.fine(\"Showing monthly expense window about the selected month.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns true if the monthly expense window is currently being shown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Focuses on the monthly expense window."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.controlsfx.control.Notifications;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.storage.DataRestoreExceptionEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.commons.events.ui.NewNotificationAvailableEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_BACKUP_SUCCESS_DIALOG_STAGE_TITLE \u003d \"Backup Status\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_BACKUP_SUCCESS_DIALOG_HEADER_MESSAGE \u003d \"Backup operation success\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_BACKUP_SUCCESS_DIALOG_CONTENT_MESSAGE \u003d \"Data backup to %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_RESTORE_ERROR_DIALOG_STAGE_TITLE \u003d \"Backup Restore Error\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_RESTORE_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Restore operation failed\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public static final String FILE_OPS_RESTORE_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not restore data\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void handleDataRestoreExceptionEvent(DataRestoreExceptionEvent event) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_RESTORE_ERROR_DIALOG_HEADER_MESSAGE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                FILE_OPS_RESTORE_ERROR_DIALOG_CONTENT_MESSAGE, event.exception);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Creates an shows a notification with the relevant details provided"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param title Title of the notification"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param message Notification message for the user"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * @param duration Duration to show the notification for before it disappears"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void showNotification(String title, String message, Duration duration) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            ImageView imageIcon \u003d new ImageView("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Paths.get(\"./src/main/resources/view/images/dialog-info.png\").toUri().toURL().toExternalForm());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            Notifications.create()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .title(title)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .text(message)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .hideAfter(duration)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .owner(mainWindow.getPrimaryStage())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .graphic(imageIcon)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new IllegalStateException(\"This should always be valid\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void handleNewNotificationAvailableEvent(NewNotificationAvailableEvent event) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Platform.runLater(() -\u003e showNotification(event.title, event.message, event.duration));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 55,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".auto-complete-popup \u003e .list-view \u003e .virtual-flow \u003e .clipped-container \u003e .sheet \u003e .list-cell {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ".auto-complete-popup \u003e .list-view \u003e .virtual-flow \u003e .clipped-container \u003e .sheet \u003e .list-cell:focused {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    -fx-background-color: #383838 !important;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/******************************************************************************"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "QzSG"
        },
        "content": " Notifications style"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "QzSG"
        },
        "content": " *****************************************************************************/"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "QzSG"
        },
        "content": ".notification-bar \u003e .pane {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "QzSG"
        },
        "content": ".notification-bar \u003e .pane .label {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-padding: 0 0 10 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-font-size: 1.166667em; /*15px;*/"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    -fx-alignment: top-left;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 9,
      "QzSG": 16,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003cText fill\u003d\"#eeeeee\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"\\$\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        \u003cFont name\u003d\"Wingdings\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003cLabel fx:id\u003d\"value\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$value\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"    \" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                    \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 50
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 9
    }
  },
  {
    "path": "src/main/resources/view/ExpenseTrendWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         title\u003d\"Expense Trend\" maximized\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "          \u003cVBox fx:id\u003d\"expenseList\" minWidth\u003d\"175\" maxWidth\u003d\"175\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 7,
      "-": 68
    }
  },
  {
    "path": "src/main/resources/view/MonthlyExpenseWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "         title\u003d\"Monthly Expense\" maximized\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 18
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.xml\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  \"addressBookBackupFilePath\" : \"addressbook.bak\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.xml\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "  \"addressBookBackupFilePath\" : \"addressbook.bak\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        guiRobot.type(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 1,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 2,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Student Planner\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static final String VALID_DATA_STRING \u003d \"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"\u003caddressbook\u003e\u003cpersons\u003e\u003cname\u003eAlice Pauline\u003c/name\u003e\u003cphone\u003e94351253\u003c/phone\u003e\u003cemail\u003ealice@example.com\u003c/email\u003e\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            + \"\u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e\u003ctagged\u003efriends\u003c/tagged\u003e\u003c/addressbook\u003e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static final String EMPTY_DATA_STRING \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void getDataFromString_nullString_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        XmlUtil.getDataFromString(null, AddressBook.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void getDataFromString_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        XmlUtil.getDataFromString(VALID_DATA_STRING, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void getDataFromString_emptyString_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        XmlUtil.getDataFromString(EMPTY_DATA_STRING, AddressBook.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 23,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 2,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luhan02"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        public void restoreAddressBook(ReadOnlyAddressBook restoredAddressBook) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        public void restoreExpenseBook(ReadOnlyExpenseBook restoredExpenseBook) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public void addTask(Task person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public void updateTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luhan02"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luhan02"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luhan02"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canUndoExpenseBook() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canRedoExpenseBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void undoExpenseBook() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void redoExpenseBook() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void commitExpenseBook() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luhan02": 31,
      "ChenSongJian": 65,
      "QzSG": 16,
      "-": 225
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExpenseCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddExpenseCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class AddExpenseCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new AddExpenseCommand(validExpense), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        new AddExpenseCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        CommandResult commandResult \u003d new AddExpenseCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertEquals(String.format(AddExpenseCommand.MESSAGE_SUCCESS, validExpense), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense shopping \u003d new ExpenseBuilder().withExpenseCategory(\"Shopping\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense mrt \u003d new ExpenseBuilder().withExpenseCategory(\"MRT\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        AddExpenseCommand addShoppingCommand \u003d new AddExpenseCommand(shopping);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        AddExpenseCommand addMrtCommand \u003d new AddExpenseCommand(mrt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        AddExpenseCommand addShoppingCommandCopy \u003d new AddExpenseCommand(shopping);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(addShoppingCommand.equals(addShoppingCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(addShoppingCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(addShoppingCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(addShoppingCommand.equals(addMrtCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void restoreAddressBook(ReadOnlyAddressBook restoredAddressBook) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void restoreExpenseBook(ReadOnlyExpenseBook restoredExpenseBook) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addTask(Task person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateTask(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canUndoExpenseBook() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public boolean canRedoExpenseBook() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void undoExpenseBook() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void redoExpenseBook() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void commitExpenseBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void commitExpenseBook() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            // called by {@code AddExpenseCommand#execute()}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            return new ExpenseBook();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 311
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BackupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for BackupCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class BackupCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempBackupFilePath \u003d testFolder.getRoot().toPath().resolve(\"Temp.bak\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setAddressBookBackupFilePath(tempBackupFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        System.out.println(userPrefs.getAddressBookBackupFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), expenseBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), expenseBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_malformedLocalBackupCommandInit_tokenExistsThrows() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        new BackupCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(model.getUserPrefs().getAddressBookBackupFilePath()), true,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), Optional.ofNullable(\"AUTH_TOKEN\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_malformedOnlineBackupCommandInit_tokenNotExistsThrows() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        new BackupCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_localBackupSuccess() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        BackupCommand command \u003d new BackupCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(model.getUserPrefs().getAddressBookBackupFilePath()), true,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        CommandResult result \u003d command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(String.format(BackupCommand.MESSAGE_SUCCESS, \"local storage\"), result.feedbackToUser);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_onlineBackupSuccess() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        BackupCommand command \u003d new BackupCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                        Optional.ofNullable(\"VALID_TOKEN\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        CommandResult result \u003d command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(String.format(BackupCommand.MESSAGE_SUCCESS, \"GitHub Gists\"), result.feedbackToUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 1,
      "QzSG": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ClearExpenseCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_emptyExpenseBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new ClearExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ClearExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.resetData(new ExpenseBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new ClearExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ClearExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_CATEGORY_SHOPPING \u003d \"shopping\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_CATEGORY_MRT \u003d \"MRT\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_DATE_SHOPPING \u003d \"11/11/2011\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_DATE_MRT \u003d \"11/11/2011\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_VALUE_SHOPPING \u003d \"11.11\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_EXPENSE_VALUE_MRT \u003d \"11.11\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String VALID_TAG_TAOBAO \u003d \"taobao\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_CATEGORY_DESC_SHOPPING \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_CATEGORY + VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_CATEGORY_DESC_MRT \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_CATEGORY + VALID_EXPENSE_CATEGORY_MRT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_DATE_DESC_SHOPPING \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_DATE + VALID_EXPENSE_DATE_SHOPPING;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_DATE_DESC_MRT \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_DATE + VALID_EXPENSE_DATE_MRT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_VALUE_DESC_SHOPPING \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_VALUE + VALID_EXPENSE_VALUE_SHOPPING;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String EXPENSE_VALUE_DESC_MRT \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_VALUE + VALID_EXPENSE_VALUE_MRT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String TAG_DESC_TAOBAO \u003d \" \" + PREFIX_TAG + VALID_TAG_TAOBAO;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String INVALID_EXPENSE_CATEGORY_DESC \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_CATEGORY + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in expense category"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String INVALID_EXPENSE_DATE_DESC \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_DATE + \"1/1/2019\"; // not in DD/MM/YYYY format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String INVALID_EXPENSE_VALUE_DESC \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            \" \" + PREFIX_EXPENSE_VALUE; // empty string not allowed for expense value"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_SHOPPING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final EditExpenseCommand.EditExpenseDescriptor DESC_MRT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DESC_MRT \u003d new EditExpenseDescriptorBuilder().withExpenseCategory(VALID_EXPENSE_CATEGORY_MRT)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseDate(VALID_EXPENSE_DATE_MRT).withExpenseValue(VALID_EXPENSE_VALUE_MRT)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DESC_SHOPPING \u003d new EditExpenseDescriptorBuilder().withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseDate(VALID_EXPENSE_DATE_SHOPPING).withExpenseValue(VALID_EXPENSE_VALUE_SHOPPING)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withTags(VALID_TAG_TAOBAO, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Deletes the first expense in {@code model}\u0027s filtered list from {@code model}\u0027s expense book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static void deleteFirstExpense(Model model) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.deleteExpense(firstExpense);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.commitExpenseBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 53,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 6,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoExpenseCommand and RedoExpenseCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * {@code DeleteExpenseCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DeleteExpenseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExpenseCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(), model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(deleteExpenseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), model.getExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // delete -\u003e first expense deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteExpenseCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // undo -\u003e reverts expensebook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new UndoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                UndoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // redo -\u003e same first expense deleted again"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.redoExpenseBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new RedoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                RedoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteExpenseCommand \u003d new DeleteExpenseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // execution failed -\u003e expense book state not added into model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(deleteExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // single expense book state in model -\u003e undoExpenseCommand and redoExpenseCommand fail"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new UndoExpenseCommand(), model, commandHistory, UndoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new RedoExpenseCommand(), model, commandHistory, RedoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommand \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteSecondCommand \u003d new DeleteExpenseCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand deleteFirstCommandCopy \u003d new DeleteExpenseCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 14,
      "-": 241
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SHOPPING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_VALUE_SHOPPING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TAOBAO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(), new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.updateExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBuilder personInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense editedExpense \u003d personInList.withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseValue(VALID_EXPENSE_VALUE_SHOPPING)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withTags(VALID_TAG_TAOBAO)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseValue(VALID_EXPENSE_VALUE_SHOPPING)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withTags(VALID_TAG_TAOBAO)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(), new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.updateExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new EditExpenseCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String expectedMessage \u003d String.format(EditExpenseCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(), new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(editExpenseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expenseToEdit \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new ModelManager(new AddressBook(), new ExpenseBook(model.getExpenseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.updateExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.commitExpenseBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // edit -\u003e first expense edited"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        editExpenseCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // undo -\u003e reverts expensebook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new UndoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                UndoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // redo -\u003e same first expense edited again"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.redoExpenseBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new RedoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                RedoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new EditExpenseDescriptorBuilder().withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand editExpenseCommand \u003d new EditExpenseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // execution failed -\u003e expense book state not added into model"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(editExpenseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // single expense book state in model -\u003e undoExpenseCommand and redoExpenseCommand fail"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new UndoExpenseCommand(), model, commandHistory, UndoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new RedoExpenseCommand(), model, commandHistory, RedoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        final EditExpenseCommand standardCommand \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, DESC_SHOPPING);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditExpenseDescriptor(DESC_SHOPPING);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand commandWithSameValues \u003d new EditExpenseCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearExpenseCommand()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExpenseCommand(INDEX_SECOND_EXPENSE, DESC_SHOPPING)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExpenseCommand(INDEX_FIRST_EXPENSE, DESC_MRT)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SHOPPING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DATE_SHOPPING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_VALUE_SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TAOBAO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_MRT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(DESC_MRT.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(DESC_MRT.equals(DESC_MRT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(DESC_SHOPPING));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor editedShopping \u003d new EditExpenseDescriptorBuilder(DESC_SHOPPING)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(editedShopping));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        editedShopping \u003d new EditExpenseDescriptorBuilder(DESC_SHOPPING)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseDate(VALID_EXPENSE_DATE_SHOPPING).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(editedShopping));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        editedShopping \u003d new EditExpenseDescriptorBuilder(DESC_SHOPPING)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                .withExpenseValue(VALID_EXPENSE_VALUE_SHOPPING).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(editedShopping));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        editedShopping \u003d new EditExpenseDescriptorBuilder(DESC_SHOPPING).withTags(VALID_TAG_TAOBAO).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(DESC_MRT.equals(editedShopping));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExpenseTrendCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.ExpenseTrendCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayExpenseTrendEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseTrendCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new ExpenseTrendCommand(), model, commandHistory, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DisplayExpenseTrendEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MonthlyExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.MonthlyExpenseCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.events.ui.DisplayMonthlyExpenseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class MonthlyExpenseCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String SAMPLE_MONTH \u003d \"11/2018\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new MonthlyExpenseCommand(SAMPLE_MONTH), model, commandHistory, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DisplayMonthlyExpenseEvent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstExpense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class RedoExpenseCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.undoExpenseBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        model.undoExpenseBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.redoExpenseBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new RedoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                RedoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.redoExpenseBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new RedoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                RedoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new RedoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                RedoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RestoreCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.XmlExpenseBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for BackupCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class RestoreCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private Model noBackupModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempAddressBookBackupFilePath \u003d testFolder.getRoot().toPath().resolve(\"AddressBook.bak\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempExpenseBookBackupFilePath \u003d testFolder.getRoot().toPath().resolve(\"ExpenseBook.bak\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempAddressBookFilePath \u003d testFolder.getRoot().toPath().resolve(\"AddressBook.xml\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempExpenseBookFilePath \u003d testFolder.getRoot().toPath().resolve(\"ExpenseBook.xml\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setAddressBookBackupFilePath(tempAddressBookBackupFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setExpenseBookBackupFilePath(tempExpenseBookBackupFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setAddressBookFilePath(tempAddressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setExpenseBookFilePath(tempExpenseBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        UserPrefs noBackupUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setAddressBookGistId(\"c877006f34937fa5133b9619e2d7be1b\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setExpenseBookGistId(\"6e6d4388b672da5a29c951630f4610db\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        System.out.println(userPrefs.getAddressBookBackupFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), expenseBook, userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(tempAddressBookBackupFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        XmlExpenseBookStorage xmlExpenseBookStorage \u003d new XmlExpenseBookStorage(tempExpenseBookBackupFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        xmlExpenseBookStorage.saveExpenseBook(model.getExpenseBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        noBackupModel \u003d new ModelManager(getTypicalAddressBook(), expenseBook, noBackupUserPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_malformedLocalBackupCommandInit_tokenExistsThrows() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        new RestoreCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(model.getUserPrefs().getAddressBookBackupFilePath()), true,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), Optional.ofNullable(\"AUTH_TOKEN\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_malformedOnlineBackupCommandInit_tokenNotExistsThrows() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        new RestoreCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), false,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_localRestoreSuccess() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        RestoreCommand command \u003d new RestoreCommand(Optional.empty(), true, Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        CommandResult result \u003d command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        String expectedPath \u003d model.getUserPrefs().getAddressBookBackupFilePath().getParent().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(String.format(RestoreCommand.MESSAGE_SUCCESS, expectedPath), result.feedbackToUser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_onlineRestore_noPreviousBackupInitFails() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        RestoreCommand command \u003d new RestoreCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(OnlineStorage.Type.GITHUB), Optional.ofNullable(\"INVALID_TOKEN\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        CommandResult result \u003d command.execute(noBackupModel, new CommandHistory());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(String.format(RestoreCommand.MESSAGE_FAILURE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                RestoreCommand.MESSAGE_FAILURE_SAMPLE), result.feedbackToUser);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void execute_onlineRestoreInitSuccess() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        RestoreCommand command \u003d new RestoreCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                Optional.ofNullable(\"INVALID_TOKEN\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        CommandResult result \u003d command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(String.format(RestoreCommand.MESSAGE_SUCCESS, \"GitHub Gists\"), result.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new ExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoExpenseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstExpense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class UndoExpenseCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model model \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(new AddressBook(), getTypicalExpenseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new UndoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                UndoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expectedModel.undoExpenseBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandSuccess(new UndoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                UndoExpenseCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertCommandFailure(new UndoExpenseCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                UndoExpenseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExpenseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_CATEGORY_DESC_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_CATEGORY_DESC_SHOPPING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_DATE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_VALUE_DESC_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_VALUE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_CATEGORY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_VALUE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TAOBAO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DATE_SHOPPING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_VALUE_SHOPPING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseExpenseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class AddExpenseCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private AddExpenseCommandParser parser \u003d new AddExpenseCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, PREAMBLE_WHITESPACE + EXPENSE_CATEGORY_DESC_SHOPPING"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_VALUE_DESC_SHOPPING + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple expense category - last expense category accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, EXPENSE_CATEGORY_DESC_MRT + EXPENSE_CATEGORY_DESC_SHOPPING"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_VALUE_DESC_SHOPPING + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple expense date - last expense date accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_MRT + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple expense value - last expense value accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_MRT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_VALUE_DESC_SHOPPING + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO + TAG_DESC_HUSBAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // missing expense category prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, VALID_EXPENSE_CATEGORY_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // missing expense date prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + VALID_EXPENSE_DATE_SHOPPING, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // missing expense value prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, EXPENSE_CATEGORY_DESC_SHOPPING + VALID_EXPENSE_VALUE_SHOPPING"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, VALID_EXPENSE_CATEGORY_SHOPPING + VALID_EXPENSE_DATE_SHOPPING"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + VALID_EXPENSE_VALUE_SHOPPING, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense category"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, INVALID_EXPENSE_CATEGORY_DESC + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO, ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + INVALID_EXPENSE_DATE_DESC + TAG_DESC_TAOBAO, ExpenseDate.MESSAGE_EXPENSE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense value"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, EXPENSE_CATEGORY_DESC_SHOPPING + INVALID_EXPENSE_VALUE_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO, ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, INVALID_EXPENSE_CATEGORY_DESC + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + INVALID_EXPENSE_DATE_DESC, ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EXPENSE_CATEGORY_DESC_SHOPPING"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                        + EXPENSE_VALUE_DESC_SHOPPING + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.BackupCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ClearExpenseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.ExpenseTrendCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.MonthlyExpenseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.RedoExpenseCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.UndoExpenseCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parseCommand_backup() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertTrue(parser.parseCommand(BackupCommand.COMMAND_WORD) instanceof BackupCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertTrue(parser.parseCommand(BackupCommand.COMMAND_WORD + \" github FAKE_TOKEN\") instanceof BackupCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Expense \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_addExpense() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(ExpenseUtil.getAddExpenseCommand(expense)) instanceof AddExpenseCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_clearExpense() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(ClearExpenseCommand.COMMAND_WORD) instanceof ClearExpenseCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(ClearExpenseCommand.COMMAND_WORD + \" 3\") instanceof ClearExpenseCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_deleteExpense() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        DeleteExpenseCommand command \u003d (DeleteExpenseCommand) parser.parseCommand("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                DeleteExpenseCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertEquals(new DeleteExpenseCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_editExpense() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        EditExpenseCommand command \u003d (EditExpenseCommand) parser.parseCommand(EditExpenseCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertEquals(new EditExpenseCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_expenseTrend() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(ExpenseTrendCommand.COMMAND_WORD) instanceof ExpenseTrendCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(ExpenseTrendCommand.COMMAND_WORD + \" 3\") instanceof ExpenseTrendCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_monthlyExpense() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(MonthlyExpenseCommand.COMMAND_WORD + \" 10/2018\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                instanceof MonthlyExpenseCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_redoExpenseCommandWord_returnsRedoExpenseCommand() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(RedoExpenseCommand.COMMAND_WORD) instanceof RedoExpenseCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(\"redoExpense 1\") instanceof RedoExpenseCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parseCommand_undoExpenseCommandWord_returnsUndoExpenseCommand() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(UndoExpenseCommand.COMMAND_WORD) instanceof UndoExpenseCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(parser.parseCommand(\"undoExpense 3\") instanceof UndoExpenseCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 69,
      "QzSG": 8,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BackupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.BackupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class BackupCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private BackupCommandParser parser \u003d new BackupCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private BackupCommand expectedValidOnlineBackupCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            new BackupCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(\"VALID_TOKEN\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_emptyArg_parsesPasses() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        BackupCommand expectedBackupCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                new BackupCommand(Optional.empty(), true, Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseSuccess(parser, \"  \", expectedBackupCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_onlineBackupNoTokenArg_throws() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseSuccess(parser, \" github\", expectedValidOnlineBackupCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_onlineBackupHasTokenArg_parsesPasses() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseSuccess(parser, \" github AUTH_TOKEN\", expectedValidOnlineBackupCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_invalidArgs_parsesFails() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, BackupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempBackupFilePath \u003d testFolder.getRoot().toPath().resolve(\"Temp.bak\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        // invalid arguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseFailure(parser, tempBackupFilePath.toString(), expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * equals to AddExpenseCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static void assertParseExpenseSuccess(Parser parser, String userInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            assertTrue(command instanceof AddExpenseCommand || command instanceof EditExpenseCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 16,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExpenseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * outside of the DeleteExpenseCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * same path through the DeleteExpenseCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class DeleteExpenseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private DeleteExpenseCommandParser parser \u003d new DeleteExpenseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_validArgs_returnsDeleteExpenseCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExpenseCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditExpenseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_CATEGORY_DESC_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_CATEGORY_DESC_SHOPPING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_DATE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_VALUE_DESC_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPENSE_VALUE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_CATEGORY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPENSE_VALUE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TAOBAO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DATE_MRT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseExpenseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExpenseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private EditExpenseCommandParser parser \u003d new EditExpenseCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, VALID_EXPENSE_CATEGORY_SHOPPING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\", EditExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EXPENSE_CATEGORY_DESC_MRT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"0\" + EXPENSE_CATEGORY_DESC_MRT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPENSE_CATEGORY_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS); // invalid expense category"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPENSE_DATE_DESC,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ExpenseDate.MESSAGE_EXPENSE_DATE_CONSTRAINTS); // invalid expense date"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPENSE_VALUE_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS); // invalid expense value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid value followed by valid date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPENSE_VALUE_DESC + EXPENSE_DATE_DESC_SHOPPING,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // valid value followed by invalid value. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + EXPENSE_VALUE_DESC_SHOPPING + INVALID_EXPENSE_VALUE_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                ExpenseValue.MESSAGE_EXPENSE_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TAOBAO + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TAOBAO + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_TAOBAO + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPENSE_CATEGORY_DESC + INVALID_EXPENSE_VALUE_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + VALID_EXPENSE_DATE_MRT, ExpenseCategory.MESSAGE_EXPENSE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXPENSE_VALUE_DESC_MRT + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + EXPENSE_CATEGORY_DESC_SHOPPING + TAG_DESC_TAOBAO;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXPENSE_VALUE_DESC_MRT + EXPENSE_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // expense category"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXPENSE_CATEGORY_DESC_SHOPPING;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // expense date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPENSE_DATE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // expense value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPENSE_VALUE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TAOBAO;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXPENSE_VALUE_DESC_SHOPPING + EXPENSE_CATEGORY_DESC_SHOPPING"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO + EXPENSE_VALUE_DESC_MRT + EXPENSE_CATEGORY_DESC_MRT"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_DATE_DESC_MRT + TAG_DESC_HUSBAND + EXPENSE_VALUE_DESC_SHOPPING"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_CATEGORY_DESC_SHOPPING + EXPENSE_DATE_DESC_SHOPPING + TAG_DESC_TAOBAO;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_EXPENSE_VALUE_DESC + EXPENSE_VALUE_DESC_SHOPPING;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_EXPENSE_VALUE_DESC + EXPENSE_DATE_DESC_MRT"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                + EXPENSE_VALUE_DESC_MRT;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertParseExpenseSuccess(parser, userInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static final String INVALID_PATH \u003d \"#%NUL\u0026\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private static final String VALID_PATH \u003d \"data/temp.bak\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    //@@author QzSG"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parsePath_invalidPath_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        ParserUtil.parseTag(INVALID_PATH);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parsePath_validPath_returnsPath() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Optional\u003cPath\u003e expectedPath \u003d Optional.ofNullable(Paths.get(VALID_PATH));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePath(VALID_PATH));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 19,
      "-": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RestoreCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "QzSG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.logic.commands.RestoreCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "QzSG"
        },
        "content": "import seedu.address.storage.OnlineStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "QzSG"
        },
        "content": "//@@author QzSG"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "QzSG"
        },
        "content": "public class RestoreCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private RestoreCommandParser parser \u003d new RestoreCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private RestoreCommand expectedValidOnlineRestoreCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            new RestoreCommand(Optional.empty(), false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(OnlineStorage.Type.GITHUB),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    Optional.ofNullable(\"VALID_TOKEN\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_emptyArg_parsesPasses() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        RestoreCommand expectedBackupCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                new RestoreCommand(Optional.empty(), true, Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseSuccess(parser, \"  \", expectedBackupCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_onlineBackupNoTokenArg_parsesFails() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseFailure(parser, \" github\", expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_onlineBackupHasTokenArg_parsesPasses() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseSuccess(parser, \" github AUTH_TOKEN\", expectedValidOnlineRestoreCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void parse_invalidArgs_parsesFails() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RestoreCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path tempRestoreFilePath \u003d testFolder.getRoot().toPath().resolve(\"Temp.bak\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        // invalid arguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        assertParseFailure(parser, tempRestoreFilePath.toString(), expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "QzSG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.ExpenseBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        modelManager.getFilteredExpenseList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBookBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBook differentExpenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, expenseBook, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, expenseBook, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentExpenseBook, userPrefs)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, expenseBook, userPrefs)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, expenseBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 16,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseCategoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseCategoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpenseCategory(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_invalidExpenseCategory_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String invalidExpenseCategory \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ExpenseCategory(invalidExpenseCategory));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void isValidExpenseCategory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null expense category"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ExpenseCategory.isValidExpenseCategory(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseCategory.isValidExpenseCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseCategory.isValidExpenseCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseCategory.isValidExpenseCategory(\"^\")); // only non-alphabetic characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseCategory.isValidExpenseCategory(\"peter*\")); // contains non-alphabetic characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseCategory.isValidExpenseCategory(\"tao bao\")); // contains space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // valid expense category"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseCategory.isValidExpenseCategory(\"shopping\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseCategory.isValidExpenseCategory(\"Food\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpenseDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_invalidExpenseDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String invalidExpenseDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ExpenseDate(invalidExpenseDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null expense date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ExpenseDate.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseDate.isValidDate(\"4/12/2018\")); // not in DD/MM/YYYY format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseDate.isValidDate(\"04-12-2018\")); // not in DD/MM/YYYY format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseDate.isValidDate(\"30/02/2018\")); // not a valid date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // valid expense dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseDate.isValidDate(\"01/01/0001\")); // valid date in the past"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseDate.isValidDate(\"11/11/2018\")); // valid date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseDate.isValidDate(\"31/12/3000\")); // valid date in the future"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseValueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseValueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpenseValue(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void constructor_invalidExpenseValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        String invalidExpenseValue \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ExpenseValue(invalidExpenseValue));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public void isValidExpenseValue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // null expense values"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ExpenseValue.isValidExpenseValue(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // invalid expense values"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"91\")); // not in 2 decimal places"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"-91.00\")); // contains non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"0.00\")); // no expense should be 0.00"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"expense value\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"901p1.41\")); // alphabets within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertFalse(ExpenseValue.isValidExpenseValue(\"931 2.34\")); // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        // valid expense values"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseValue.isValidExpenseValue(\"0.01\")); // small numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        assertTrue(ExpenseValue.isValidExpenseValue(\"1242938420331.23\")); // long numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        userPrefs.setAddressBookBackupFilePath(Paths.get(\"addressbook.bak\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        Path prefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(prefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 3,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        XmlExpenseBookStorage expenseBookStorage \u003d new XmlExpenseBookStorage(getTempFilePath(\"eb\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, expenseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                new XmlExpenseBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    class XmlExpenseBookStorageExceptionThrowingStub extends XmlExpenseBookStorage {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public XmlExpenseBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 18,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    public void backupAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        backupAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "QzSG"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     * Backup {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "QzSG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "QzSG"
        },
        "content": "                    .backupAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "QzSG"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "QzSG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "QzSG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "QzSG": 23,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.descriptor \u003d new EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseCategory(expense.getExpenseCategory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseDate(expense.getExpenseDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseValue(expense.getExpenseValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setTags(expense.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseCategory} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder withExpenseCategory(String expenseCategory) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseCategory(new ExpenseCategory(expenseCategory));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseDate} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder withExpenseDate(String expenseDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseDate(new ExpenseDate(expenseDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseValue} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder withExpenseValue(String expenseValue) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setExpenseValue(new ExpenseValue(expenseValue));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A utility class to help with building ExpenseBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " *     {@code ExpenseBook eb \u003d new ExpenseBookBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBookBuilder(ExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseBook \u003d expenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Adds a new {@code Expense} to the {@code ExpenseBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBookBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.ExpenseValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"food\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"11/11/2011\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"11.11\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseCategory expenseCategory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseDate expenseDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private ExpenseValue expenseValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseCategory \u003d new ExpenseCategory(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseDate \u003d new ExpenseDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseValue \u003d new ExpenseValue(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseCategory \u003d expenseToCopy.getExpenseCategory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseDate \u003d expenseToCopy.getExpenseDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expenseValue \u003d expenseToCopy.getExpenseValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseCategory} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder withExpenseCategory(String expenseCategory) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseCategory \u003d new ExpenseCategory(expenseCategory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseDate} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder withExpenseDate(String expenseDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseDate \u003d new ExpenseDate(expenseDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Sets the {@code ExpenseValue} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public ExpenseBuilder withExpenseValue(String expenseValue) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        this.expenseValue \u003d new ExpenseValue(expenseValue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new Expense(expenseCategory, expenseDate, expenseValue, tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE_VALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.AddExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.logic.commands.EditExpenseCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an add expense command string for adding the {@code expense}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static String getAddExpenseCommand(Expense expense) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return AddExpenseCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        sb.append(PREFIX_EXPENSE_CATEGORY + expense.getExpenseCategory().expenseCategory + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        sb.append(PREFIX_EXPENSE_VALUE + expense.getExpenseValue().expenseValue + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        sb.append(PREFIX_EXPENSE_DATE + expense.getExpenseDate().expenseDate + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        expense.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.getExpenseCategory().ifPresent(expenseCategory -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                sb.append(PREFIX_EXPENSE_CATEGORY).append(expenseCategory.expenseCategory).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.getExpenseDate().ifPresent(expenseDate -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                sb.append(PREFIX_EXPENSE_DATE).append(expenseDate.expenseDate).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        descriptor.getExpenseValue().ifPresent(expenseValue -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                sb.append(PREFIX_EXPENSE_VALUE).append(expenseValue.expenseValue).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_MRT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_CATEGORY_SHOPPING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DATE_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DATE_SHOPPING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_VALUE_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_VALUE_SHOPPING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.ExpenseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense FOOD \u003d new ExpenseBuilder().withExpenseCategory(\"food\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"1.00\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withTags(\"lunch\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense TRANSPORT \u003d new ExpenseBuilder().withExpenseCategory(\"transport\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.00\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withTags(\"grab\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense DATE \u003d new ExpenseBuilder().withExpenseCategory(\"date\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.10\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense HOTEL \u003d new ExpenseBuilder().withExpenseCategory(\"hotel\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.11\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense TRAVEL \u003d new ExpenseBuilder().withExpenseCategory(\"travel\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.10\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense SCHOOLFEE \u003d new ExpenseBuilder().withExpenseCategory(\"date\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.10\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense GST \u003d new ExpenseBuilder().withExpenseCategory(\"date\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"30/12/2018\").withExpenseValue(\"11.10\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense JD \u003d new ExpenseBuilder().withExpenseCategory(\"jd\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"11/11/2018\").withExpenseValue(\"11.11\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense TAOBAO \u003d new ExpenseBuilder().withExpenseCategory(\"taobao\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(\"11/11/2018\").withExpenseValue(\"11.11\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense SHOPPING \u003d new ExpenseBuilder().withExpenseCategory(VALID_EXPENSE_CATEGORY_SHOPPING)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(VALID_EXPENSE_DATE_SHOPPING).withExpenseValue(VALID_EXPENSE_VALUE_SHOPPING).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Expense MRT \u003d new ExpenseBuilder().withExpenseCategory(VALID_EXPENSE_CATEGORY_MRT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            .withExpenseDate(VALID_EXPENSE_DATE_MRT).withExpenseValue(VALID_EXPENSE_VALUE_MRT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final String KEYWORD_MATCHING_FOOD \u003d \"food\"; // A keyword that matches FOOD"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     * Returns an {@code ExpenseBook} with all the typical expenses."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static ExpenseBook getTypicalExpenseBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        ExpenseBook eb \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "            eb.addExpense(expense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FOOD, TRANSPORT, DATE, HOTEL, TRAVEL, SCHOOLFEE, GST));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "        commandBox.offAutoComplete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenSongJian"
        },
        "content": "    */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenSongJian": 3,
      "-": 155
    }
  }
]
