[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d ClassRepo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F10-1/main[image:https://travis-ci.org/CS2113-AY1819S1-F10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/e1ed6200448148c6a6c8d955ee177c64[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/0WN463/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2113-AY1819S1-F10-1/main\u0026utm_campaign\u003dBadge_Grade\"]https://coveralls.io/github/CS2113-AY1819S1-F10-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F10-1/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Build Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::UiNew.png[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* This is a CLI (Command Line Interface) Database application *written in OOP fashion*. It has a very basic GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* The application manages and facilitates data entry and viewing for a tuition centre."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Students, tutors and admins can access information with increasing privileges respectively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*What\u0027s in Version 1.1*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* A simple GUI added to replace the Text UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* A `Logic` class added together with a `LogicTest` class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Appendices added to \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `5 Features` added from each \u003c\u003cAboutUs#, Team\u003e\u003e Member listed below"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Allowing increasing privileges for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Viewing of student\u0027s overall attendance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Adding of grades to students."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Keying and viewing of fees of students by administrators."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Ability to add and store new exam details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* https://cs2113-ay1819s1-f10-1.github.io/main/[Website]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributors"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "The full list of contributors for ClassRepo can be found https://cs2113-ay1819s1-f10-1.github.io/main/AboutUs.html[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "This application was adapted from AddressBook-Level 3 by se-edu https://github.com/se-edu/addressbook-level3[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-F10-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "micklwl": 3,
      "lucdx": 16,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "mainClassName \u003d \u0027seedu.addressbook.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u0027site-name\u0027: \u0027ClassRep0\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-F10-1/main\u0027,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "0WN463": 71,
      "-": 100
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 423
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Ng Tek In"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::0wn463.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "{empty}[https://github.com/0wn463[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Managing Pull Requests +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Privilege"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Mick Lee"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::micklwl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[http://github.com/micklwl[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Role: Bug catcher +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Managing subjects + exams +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Exams and Examlist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Meghana Narayanan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::meg1456.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "{empty}[https://github.com/meg1456[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Role: Deliverables and Deadlines In-charge +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Ensuring work is completed on time +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Tests and Grades"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Neow Bo Kai"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::meisbokai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "{empty}[https://github.com/meisbokai[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Role: Developer + Code Quality Check +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Code Quality +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Attendance"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d Lucas Lim"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::lucdx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "{empty}[https://github.com/lucdx[github]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Role: Documentation and Scribe +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Coherent documents +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Fees"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 31,
      "micklwl": 3,
      "lucdx": 22,
      "-": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d ClassRepo - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":no-site-header: "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F10-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "By: `Team F10-1`      Since: `Oct 2018`      Licence: `NUS`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click `Open`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open the `StorageFile` file and check for any code errors"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003djava.xml.bind\u0027 to module compiler options`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": " +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "// tag::Exam[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Exams Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-ExamDiagram]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".Structure of the Exam Component"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::Exam.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There is a master ExamBook which contains all the exams. There are several features the ExamBook offers."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The main features are:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Adding a new exam`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Deleting an exam`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Editing an exam`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Registering a person for an exam`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Deregistering a person for an exam`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Changes to the master ExamBook will affect the corresponding exams in the AddressBook. This is done through iterating through the AddressBook to update the change. Changes in the AddressBook will also affect the exams the persons registered for in the ExamBook and hence, for other persons in the AddressBook. This is also done through iterating."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "An Example of how feature 5 - `Registering a person for an exam` works:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". First the specific exam and person will be identified from the most recent exams and persons listing respectively."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The specific exam and person is then extracted out of the ExamBook and AddressBook respectively."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". A check is performed to ensure the specific person is not already registered for the exam."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". A new exam is created to make a copy of the original exam, then have its number of exam takers increased by 1."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The original exam is added to the specific person."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". For both the AddressBook and ExamBook, any copies of the original exam is removed and replaced with the new exam."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "This is demostrated by the following sequence diagram:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-registerPersonDiagram]]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".Sequence Diagram of registering person"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::registerperson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the exam data are being synchronised between the AddressBook and ExamBook"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Each time there is a change in a field of an Exam, there has to be iteration through the whole AddressBook or ExamBook to update them. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Less space is needed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: This can waste some time, if no changes need to be made for example."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Store the persons registered for an exam for each exam."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: This makes it faster to update any changes if needed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: More space is needed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the exam data are being updated"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Each time there is a change in a field of an Exam, a new Exam is created with the new details and added into the ExamBook and the old Exam is deleted from the ExamBook."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Allows exams to be encapsulated using interface."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Temporary increase in space for object created during method ."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Have no interface."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Easy access to set values."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: No encapsulation."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the exam commands"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Exams are stored in a set under each Person object in the AddressBook but stored as a list in the ExamBook."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: In the Exambook, it is required to access an exam through an index to delete and edit, hence list is better. In the AddressBook, exams are only to be used for viewing and accessed to check for value. "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Exams stored under each Person in the AddressBook cannot be sorted."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Exams are stored as a list in both ExamBook and AddressBook."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Exams stored under each Person in the AddressBook can be sorted."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: It will take longer to check if a Person has a same Exam with the Exam to be updated."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of ExamBook"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Exams are stored in a separate txt file from AddressBook"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: This allows for clarity and easy access to find and see exams in raw XML format. "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Extra storage file and hence methods and file paths are needed, this may be confusing and cause much repetition of code."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Exams are stored in same data file as AddressBook."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Only 1 storage file is needed. Less repetition and variables are needed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: May be harder for user to see exams in raw XML format."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "// end::exam[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// tag::privilege[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Privilege Feature"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-PrivilegeDiagram]]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Structure of the Privilege Component"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Privilege.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logic is assigned to one Privilege object at all times. Privilege contains a User and a Person."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The User interface defines what access level the Privilege object have, which is implemented by BasicUser, TutorUser and AdminUser. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "BasicUser is the class with the lowest access level, and the ancestor to other 2 User classes. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To create an increasing level of access, each User of a higher level inherits from the successively lower one. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Each User level have their own list of new commands they can run, which is appended to the list inherited from their parent. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Account class, which contains its respective Privilege object, is the way to assign a privilege level to a Person. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Account also holds authentication details required for logging in. + "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When switching Privilege levels, the Privilege attached to Logic will point its UserType and myPerson to that in the desired Privilege level, as seen below in the Object Diagram and Sequence Diagram. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-PrivilegeObjectDiagram]]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".How switching Privilege is implemented (Object Diagram)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::PrivilegeObjectDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-LoginSequenceDiagram]]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Sequence Diagram for Login Command"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Login_Sequence_Diagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to define a privilege level of Privilege"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Instantiate User\u0027s of the different access level. Privilege contains an enum UserType which point to each of these instantiated object."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Allow us to make use of inheritance to organize the list (higher access level User\u0027s list of allowed commands will always be a superset of that of a lower access level). +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The usage of enums also allows us to keep a reference to the created User object, which allows us to point back to these object if need be, rather than having to instantiate new ones each time."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Requires the use of User class to represent the different access levels"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Use an enum to indicate the current access level. List of allowed commands will be generated base on the value of this enum."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Does not require a separate class to represent the different access levels."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to maintain the list of allowed commands. "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Use a String to determine the Privilege level."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to implement and parse."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Very prone to undetected bugs, like mispelling the Privilege levels."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to define the access level required by the command"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Each User holds a list of commands they can run"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to maintain the list of commands a User can run (just an Command Array)."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to find what access level a command requires. Requires looping through the array to find the presence of the given command."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Each command knows what access level is required to run it"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to find what access level a command requires"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to see what commands a given User can run. Difficult to organize the commands by their required access level."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Have both 1 and 2"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Doing both the above operation becomes easy"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to maintain both information. Access level information is now stored in 2 separate locations and needs to be in sync"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the privilege of Logic given an Account to log into"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** The Privilege object attached to Logic will copy the User and the Person attached to the given Account object, into its own user and myPerson respectively."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Does not require the Command to interact with Logic, thus reducing coupling."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: A bit more awkward solution than the Alternative 2"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Change Logic to point to the new Privilege object inside of Account."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Quick to implement."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Higher level of coupling compared to Alternative 1. Also, would require storing or instantiating a default Privilege and making Logic point to this new object if Logout Command were to be called. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Default required access levels for commands"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Access level is set to Admin by default"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: If a developer forgets to give access level to a Command, it will to still be functional."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: May mask the fact that the Command have the unintended access level of Admin."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Enforce all Commands to be assigned a access level"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Forces delevopers to be deliberate with their access level assignment to commands"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Program will fail to integrate if any of the developer forgot to assign an access level to their newly developed commands."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Who throws InsufficientPrivilege Exception"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Logic throws the Exception"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: It is a common starting point of commands, so it is easy to implement it to throw the Exception"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Blurs the responsiblity of commands being the one throwing the Exception"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Each Command checks the Privilege level during execute()"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Keeps to the responsibility of Commands being the one to throw the Exception when they are being executed"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Requires backdating all the commands to include this function in their execute(). Also prone to errors as a developer may forget to call this function in their execute() of their newly developed Commands."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Have a function that checks the Privilege level in parent Command that is called during execute()"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Same as 2."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Same as 2, but instead of using individual functions, we are repeatedly using the inherited function instead"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// end::privilege[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// tag::Grades[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Grades Feature"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "There is a master StatisticsBook which contains all the statistics for various exams. There is also a list of assessments"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "being stored in the AddressBook. The current set of commands include:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Adding a new statistics`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Adding a new assessment`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Deleting an assessment`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Listing all assessments\u0027"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "An Example of how feature 2 - `Adding a new assessment to the AddressBook` works:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". The user (teacher/ admin) will be able to use the \u0027addassess\u0027 command to add a new assessment."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". This assessment will only be added to the Address Book if it is not already present. i.e. duplicate assessments will"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "  not be entered."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". These assessments reflect the exams/homework of the school in general. This list of assessments can then be used to add"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "  grades to a particular student."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// end::Grades[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0WN463"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We have one type of test:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0WN463"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "0WN463"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "0WN463"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "0WN463"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Target user*: +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Students, teachers and staff of Secondary Schools. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* differences on how each group may interact with the system"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |user |login to my account |access my account"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |user |logout of my account |other people cannot use my account after logging out"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |first admin |raise my privilege to admin |have the initial privilege to access restricted commands"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |add a new person |"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* * *` |admin |change the master password |have a password that is more suitable/easier to remember"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* * *` |admin |add accounts to people |other people can have account to login to"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* * *` |admin |delete accounts from people |remove account from people who do not need it anymore"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |add a new exam |"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |delete an exam |remove entries that I no longer need"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |edit an exam |update the details of exam entries"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |register a user for an exam|allow the user to know of the exam and keep track of the number of exam-takers"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |deregister a user for an exam|remove entries that I made wrongly or no longer need"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin/tutor |view the lists of exams|manage the exams"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* *` |user |view my privilege |know what commands I have access to"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* *` |user |view my own details |know my details"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* *` |student |view my non-private exams |know details of the exams I am going to take"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`*` |user with many exams in the exam book |sort exams by a specificied field |locate an exam easily"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actors: Tutor, Admin"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to add person."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo requests the details of the person to add."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User enters the detail of the person."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo adds the person."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The details entered is of an invalid format +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. The person to add already exists in ClassRepo. +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to delete a specific person in the list."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo deletes the person."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  ClassRepo checks for all the exams the person is registered for and updates the number of exam takers in the ExamBook. Persons in the AddressBook registered under the exams will have their exams details updated. "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Add exam"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: ExamBook"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to add exam."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo requests the details of the exam to add."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User enters the details of the exam."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo adds the exam in the ExamBook."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "0WN463"
        },
        "content": " "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The details entered is of an invalid format."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. The exam to add already exists in ClassRepo."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Delete exam"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: AdressBook,ExamBook"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to delete a specific exam in the list."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo deletes the exam in the ExamBook."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo deletes the exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit exam"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: AdressBook,ExamBook"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to edit a specific exam in the list."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo requests the details of the exam to edit."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  ClassRepo edits the exam in the ExamBook."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The details entered is of an invalid format."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 4a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4b. The exam with the changed details already exists in the ExamBook. "
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 4b1. ClassRepo shows an error message. "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Register for an exam"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: AdressBook,ExamBook"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to list persons."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  User requests to register a specific person in the persons list for a specific exam in the exams list."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the person."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "micklwl"
        },
        "content": "7.  ClassRepo updates the number of exam takers for the specific exam in the ExamBook."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "micklwl"
        },
        "content": "8.  ClassRepo updates the specific exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5a. The given person index is invalid."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5b. The given exam index is invalid."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5b1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Deregister for an exam"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: AdressBook,ExamBook"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to list persons."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  User requests to deregister a specific person in the persons list for a specific exam in the exams list."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the person."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "micklwl"
        },
        "content": "7.  ClassRepo updates the number of exam takers for the specific exam in the ExamBook."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "micklwl"
        },
        "content": "8.  ClassRepo updates the specific exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5a. The given person index is invalid."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5a1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5b. The given exam index is invalid."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5b1. ClassRepo shows an error message."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing the exams list"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d System: ExamBook"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin,Tutor"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: View the user\u0027s own details"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to view his own details"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  ClassRepo shows the details of person associated to the logged-in account"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 1a. User is not logged in +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 1a1. ClassRepo displays an error message. +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Raise privilege to Admin"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. User requests to increase his privilege"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2. ClassRepo requests authentication password"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "0WN463"
        },
        "content": "3. User enters password"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4. ClassRepo increases the user\u0027s privileges to Admin"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 1a. The command entered is of an invalid format +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 1a1. ClassRepo displays an error message. +"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. Incorrect password entered +"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Change master password"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. User requests to change the master password"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2. ClassRepo requests the current password"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "0WN463"
        },
        "content": "3. User enters current password"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4. ClassRepo requests the new password"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "0WN463"
        },
        "content": "5. User enters the new password"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "0WN463"
        },
        "content": "6. ClassRepo changes the password to the new one"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. Incorrect password entered"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "0WN463"
        },
        "content": "User case resumes from step 2"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 5a. New password in invalid format"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 5a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "0WN463"
        },
        "content": "User case resumes from step 4"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 5b1. New password is the same as old password +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "0WN463"
        },
        "content": "5b2. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "0WN463"
        },
        "content": "User case resumes from step 4"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Add account to a person"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "0WN463"
        },
        "content": "3.  User requests to add account to a target person"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4.  ClassRepo adds the account to the person"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3b. The account format is invalid."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3c. The target person have an existing account."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3c1. AddressBook shows an error message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Delete account"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "0WN463"
        },
        "content": "3.  User requests to delete the account belonging to specific person in the list"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4.  AddressBook deletes the account"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3b. Target person does not have an account."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Login to an account"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to login"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  AddressBook requests username and password"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "0WN463"
        },
        "content": "3.  User enters username and password"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4.  AddressBook logs the user into the account"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. User provided wrong number of arguments"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3b. No existing account have the given username."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3c. Password does not match the existing account with the given username."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3c1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Logout of an account"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to logout"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  ClassRepo logs the user out of his account"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 2. User is not logged in"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 2a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: View your current privilege"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1.  User requests to view his privilege"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2.  ClassRepo shows the privilege level and the account the user is logged in as"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[private-exam]] Private exam::"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "A exam with details that is not meant to be released to the students yet"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Main Success Scenario::"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The Main Success Scenario (MSS) describes the most straightforward interaction for a given use case, which assumes that nothing goes wrong. "
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 20,
      "0WN463": 743,
      "micklwl": 329,
      "-": 84
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc-title: "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "This product is not meant for end-users and therefore there is no user-friendly installer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Please refer to the \u003c\u003cDeveloperGuide#setting-up, Setting up\u003e\u003e section to learn how to set up the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Starting the program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Find the project pane (usually located at the left side)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Open up `src/seedu.addressbook` folder"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Right click on `Main`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Run Main.main()`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". The GUI should appear in a few seconds"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::UiNew.png[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d Commands Available"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d General Commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the generic commands:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `abcd`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Person Commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with persons in the system:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "items with `...` after them can have multiple instances. Order of parameters are fixed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Put a `p` before the phone / email / address prefixes to mark it as `private`. `private` details can only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "be seen using the `viewall` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Persons can have any number of tags (including 0)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* `add John Doe p/98765432 e/johnd@gmail.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* `add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Newgate Prison t/criminal t/friend`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Finding all persons containing any keyword in their name: `find`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The search is case sensitive, the order of the keywords does not matter, only the name is searched,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "and persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `John Doe` but not `john`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Returns Any person having names `Betsy`, `Tim`, or `John`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the specified person from the address book. Updates the exams the person is registered for in the exam book and for all persons registered for them in the address book. Irreversible. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d View non-private details of a person : `view`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the non-private details of the specified person. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Views the person at the specified `INDEX`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "`view 2` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 2nd person in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "`view 1` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d View all details of a person : `viewall`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Displays all details (including private details) of the specified person. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `viewall INDEX`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 2` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 2nd person in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 1` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d View your own details : `viewself`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays the all the details (including private details) of the user, provided the user is logged in. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `viewself`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Clears all entries from the address book. Reset all the exams in the exam book. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Exam Commands"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with exam data:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Adding an exam : `addexam`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Adds an exam to the exam book. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `addexam [p]e/EXAMNAME s/SUBJECTNAME d/EXAMDATE st/EXAMSTARTTIME et/EXAMENDTIME dt/EXAMDETAILS`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in SQUARE_BRACKETS are optional. Order of parameters are fixed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Put a `p` before the exam name prefix to mark the exam as `private`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `addexam e/Math 2018 Finals s/Mathematics d/01-12-2018 st/09:00 et/12:00 dt/At MPSH` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `addexam pe/2017 English Finals Paper 2 s/English d/01-12-2017 st/08:00 et/10:00 dt/No Pencils Allowed`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Deleting an exam : `deleteexam`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the specified exam from the exam book. Irreversible. Persons registered for the corresponding exam will have the exam deleted as well. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `deleteexam INDEX`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the exam at the specified `INDEX`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `examslist` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deleteexam 2` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the 2nd exam in the exam book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Editing an exam : `editexam`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Edits the specified exam from the exam book. Persons registered for the corresponding exam will have the exam details updated as well. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `editexam INDEX [p/PRIVATESTATUS] [e/EXAMNAME] [s/SUBJECTNAME] [d/EXAMDATE] [st/EXAMSTARTTIME] [et/EXAMENDTIME] [dt/EXAMDETAILS]`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "however at least 1 of the optional items must be present. Order of parameters are fixed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "PRIVATESTATUS is denoted by `y` for private and `n` for non-private."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `examslist` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`editexam 2 p/y e/English 2018 Finals dt/In MPSH`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `examslist` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`editexam 1 dt/Cancelled`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Listing all exams : `examslist`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Shows a list of all exams in the exam book. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `examslist`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Registering for an exam : `regexam`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers a specified person for a specified exam. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `regexam PERSONINDEX EXAMINDEX`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers a specified person for a specified exam."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The person index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The exam index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Changes to an exam in the exam book will change the corresponding exam for all persons registered under it, be it an edit or a delete. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Exams registered for a person will not be shown in the `list` command and only viewable under the `viewall` and `viewexams` command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `examslist` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`regexam 2` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers the 2nd person in the address book for the 2nd exam in the exam book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Deregistering for an exam : `deregexam`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deregister a specified person for a specified exam. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `deregexam PERSONINDEX EXAMINDEX`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Degisters a specified person for a specified exam."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The person index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The exam index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `examslist` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deregexam 2` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deregisters the 2nd person in the address book for the 2nd exam in the exam book."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Viewing exams : `viewexams`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "View the non-private exams for a person at the specified `INDEX`. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `viewexams INDEX`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Views the exams of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`viewexams 1` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Views the non-private exams of the 1st person in the address book."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clearexams`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Clears all entries from the exam book. All exams will be cleared in the address book as well. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `clearexams`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Fees Commands"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with fees data:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Adding fees to a person: `addfees`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Adds a numerical fee to a person in the address book. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `add INDEX FEE`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Words in `UPPER_CASE` are the parameters, order of parameters are fixed."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Fees are automatically marked as `private`. `private` details can only"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucdx"
        },
        "content": "be seen using the `viewall` command, or for fees specifically, the `viewfees` command."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `addfees 1 344.41`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `addfees 2 0.60`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d View fees of a person : `viewfees`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Displays the fees(private) of the specified person. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `viewfees INDEX`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views the fees of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucdx"
        },
        "content": "The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`viewfees 2` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views fees of the 2nd person in the address book."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`viewall 1` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views fees of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Privilege Commands"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with privilege:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Raises your privilege level : `raise`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Raises the privilege level to Admin. Requires the master password. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `viewall PASSWORD`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `raise default_pw` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Raises your privilege level to Admin."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d See your privilege level : `viewpri`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays your current privilege level as well as the account you are logged in as +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `viewpri`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Change the master password : `editpw`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Changes the master password. Requires the current master password and Admin privileges. +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `editpw OLD_PASSWORD NEW_PASSWORD`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Changes the master password to `NEW_PASSWORD`, if the provided `OLD_PASSWORD` is correct. +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The default master password is \"default_pw\"."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `editpw default_pw new_pw` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Changes the master password to \"new_pw\"."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Account Commands"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with accounts:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Add an account to a person: `addacc`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Adds an account to the target person. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `addacc INDEX USERNAME PASSWORD USER_TYPE` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Creates an account for the person with INDEX as specified by the last shown list. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "USERNAME and PASSWORD will be used for logging in. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "USER_TYPE can be of type \"Basic\", \"Tutor\" or \"Admin\"."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`addacc 1 JohnDoe1337 P455W0RD Admin` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Adds an account with the username of `JohnDoe1337` and password of `P455W0RD` to the first person in the list."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Login to an account: `login`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Login to the account with the specified username and password. +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `login USERNAME PASSWORD` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logs into the account with the given USERNAME and PASSWORD. +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Sets the current privilege level to that of the account."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `login 1 JohnDoe1337 P455W0RD Admin`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Login an account with the username of `JohnDoe1337` and password of `P455W0RD`, provided it exists."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Logout of an account: `logout`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logout of the current account. +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `logout` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logout from the currently signed in account. +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Also resets the privilege back to the level of a Basic User."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `logout`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logs out of the current account, provided there is privilege or account to relinquish."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Delete the account of a person: `delacc`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the target person. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `delacc INDEX`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the person with INDEX as specified by the last shown list. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`delacc 1` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the first person in the list, provided that he has an account."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d Grade Commands"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Below are the commands that deals with grades of students:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Adding an Assessment : `addassess`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Adds an assessment to the address book. +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `addassess ASSESSMENT_NAME`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Words in `UPPER_CASE` are the parameters. There is only one parameter for this command, which is the exam or assessment"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "name. Duplicate assessments cannot be added."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `addassess CG2271 Midterm` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `addassess Mathematics final class test`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Listing all assessments : `listassess`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Shows a list of all assessments in the address book, along with an index for each +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `listassess`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Deleting an assessment : `deleteassess`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the specified assessment from the assessment book, based on index. Irreversible. +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `deleteassess INDEX`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the assessment at the specified `INDEX`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "The index refers to the index number shown in the most recent assessments listing."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `listassess` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "`deleteassess 2` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the 2nd assessment in the address book."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updates the attendance of a person: `attendance`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the attendance of the target person. +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `attendance INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the attendance of the person with INDEX as specified by the last shown list according to the DATE. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "`attendance 1 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the attendance of the first person in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "`attendance 1 d/0 att/0` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the attendance of the first person in the list as abesnt for Today\u0027s date."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Replaces the attendance of a person: `replaceAtten`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Replaces the current attendance of the target person. +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `replaceAtten INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "Replaces the attendance of the person with INDEX as specified by the last shown list according to the DATE. +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "`replaceAtten 1 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the attendance of the first person in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View the attendance of a person: `viewAtten`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "View the attendance of the target person. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `viewAtten INDEX`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "View the attendance of the person with INDEX as specified by the last shown list. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "`viewAtten 1` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Views the attendance of the first person in the list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d Saving the data"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Address book, exam book and statistics book data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There is no need to save manually. In the project root folder, address book data are saved in a file called `addressbook.txt`,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "micklwl"
        },
        "content": "exam book data are saved in a file called `exams.txt` and statistics book data are saved in a file called `statistics.txt`."
      }
    ],
    "authorContributionMap": {
      "Meg1456": 40,
      "0WN463": 133,
      "micklwl": 121,
      "lucdx": 47,
      "-": 177
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `asciidoctor`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "CRASHES FOR SOME REASONS (Needs confirmation)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "0WN463": 99
    }
  },
  {
    "path": "src/seedu/addressbook/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Gui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.ui.Stoppable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *  Main entry point to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String VERSION \u003d \"ClassRepo - Version 1.1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Gui gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Logger logger \u003d Logger.getLogger(\"Foo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0WN463": 6,
      "micklwl": 7,
      "lucdx": 1,
      "-": 31
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AddAccountCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addacc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Adds an account as specified to the person identified by the \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: INDEX USERNAME PASSWORD PRIVILEGE\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"PRIVILEGE could be of type \\\"Basic\\\", \\\"Tutor\\\", \\\"Admin\\\".\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 username password basic\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS \u003d \"Added Account to: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USERNAME_TAKEN \u003d \"Username Taken!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PERSON_HAS_ACCOUNT \u003d \"Target person already has an existing account!!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddAccountCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //TODO: Fix potato code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddAccountCommand(int targetVisibleIndex, String username, String password, String privilege)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        toAdd \u003d new Account(username, password, privilege);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (addressBook.containsPersonWithUsername(toAdd.getUsername())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_USERNAME_TAKEN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (target.getAccount().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_PERSON_HAS_ACCOUNT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person editablePerson \u003d addressBook.findPerson(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            toAdd.setPrivilegePerson(editablePerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            editablePerson.setAccount(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, target.getName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 72,
      "micklwl": 9
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AddAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addassess\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds an assessment to the address book. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: EXAM_NAME ...\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" Math Midterm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assessment added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSESSMENT \u003d \"This assessment has already been entered!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final Assessment toAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssessmentCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssessmentCommand(String examName) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d new Assessment(examName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssessmentCommand(Assessment toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment getAssessment() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            addressBook.addAssessment(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniqueAssessmentsList.DuplicateAssessmentException dpe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_ASSESSMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 73
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddAssignmentStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Creates a new statistic in the statistics book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AddAssignmentStatistics extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstatistics\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds new statistic to the StatisticsBook. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Statistics can be marked private by prepending \u0027p\u0027 to the prefix of the field.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: SUBJECTNAME [p]en/EXAMNAME [p]ts/TOP SCORER [p]av/AVERAGE [p]te/TOTAL EXAM TAKERS \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"[p]ab/TOTAL NUMBER ABSENT [p]tp/ TOTAL PASS [p]mm/MAX MIN\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" Mathematics en/Midterm ts/John Doe av/21.5 te/86 ab/4 tp/83 mm/35 98\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New statistic added : %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STATISTIC \u003d \"This statistic already exists in the statistics book!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final AssignmentStatistics toAdd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssignmentStatistics (String subjectName, String examName, String topScorer, String averageScore,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                             String totalExamTakers, String numberAbsent, String totalPass, String maxMin,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                             boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d new AssignmentStatistics(subjectName, examName, topScorer, averageScore, totalExamTakers,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                numberAbsent, totalPass, maxMin, isPrivate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics getAssignmentStatistics() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsBook.addStatistic(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniqueStatisticsList.DuplicateStatisticsException dpe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_STATISTIC);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 59,
      "micklwl": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String name,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                      String phone, boolean isPhonePrivate,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                      String email, boolean isEmailPrivate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                      String address, boolean isAddressPrivate,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d new Person("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(phone, isPhonePrivate),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(email, isEmailPrivate),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(address, isAddressPrivate),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person toAdd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyPerson getPerson() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UniquePersonList.DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 20,
      "micklwl": 9,
      "-": 68
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Adds an exam in the exam book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AddExamCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addexam\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a exam to the exam book. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Exams can be marked private by prepending \u0027p\u0027 to the prefix of the exam name.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: [p]e/EXAM_NAME s/SUBJECT_NAME  d/EXAM_DATE st/EXAM_START_TIME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"et/EXAM_END_TIME \\n\\t\\tdt/EXAM_DETAILS\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \" e/Math Mid-Terms 2018S1 s/Mathematics d/01-12-2018 st/09:00 et/12:00 dt/At MPSH\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New%2$s exam added : %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXAM \u003d \"This exam already exists in the exam book! \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final Exam toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddExamCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddExamCommand(String examName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          String examEndTime, String examDetails,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          boolean isExamPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d new Exam(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, isExamPrivate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ReadOnlyExam getExam() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, toAdd.isPrivate() ? \" private\" : \"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.DuplicateExamException dpe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EXAM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 5,
      "micklwl": 70
    }
  },
  {
    "path": "src/seedu/addressbook/commands/AddFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.Fees;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Adds fees to a respective person"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class AddFeesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfees\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds fees to an existing person \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"in the address book. Fees are automatically marked as private.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Parameters: INDEX FEES DUEDATE\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3264.90 22-12-2018\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fees updated: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Fees fees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Use a constructor to update the fees values in AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public AddFeesCommand(int index, String fees, String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d new Fees(fees, date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public AddFeesCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            Person person \u003d addressBook.findPerson(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            person.setFees(fees);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, target.getAsTextShowFee()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if the command can potentially change the data to be stored"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucdx": 67
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 14,
      "micklwl": 2,
      "-": 19
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ClearExamsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Clears the exam book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ClearExamsCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearexams\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears exam book permanently.\\n\\t\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exam book has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 35
    }
  },
  {
    "path": "src/seedu/addressbook/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Enum used to indicate which category the command belongs to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public enum Category {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        PERSON,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        PRIVILEGE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        GENERAL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ACCOUNT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ASSESSMENT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        EXAM"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected static Privilege privilege;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected ExamBook examBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected List\u003c? extends Assessment\u003e relevantAssessments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected List\u003c? extends ReadOnlyExam\u003e relevantExams;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param targetIndex last visible listing index of the target person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of assessments."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessmentsDisplayed used to generate summary"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static String getMessageForAssessmentListShownSummary(List\u003c? extends Assessment\u003e assessmentsDisplayed) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return String.format(Messages.MESSAGE_ASSESSMENTS_LISTED_OVERVIEW, assessmentsDisplayed.size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of exams."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examsDisplayed used to generate summary"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return summary message for exams displayed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static String getMessageForExamListShownSummary(List\u003c? extends ReadOnlyExam\u003e examsDisplayed) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return String.format(Messages.MESSAGE_EXAMS_LISTED_OVERVIEW, examsDisplayed.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of fees."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @return summary message for fees displayed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static String getMessageForFeesListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setData(AddressBook addressBook, StatisticsBook statisticsBook, List\u003c? extends ReadOnlyPerson\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            relevantPersons, Privilege privilege) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d privilege;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setData(AddressBook addressBook, List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        List\u003c? extends ReadOnlyExam\u003e relevantExams, List\u003c? extends Assessment\u003e relevantAssessments,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        Privilege privilege, ExamBook exambook, StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setData(addressBook, statisticsBook, relevantPersons, privilege);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examBook \u003d exambook;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantExams \u003d relevantExams;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d relevantAssessments;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ReadOnlyPerson getTargetPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return relevantPersons.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Extracts the the target person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected Assessment getTargetAssessment() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return relevantAssessments.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetIndex;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    //TODO: Fix potato code"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.GENERAL;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Checks if the command can potentially change the data to be stored"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns the usage message to be used to construct HelpCommand\u0027s message"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract String getCommandUsageMessage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Extracts the the target exams in the last shown list from the given arguments."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ReadOnlyExam getTargetExam() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return relevantExams.get(getTargetIndex() - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 28,
      "0WN463": 33,
      "micklwl": 29,
      "lucdx": 10,
      "-": 69
    }
  },
  {
    "path": "src/seedu/addressbook/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String BLANK_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** The list of exams that was produced by the command */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final List\u003c? extends ReadOnlyExam\u003e relevantExams;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of exams that was produced by the command */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003c? extends Assessment\u003e relevantAssessments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of exams that was produced by the command */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003c? extends AssignmentStatistics\u003e relevantStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The output message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String outputConsoleMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The status message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String statusConsoleMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Enum to indicate on which console the message should be shown*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public enum MessageType { OUTPUT, STATUS }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(statusConsoleMessage, MessageType.STATUS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String message, MessageType messageType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (messageType.equals(MessageType.STATUS)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            statusConsoleMessage \u003d message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else if (messageType.equals(MessageType.OUTPUT)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            outputConsoleMessage \u003d message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantExams \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantStatistics \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantAssessments \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                         String outputConsoleMessage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.outputConsoleMessage \u003d outputConsoleMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantExams \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantStatistics \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        relevantAssessments \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage, List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantExams \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantStatistics \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage, List\u003c? extends Assessment\u003e relevantAssessments,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                         List\u003c? extends ReadOnlyPerson\u003e relevantPersons) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d relevantAssessments;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantExams \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantStatistics \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(List\u003c? extends ReadOnlyExam\u003e relevantExams, String statusConsoleMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantExams \u003d relevantExams;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantStatistics \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(List\u003c? extends ReadOnlyExam\u003e relevantExams, String statusConsoleMessage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                         List\u003c? extends AssignmentStatistics\u003e relevantStatistics) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantExams \u003d relevantExams;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantStatistics \u003d relevantStatistics;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(List\u003c? extends ReadOnlyExam\u003e relevantExams, String statusConsoleMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                         List\u003c? extends AssignmentStatistics\u003e relevantStatistics,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                         List\u003c? extends Assessment\u003e relevantAssessments) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantExams \u003d relevantExams;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantStatistics \u003d relevantStatistics;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d relevantAssessments;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns list of exams relevant to the command command result, if any."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e getRelevantExams() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Optional.ofNullable(relevantExams);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns list of statistics relevant to the command command result, if any."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Optional\u003cList\u003c? extends AssignmentStatistics\u003e\u003e getRelevantStatistics() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Optional.ofNullable(relevantStatistics);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns list of assessments relevant to the command command result, if any."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Optional\u003cList\u003c? extends Assessment\u003e\u003e getRelevantAssessments() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Optional.ofNullable(relevantAssessments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean hasStatusMessage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(statusConsoleMessage).isPresent();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns if this command results prints to output console*/"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean hasOutputMessage() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(outputConsoleMessage).isPresent()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantPersons().isPresent()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantExams().isPresent()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantAssessments().isPresent()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantStatistics().isPresent();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getOutputConsoleMessage() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(outputConsoleMessage).orElse(BLANK_MESSAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getStatusConsoleMessage() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(statusConsoleMessage).orElse(BLANK_MESSAGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 36,
      "0WN463": 64,
      "micklwl": 21,
      "lucdx": 1,
      "-": 30
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege.SelfTargetingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Deletes the account of a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteAccountCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delacc\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Deletes the account of the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS \u003d \"Deleted Account of: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PERSON_ACCOUNT_ABSENT \u003d \"Target person does not have an existing account!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETING_SELF \u003d \"You cannot delete the account your are logged-in as!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public DeleteAccountCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public DeleteAccountCommand() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person editablePerson \u003d addressBook.findPerson(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!target.getAccount().isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_PERSON_ACCOUNT_ABSENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.checkTargetIsSelf(editablePerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            editablePerson.removeAccount();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS, target.getName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (SelfTargetingException ste) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_DELETING_SELF);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 68,
      "micklwl": 2
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList.AssessmentNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes an assessment identified using its last displayed index from the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class DeleteAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteassess\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Deletes the assessment identified by the index number used in the last assessment listing.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DELETE_ASSESSMENT_SUCCESS \u003d \"Deleted Assessment: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public DeleteAssessmentCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public DeleteAssessmentCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Assessment target \u003d getTargetAssessment();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            addressBook.removeAssessment(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ASSESSMENT_SUCCESS, target));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (AssessmentNotFoundException nfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_ASSESSMENT_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 59
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Deletes a person identified using its last displayed index from the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Deletes the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETING_SELF \u003d \"You cannot delete the account your are logged-in as!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.checkTargetIsSelf(target);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.removePerson(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, target));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Privilege.SelfTargetingException ste) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_DELETING_SELF);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 24,
      "micklwl": 2,
      "-": 38
    }
  },
  {
    "path": "src/seedu/addressbook/commands/DeleteExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList.ExamNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Deletes a exam identified using its last displayed index from the exam book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class DeleteExamCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteexam\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Deletes the exam identified by the index number used in the last exams listing.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DELETE_EXAM_SUCCESS \u003d \"Deleted Exam: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public DeleteExamCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public DeleteExamCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ReadOnlyExam target \u003d getTargetExam();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.removeExam(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EXAM_SUCCESS, target));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 59
    }
  },
  {
    "path": "src/seedu/addressbook/commands/EditExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.commands.AddExamCommand.MESSAGE_DUPLICATE_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Edits an exam identified using its last displayed index in the exam book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class EditExamCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editexam\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Edits the exam identified by the index number used in the last exams listing. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Each exam field is optional but order must be followed.\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: INDEX [p/PRIVATE_STATUS] [e/EXAM_NAME] [s/SUBJECT_NAME] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"[d/EXAM_DATE] [st/EXAM_START_TIME]\\n\\t\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"[et/EXAM_END_TIME] [dt/EXAM_DETAILS]\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"PRIVATE_STATUS is denoted by \\\"y\\\" or \\\"n\\\".\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 e/Math Mid Terms 2018 d/07-06-2018\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EDIT_EXAM_SUCCESS \u003d \"Edited Exam: %1$s\\n to%3$s Exam: %2$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Map\u003cString, String\u003e changedDetails;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public EditExamCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public EditExamCommand(int targetVisibleIndex, Map\u003cString, String\u003e changedDetails) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.changedDetails \u003d changedDetails;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ReadOnlyExam target \u003d getTargetExam();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Exam toEdit \u003d new Exam(target, changedDetails);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.editExam(target, toEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_EXAM_SUCCESS, target,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    toEdit, toEdit.isPrivate() ? \" private\" : \"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.DuplicateExamException dee) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EXAM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 78
    }
  },
  {
    "path": "src/seedu/addressbook/commands/EditPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Changes the master password to a new one."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Checks that the old password given is correct."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class EditPasswordCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpw\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Changes master password to a new specified one.\\n\\t \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: OLD_PASSWORD NEW_PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" old_password sudo1234\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password changed to %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SAME_AS_OLDPASSWORD \u003d \"New password entered is the same as old password\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_NUMBER_ARGUMENTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"Wrong number of arguments, expected %d, actual %d\\n %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String newPassword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String oldPassword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public EditPasswordCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public EditPasswordCommand(String[] arguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (arguments.length !\u003d REQUIRED_ARGUMENTS) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    REQUIRED_ARGUMENTS, arguments.length, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.oldPassword \u003d arguments[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.newPassword \u003d arguments[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (oldPassword.equals(newPassword)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_SAME_AS_OLDPASSWORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.setMasterPassword(newPassword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, newPassword));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Logic.WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void validatePassword() throws Logic.WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!oldPassword.equals(addressBook.getMasterPassword())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new Logic.WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // TODO maybe make it so that it only saves the password portion of the XML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 67,
      "micklwl": 15
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ExamsListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamsListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"examslist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Displays all exams in the exam book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cReadOnlyExam\u003e allExams \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new CommandResult(allExams, getMessageForExamListShownSummary(allExams));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 33
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Exits the program.\\n\\t\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 6,
      "-": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.keywords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(personsFound), personsFound);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 22,
      "micklwl": 1,
      "-": 54
    }
  },
  {
    "path": "src/seedu/addressbook/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String attachedErrorMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public HelpCommand(String attachedErrorMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.attachedErrorMessage \u003d attachedErrorMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Creates the help manual to the user based on what commands they can access"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String makeHelpManual() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cCommand\u003e allowedCommands \u003d privilege.getAllowedCommands();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        HashSet\u003cCategory\u003e seenCategories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Command command: allowedCommands) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Category category \u003d command.getCategory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!seenCategories.contains(category)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                builder.append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        .append(category.toString())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        .append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                seenCategories.add(category);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            builder.append(command.getCommandUsageMessage())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    .append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Removes the extra newline character added at the start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        builder.deleteCharAt(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        attachedErrorMessage \u003d Optional.ofNullable(attachedErrorMessage).orElse(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(attachedErrorMessage, makeHelpManual());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 40,
      "micklwl": 2,
      "-": 19
    }
  },
  {
    "path": "src/seedu/addressbook/commands/IncorrectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"ERROR, IncorrectCommand is executed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 4,
      "-": 20
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Lists all assessments in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class ListAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listassess\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Displays all assessments in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e allAssessments \u003d addressBook.getAllAssessments().immutableListView();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new CommandResult(getMessageForAssessmentListShownSummary(allAssessments), allAssessments,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 34
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Displays all persons in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(allPersons), allPersons);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 10,
      "micklwl": 1,
      "-": 22
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ListFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class ListFeesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listfees\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    //no more by index but instead show the whole fees List"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    // TODO: sorted by date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    // TODO: their indexed numbers in list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Displays all names and fees in the address book.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_LISTFEE_PERSON_SUCCESS \u003d \"%1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public ListFeesCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public ListFeesCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final String result \u003d addressBook.loopFeesPerson(target);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_LISTFEE_PERSON_SUCCESS, result));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucdx": 56
    }
  },
  {
    "path": "src/seedu/addressbook/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Changes the master password to a new one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Checks that the old password given is correct."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Logs into your account. Raises current privilege to that of your account.\\n\\t \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: USERNAME PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" IamSudo sudo1234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged in as : %s (%s)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public LoginCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public LoginCommand(String[] arguments) throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (arguments.length !\u003d REQUIRED_ARGUMENTS) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    REQUIRED_ARGUMENTS, arguments.length, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.userName \u003d arguments[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.password \u003d arguments[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void validatePassword(Account account) throws Logic.WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!password.equals(account.getPassword())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new Logic.WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Person requestedPerson \u003d addressBook.findPersonByUsername(userName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Account requestedAccount \u003d requestedPerson.getAccount().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword(requestedAccount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.copyPrivilege(requestedAccount.getPrivilege());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String message \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    requestedPerson.getName().toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    requestedAccount.getPrivilege().getLevelAsString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Logic.WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnf) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 66,
      "micklwl": 17
    }
  },
  {
    "path": "src/seedu/addressbook/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Logs out of your account."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Logs out of your account, resetting privilege to Basic.\\n\\t \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (privilege.isBase()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 30,
      "micklwl": 6
    }
  },
  {
    "path": "src/seedu/addressbook/commands/RaisePrivilegeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Raises the current privilege to Admin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Checks if the password supplied is correct"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class RaisePrivilegeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"raise\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Raises your privilege level to Admin, requires master password.\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" default_password\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Privilege changed to %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public RaisePrivilegeCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public RaisePrivilegeCommand (String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void validatePassword() throws Logic.WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!password.equals(addressBook.getMasterPassword())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new Logic.WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, privilege.getLevelAsString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Logic.WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 49,
      "micklwl": 12
    }
  },
  {
    "path": "src/seedu/addressbook/commands/SetPermanentAdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Set/Unset the Privilege of Addressbook to be permanently Admin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class SetPermanentAdminCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"perm\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Sets/unset the Privilege of this application to be permanently Admin.\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: STATUS\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \" STATUS can be either \\\"true\\\" or \\\"false\\\" \\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" true\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Admin set to%s permanent\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final boolean isPerm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public SetPermanentAdminCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPerm \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public SetPermanentAdminCommand(boolean isPerm) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.isPerm \u003d isPerm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setPermAdmin(isPerm);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String modifierWord \u003d isPerm ? \"\" : \" not\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, modifierWord));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 54
    }
  },
  {
    "path": "src/seedu/addressbook/commands/UpdateAttendanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *  Marks the date where the student is present."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class UpdateAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Updates the attendance of a student. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: indexOfPerson d/dd-mm-yyyy att/attendance \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"1 d/29-09-2018 att/1 \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\tTo input today\u0027s date, input d/0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance updated for: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE \u003d \"Attendance has already been taken.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please use `replaceAtten` command to overwrite current attendance.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPresent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateAttendanceCommand(int targetIndex, String date, boolean isPresent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetIndex); // super is calling the constructor of the parent function"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateAttendanceCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Person person \u003d addressBook.findPerson(getTargetPerson());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isDuplicateDate \u003d person.updateAttendanceMethod(date, isPresent, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isDuplicateDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(String.format((MESSAGE_DUPLICATE_ATTENDANCE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS) + person.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 39,
      "micklwl": 1,
      "-": 27
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows all details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewall\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the person \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"identified by the index number in the last shown person listing.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing person: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewAllCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public ViewAllCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getAsTextShowAll()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 15,
      "micklwl": 1,
      "-": 38
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewAttendanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " *  Lists down the dates where the person\u0027s attendance has been taken."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewAtten\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Views the attendance of a student. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: indexOfStudent \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance for student, \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewAttendanceCommand(int targetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewAttendanceCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Person person \u003d addressBook.findPerson(getTargetPerson());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String output \u003d person.viewAttendanceMethod();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS) + person.getName() + \":\\n\" + output);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 34,
      "micklwl": 1,
      "-": 16
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are not shown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows the non-private details of the person \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"identified by the index number in the last shown person listing.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing person: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public ViewCommand() { }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getAsTextHidePrivate()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 13,
      "micklwl": 1,
      "-": 39
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Shows the fees owed with respect to the person identified in the last displayed index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * It\u0027s a private detail which is showed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class ViewFeesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewfees\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Shows the fees of the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_VIEWFEE_PERSON_SUCCESS \u003d \"Name: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public ViewFeesCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ViewFeesCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            addressBook.findPerson(target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEWFEE_PERSON_SUCCESS, target.getAsTextShowFee()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 7,
      "lucdx": 54
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewPrivilegeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewPrivilegeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewpri\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows your current privilege level.\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PRIVILEGE_FORMAT \u003d \"Your privilege is %1$s.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_LOGGED_IN \u003d \"You are logged in as: %s.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"You are not logged in.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cPerson\u003e optMyPerson \u003d privilege.getMyPerson();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (optMyPerson.isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            feedbackToUser \u003d String.format(MESSAGE_LOGGED_IN, optMyPerson.get().getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            feedbackToUser \u003d MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        feedbackToUser +\u003d String.format(MESSAGE_PRIVILEGE_FORMAT, privilege.getLevelAsString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(feedbackToUser, CommandResult.MessageType.OUTPUT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 42,
      "micklwl": 1
    }
  },
  {
    "path": "src/seedu/addressbook/commands/ViewSelfCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Shows all details of the logged in person."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewSelfCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewself\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of yourself.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing self: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cReadOnlyPerson\u003e myPerson \u003d privilege.getMyReadOnlyPerson();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return myPerson.map(a -\u003e new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, a.getAsTextShowAll()),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                CommandResult.MessageType.OUTPUT))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .orElse(new CommandResult(Messages.MESSAGE_NOT_LOGGED_IN));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 37,
      "micklwl": 2
    }
  },
  {
    "path": "src/seedu/addressbook/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_COMMAND_NOT_FOUND \u003d \"Command not recognised! Displaying commands available.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid.\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Run the list/find command to generate a list of person.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"java seedu.addressbook.Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Welcome to your ClassRepo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PRIVILEGE \u003d \"Insufficient Privilege.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Requires privilege level of %s, but current level is %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"Unable to process command as user is not logged in.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_NUMBER_ARGUMENTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"Wrong number of arguments, expected %d, actual %d\\n %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_FEES_LISTED_OVERVIEW \u003d \"%1$d fees listed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USING_EXAMS_FILE \u003d \"Using exams file : %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAMS_LISTED_OVERVIEW \u003d \"%1$d exams listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USING_STATISTICS_FILE \u003d \"Using statistics file : %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAM_NOT_IN_EXAMBOOK \u003d \"Exam could not be found in exam book!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_INVALID_EXAM_DISPLAYED_INDEX \u003d \"The exam index provided is invalid. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Run the examslist command to generate a list of exams.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_NO_ARGS_FOUND \u003d \"No arguments found!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Input date is invalid\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX \u003d \"The assessment index provided is invalid.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Run the list/find command to generate a list of assessments.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENT_NOT_IN_ADDRESSBOOK \u003d \"Assessment could not be found in address book!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENTS_LISTED_OVERVIEW \u003d \"%1$d assessments listed!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 5,
      "0WN463": 8,
      "micklwl": 9,
      "lucdx": 2,
      "-": 13
    }
  },
  {
    "path": "src/seedu/addressbook/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList.AssessmentNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList.DuplicateAssessmentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String DEFAULT_MASTER_PASSWORD \u003d \"default_pw\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final UniqueAssessmentsList allAssessments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String masterPassword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isPermAdmin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments \u003d new UniqueAssessmentsList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        masterPassword \u003d DEFAULT_MASTER_PASSWORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param masterPassword contains the master password to raise Privilege to Admin level"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddressBook(UniquePersonList persons, UniqueAssessmentsList assessments, String masterPassword) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments \u003d new UniqueAssessmentsList(assessments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.masterPassword \u003d Optional.ofNullable(masterPassword)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .orElse(DEFAULT_MASTER_PASSWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setMasterPassword(String masterPassword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.masterPassword \u003d masterPassword;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds an assessment to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if an equivalent person already exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessment(Assessment toAdd) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent assessment from the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such Assessment could be found."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeAssessment(Assessment toRemove) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments.remove(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPersonByUsername(String username) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.findPersonByUsername(username);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Boolean containsPersonWithUsername(String username) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.containsPersonWithUsername(username);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Finds and returns the given person in the AddressBook"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPerson(ReadOnlyPerson person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.find(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Loops throough the list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String loopFeesPerson(ReadOnlyPerson person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return allPersons.loopFees(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Defensively copied UniqueAssessmentList of all assessments in the address book at the time of the call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList getAllAssessments() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new UniqueAssessmentsList(allAssessments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getMasterPassword() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return masterPassword;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isPermAdmin() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return isPermAdmin;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPermAdmin(boolean permAdmin) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPermAdmin \u003d permAdmin;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 35,
      "0WN463": 44,
      "micklwl": 1,
      "lucdx": 7,
      "-": 82
    }
  },
  {
    "path": "src/seedu/addressbook/data/ExamBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList.DuplicateExamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList.ExamNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents the entire exams book. Contains the data of the exams book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final UniqueExamList examList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates an empty exam book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList \u003d new UniqueExamList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs an exam book with the given data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examList external changes to this will not affect this exam book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook(UniqueExamList examList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examList \u003d new UniqueExamList(examList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static ExamBook empty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds a exam to the exam book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws DuplicateExamException if an exam with equivalent data already exists."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExam(Exam toAdd) throws DuplicateExamException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if an equivalent exam exists in the exam book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean containsExam(ReadOnlyExam key) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList.contains(key);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the equivalent exam from the exam book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such Exam could be found."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeExam(ReadOnlyExam toRemove) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.remove(toRemove);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams from the exam book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Defensively copied UniqueExamList of all exam in the exam book at the time of the call."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList getAllExam() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new UniqueExamList(examList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Edits a exam in the ExamBook"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such Exam could be found."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExam(ReadOnlyExam oldExam, Exam examToChange)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws ExamNotFoundException, DuplicateExamException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examList.contains(oldExam)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examList.add(examToChange);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examList.remove(oldExam);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof ExamBook // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.examList.equals(((ExamBook) other).examList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 102
    }
  },
  {
    "path": "src/seedu/addressbook/data/StatisticsBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueStatisticsList.DuplicateStatisticsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueStatisticsList.StatisticsNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents the entire statistics book. Contains the data of the statistics book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class StatisticsBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final UniqueStatisticsList statisticsList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Creates an empty statistics book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList \u003d new UniqueStatisticsList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a statistics book with the given data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param statisticsList external changes to this will not affect this statistic book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook(UniqueStatisticsList statisticsList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsList \u003d new UniqueStatisticsList(statisticsList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static StatisticsBook empty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds a statistic to the statistics book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateStatisticsException if an equivalent statistic already exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addStatistic(AssignmentStatistics toAdd) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if an equivalent statistic exists in the statistics book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean containsStatistic(AssignmentStatistics key) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.contains(key);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent statistic from the statistic book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StatisticsNotFoundException if no such statistic could be found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeStatistic(AssignmentStatistics toRemove) throws StatisticsNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.remove(toRemove);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Defensively copied UniqueStatisticsList of all statistics in the statistics book at the time of the call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList getAllStatistics() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new UniqueStatisticsList(statisticsList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof StatisticsBook // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.statisticsList.equals(((StatisticsBook) other).statisticsList));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all statistics from the statistics book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 86
    }
  },
  {
    "path": "src/seedu/addressbook/data/account/Account.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.data.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Printable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents a Account in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidPrivilegeName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Account implements Printable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PRIVILEGE_CONSTRAINTS \u003d \"Desired privilege level of %s does not exists\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final Privilege privilege;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Account(String username, String password, Privilege privilege) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d username.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.username \u003d trimmedName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.password \u003d trimmedPassword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d privilege;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Account(String username, String password, String privilege) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(username, password, Privilege.getPrivilegeFromString(privilege));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidPrivilegeName(privilege)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String message \u003d String.format(MESSAGE_PRIVILEGE_CONSTRAINTS, privilege);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege getPrivilege() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return privilege;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPrivilegePerson(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns true if a given string is a valid Privilege name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static boolean isValidPrivilegeName(String privilege) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (Privilege.getPrivilegeFromString(privilege) !\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || (other instanceof Account // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \u0026\u0026 this.username.equals(((Account) other).username)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return this.privilege.getLevelAsString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 68,
      "micklwl": 2
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Address implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123, some street\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Person address cannot contain $\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"^((?!\\\\$).)*$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Address\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 8,
      "micklwl": 4,
      "-": 53
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Assessment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents an assessment of the student"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"CG2271 Midterms\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cGrades\u003e grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given results."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if given results string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment(String examName) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.grade \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cGrades\u003e getGrade() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new ArrayList\u003c\u003e(grade);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setGrade(Grades grade) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.grade.add(grade);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(examName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPrintableAssessmentString(boolean showPrivate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Formats the assessment as text to show all."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getAsTextShowAll() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String stringChain \u003d getPrintableAssessmentString(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof Assessment // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.examName.equals(((Assessment) other).examName)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 71
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/AssignmentStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents a exam in the exam book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AssignmentStatistics implements Printable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String SUBJECT_NAME_EXAMPLE \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"Midterms\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOPSCORER_EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String AVERAGESCORE_EXAMPLE \u003d \"21.5\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTALEXAMTAKERS_EXAMPLE \u003d \"84\"; //Number of students who attended test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String NUMBERABSENT_EXAMPLE \u003d \"4\"; //Number of students who were absent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTALPASS_EXAMPLE \u003d \"82\"; //Number os students who passed the test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MAXMIN_EXAMAPLE \u003d \"27 10\"; //maximum score and minimum score"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String AVERAGE_SCORE_CONSTRAINTS \u003d \"May include up to decimal places only\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTAL_EXAM_TAKERS_CONSTRAINTS \u003d \"Number of total exam takers must only contain whole \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "           + \"numbers\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String NUMBER_ABSENT_CONSTRAINTS \u003d \"Number of absentees must only contain whole numbers\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTAL_PASS_CONSTRAINTS \u003d \"Number of students who passed must only contain whole numbers\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MAX_MIN_CONSTRAINTS \u003d \"Max-Min value can contain two whole numbers separated by a space\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String AVERAGE_SCORE_VALIDATION_REGEX \u003d \"\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTAL_EXAM_TAKERS_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String NUMBER_ABSENT_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String TOTAL_PASS_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MAX_MIN_VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String topScorer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String averageScore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String totalExamTakers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String numberAbsent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String totalPass;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String maxMin;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given statistics."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if given results string is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics(String subjectName, String examName, String topScorer, String averageScore,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                String totalExamTakers, String numberAbsent, String totalPass, String maxMin,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.subjectName \u003d subjectName.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.topScorer \u003d topScorer.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedAverageScore \u003d averageScore.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidAverageScore(trimmedAverageScore)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(AVERAGE_SCORE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.averageScore \u003d trimmedAverageScore;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedTotalExamTakers \u003d totalExamTakers.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidTotalExamTakers(trimmedTotalExamTakers)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(TOTAL_EXAM_TAKERS_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.totalExamTakers \u003d trimmedTotalExamTakers;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedNumberAbsent \u003d numberAbsent.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidNumberAbsent(trimmedNumberAbsent)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(NUMBER_ABSENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.numberAbsent \u003d trimmedNumberAbsent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedTotalPass \u003d totalPass.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidTotalPass(trimmedTotalPass)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(TOTAL_PASS_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.totalPass \u003d trimmedTotalPass;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedMaxMin \u003d maxMin.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidMaxMin(trimmedMaxMin)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(MAX_MIN_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.maxMin \u003d trimmedMaxMin;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid average score."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidAverageScore(String value) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(AVERAGE_SCORE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid number for the total exam takers."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidTotalExamTakers(String value) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(TOTAL_EXAM_TAKERS_REGEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid number of absentees."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidNumberAbsent(String value) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(NUMBER_ABSENT_REGEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid number of total students who passed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidTotalPass(String value) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(TOTAL_PASS_REGEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid entry of max-min score."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidMaxMin(String value) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(MAX_MIN_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return subjectName + \" - \" + examName + \" Top Scorer: \" + topScorer"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \" Average Score: \" + averageScore + \" Total Exam Takers: \" + totalExamTakers"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \" Total Absentees: \" + numberAbsent + \" Total Pass: \" + totalPass"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \" Max-Min Score: \" + maxMin;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof AssignmentStatistics // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.examName.equals(((AssignmentStatistics) other).examName)); // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(averageScore, totalExamTakers, numberAbsent, totalPass, maxMin);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (isPrivate()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return \"{private Results: \" + subjectName + \" \" + examName + \" \" + topScorer + \" \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        + averageScore + \" \" + totalExamTakers + \" \" + numberAbsent + totalPass + \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        + maxMin + \" \" + \"}\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \"Exam: \" + subjectName + \" \" + examName + \" \" + topScorer + \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + averageScore + \" \" + totalExamTakers + \" \" + numberAbsent + totalPass + \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + maxMin;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return subjectName;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTopScorer() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return topScorer;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getAverageScore() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return averageScore;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTotalExamTakers() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return totalExamTakers;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getNumberAbsent() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return numberAbsent;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTotalPass() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return totalPass;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getMaxMin() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return maxMin;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 200
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Attendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s attendance in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Attendance implements Printable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Represents a map that links dates(kay) to attendance(value)*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Map\u003cString, Boolean\u003e attendanceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Method to add attendance */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean addAttendance(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputDate \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (\"0\".equals(date)) { //PMD 3.3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            inputDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // If there is a duplicate date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (attendanceMap.containsKey(inputDate) \u0026\u0026 overWrite) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            attendanceMap.put(inputDate, isPresent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (attendanceMap.containsKey(inputDate) \u0026\u0026 !overWrite) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            attendanceMap.put(inputDate, isPresent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Method to reiterate person\u0027s attendance */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String viewAttendance() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Map.Entry entry : attendanceMap.entrySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            output +\u003d entry.getKey() + \" -\u003e \" + entry.getValue() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (\"\".equals(output)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            output \u003d \"NIL\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"{}\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.attendanceMap.equals(((Attendance) other).attendanceMap)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO store the attendance somewhere (perhaps attendance book?)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0WN463": 30,
      "micklwl": 3,
      "-": 28
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Email implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"valid@e.mail\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Email\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.value \u003d trimmedEmail;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a given string is a valid person email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 9,
      "micklwl": 4,
      "-": 54
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Exam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents a exam in the exam book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class Exam implements ReadOnlyExam {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"Midterms\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String SUBJECT_NAME_EXAMPLE \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_DATE_EXAMPLE \u003d \"01-12-2018\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_START_TIME_EXAMPLE \u003d \"09:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_END_TIME_EXAMPLE \u003d \"10:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_DETAILS_EXAMPLE \u003d \"Held in MPSH\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Exam date should be in the format DD-MM-YYYY and valid.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Exam time should be in 24 hours format HH:MM and valid.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_TIME_INTERVAL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Exam time interval is inaccurate.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examStartTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examEndTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDetails;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Validates a given exam."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if given exam date or time string is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if time interval is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam(String examName, String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String examEndTime, String examDetails, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.subjectName \u003d subjectName.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedDate \u003d examDate.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDate \u003d trimmedDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedStartTime \u003d examStartTime.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedEndTime \u003d examEndTime.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidTime(trimmedStartTime) || !isValidTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (!isValidTimeInterval(trimmedStartTime, trimmedEndTime)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_TIME_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examStartTime \u003d trimmedStartTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examEndTime \u003d trimmedEndTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDetails \u003d examDetails.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Create a new exam from a given exam and details to be changed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if new exam date or time string is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if new time interval is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam(ReadOnlyExam toEdit, Map\u003cString, String\u003e changedDetails) throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examName \u003d toEdit.getExamName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.subjectName \u003d toEdit.getSubjectName();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDate \u003d toEdit.getExamDate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examStartTime \u003d toEdit.getExamStartTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examEndTime \u003d toEdit.getExamEndTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDetails \u003d toEdit.getExamDetails();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.isPrivate \u003d toEdit.isPrivate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e entry : changedDetails.entrySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String attribute \u003d entry.getKey();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String newValue \u003d entry.getValue();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (\"examName\".equals(attribute)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.examName \u003d newValue.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"subjectName\".equals(attribute)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.subjectName \u003d newValue.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"examDate\".equals(attribute)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (!isValidDate(newValue.trim())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.examDate \u003d newValue.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"examStartTime\".equals(attribute)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (!isValidTime(newValue.trim())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.examStartTime \u003d newValue.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"examEndTime\".equals(attribute)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (!isValidTime(newValue.trim())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.examEndTime \u003d newValue.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"examDetails\".equals(attribute)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.examDetails \u003d newValue.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (\"isPrivate\".equals(attribute)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                this.isPrivate \u003d \"y\".equals(newValue.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidTimeInterval(this.examStartTime, this.examEndTime)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidDate(String value) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean valid;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String format \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String parsedDate \u003d LocalDate.parse(value, formatter).format(formatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            valid \u003d value.equals(parsedDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            valid \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given string is a valid time."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidTime(String value) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return value.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given time interval is valid"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidTimeInterval(String examStart, String examEnd) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean valid;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String format \u003d \"HH:mm\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(examStart, formatter);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(examEnd, formatter);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            valid \u003d startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            valid \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPrintableExamString(boolean showPrivate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (showPrivate \u0026\u0026 isPrivate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return \"private Exam: \" + examName + \" \" + subjectName + \" \" + examDate + \" \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + examStartTime + \" \" + examEndTime + \" \" + examDetails;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else if (isPrivate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return \"Exam: \" + examName + \" \" + subjectName + \" \" + examDate + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + examStartTime + \" \" + examEndTime + \" \" + examDetails;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examName + \" Subject: \" + subjectName + \" Date: \" + examDate"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" Start Time: \" + examStartTime + \" End Time: \" + examEndTime + \" Details: \" + examDetails;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof ReadOnlyExam // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyExam) other)); // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Objects.hash(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, isPrivate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return subjectName;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamDate() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamStartTime() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examStartTime;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamEndTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examEndTime;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamDetails() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examDetails;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if an exam clashes with another exam\u0027s time."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isOverlappingTime(LocalTime start1, LocalTime end1, LocalTime start2, LocalTime end2) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return start1.isBefore(end2) \u0026\u0026 start2.isBefore(end1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //* Checks if the exam overlaps with another exams"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //public boolean isOverlapping(Exam exam2) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //LocalTime start1 \u003d toLocalTime(\"HH:mm\", examStartTime);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //LocalTime start2 \u003d toLocalTime(\"HH:mm\", exam2.getExamStartTime());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //LocalTime end1 \u003d toLocalTime(\"HH:mm\", examEndTime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //LocalTime end2 \u003d toLocalTime(\"HH:mm\", exam2.getExamEndTime());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //return isOverlappingTime(start1, end1, start2, end2);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 246
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Fees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Represents a Person\u0027s fees due in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class Fees implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String EXAMPLE \u003d \"$3560.98\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_FEES_CONSTRAINTS \u003d \"Person\u0027s fees should have 2 decimal places.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Due date for fees should be in DD-MM-YYYY.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String FEES_VALIDATION_REGEX \u003d \"[0-9]+([,.][0-9]{1,2})?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public final String duedate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Validates given AdaptedFees."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @throws IllegalValueException if given fees string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees(String fees, String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!isValidFees(fees)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            throw new IllegalValueException(MESSAGE_FEES_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!isValidDate(date)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.value \u003d fees;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.duedate \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Initialises all fees of everyone to 0."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.value \u003d \"0.00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.duedate \u003d \"00-00-0000\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if a given string is a valid person fee."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static boolean isValidFees(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return test.matches(FEES_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (isPrivate()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return \"{private Fees: \" + value + \" / \" + duedate + \"} \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return \"Fees: \" + value + \" \" + duedate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucdx": 78
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Grades.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents student\u0027s grade.s"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class Grades implements Printable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String GRADE_EXAMPLE \u003d \"27\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String GRADE_CONSTRAINTS \u003d \"May include up to decimal places only\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String GRADE_VALIDATION_REGEX \u003d \"\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    //private Person person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given results."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if given results string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Grades(String grade) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String trimmedMarksScored \u003d grade.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidMarksScored(trimmedMarksScored)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Assign grade with score"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.grade \u003d trimmedMarksScored;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given string is a valid marks scored."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidMarksScored(String value) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value.matches(GRADE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \" Grade: \" + grade;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof Grades // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.grade.equals(((Grades) other).grade)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(grade);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \"Grade: \" + grade;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getMarksScored() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 68
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Name implements Printable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.fullName \u003d trimmedName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 10,
      "-": 58
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Fees fees;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cAssessment\u003e assessments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d new Fees();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Account account) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Construct using ReadOnlyPerson"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Only update the fees when called in AddFeesCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setAssessments(Assessment assessment) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.assessments.add(assessment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Only update the fees when called in AddFeesCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param fees"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void setFees(Fees fees) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d fees;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setAccount(Account account) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeAccount() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.account \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e getAssessments() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new ArrayList\u003c\u003e(assessments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees getFees() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return fees;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cAccount\u003e getAccount() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(account);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Has a boolean to check if the date is a duplicate **/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean updateAttendanceMethod(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean duplicateDate \u003d attendance.addAttendance(date, isPresent, overWrite);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return duplicateDate;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public String viewAttendanceMethod() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return attendance.viewAttendance();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Replaces the attendance if there is already a duplicate **/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean replaceAttendanceMethod(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean noDuplicateDate \u003d !attendance.addAttendance(date, isPresent, overWrite);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return noDuplicateDate;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 15,
      "0WN463": 14,
      "micklwl": 15,
      "lucdx": 15,
      "-": 103
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Phone implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123456789\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Person phone numbers should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Phone\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.value \u003d trimmedPhone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a given string is a valid person phone number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 9,
      "micklwl": 4,
      "-": 53
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Printable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * A interface for Printable objects in the Addressbook."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public interface Printable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String getPrintableString(boolean showPrivate);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 7
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/ReadOnlyExam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * A read-only immutable interface for a Person in the exambook."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public interface ReadOnlyExam {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getSubjectName();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamName();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamDate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamStartTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamEndTime();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamDetails();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    boolean isPrivate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getPrintableExamString(boolean showPrivate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Formats the exam as text to show all."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String stringChain \u003d getPrintableExamString(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyExam other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getSubjectName().equals(this.getSubjectName()) // state checks here onwards"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamName().equals(this.getExamName())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDate().equals(this.getExamDate())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamStartTime().equals(this.getExamStartTime())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamEndTime().equals(this.getExamEndTime())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDetails().equals(this.getExamDetails())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 (other.isPrivate() \u003d\u003d this.isPrivate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 43
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    Optional\u003cAccount\u003e getAccount();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    Fees getFees();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * changes on the returned list will not affect the person\u0027s internal tags."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \u0026\u0026 other.getAccount().equals(this.getAccount()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getPhone(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getEmail(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getAddress(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getFees());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        builder.append(stringChain)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        getAccount().ifPresent(a -\u003e builder.append(\" User Type:\").append(a.getPrintableString(true)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getPhone(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getEmail(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getAddress(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getFees());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        builder.append(stringChain)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        getAccount().ifPresent(a -\u003e builder.append(\" User Type:\").append(a.getPrintableString(true)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Formats the person as text, showing name and fees."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    default String getAsTextShowFee() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getFees());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 23,
      "micklwl": 1,
      "lucdx": 15,
      "-": 58
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents a Person\u0027s subject in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class Subject implements Printable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectDetails;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //private Set\u003cExam\u003e subjectExams;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if a given string is a valid subject name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isPrivate()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return \"{private Subject: \" + subjectName + \" \" + subjectDetails + \"}\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return \"Subject: \" + subjectName + \" \" + subjectDetails;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 44
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniqueAssessmentsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * A list of assessments. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class UniqueAssessmentsList implements Iterable\u003cAssessment\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003cAssessment\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class DuplicateAssessmentException extends DuplicateDataException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        protected DuplicateAssessmentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(\"Operation would result in duplicate assessments\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation targeting a specified assessment in the list would fail because"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * there is no such matching assessment in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class AssessmentNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(Assessment... assessments) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssessment\u003e initialTags \u003d Arrays.asList(assessments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessments a collection of assessments"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(Collection\u003cAssessment\u003e assessments) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(assessments)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(assessments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(UniqueAssessmentsList source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e immutableListView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if the list contains an equivalent assessment as the given argument."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean contains(Assessment toCheck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds an assessment to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void add(Assessment toAdd) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Finds the equivalent person from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment find(Assessment assessment) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment p: internalList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (p.equals(assessment)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void remove(Assessment toRemove) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final boolean assessmentFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!assessmentFoundAndDeleted) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Finds and returns the Person who has the given username in its Account"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param examName"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return The Person who matches the username. This should be guaranteed to be unique."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment findAssessmentByName(String examName) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment p: internalList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (p.getExamName().equals(examName)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**Checks if UniquePersonList holds a Person who has given username in its Account"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param examName"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return true if such a Person exists. False otherwise"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Boolean containsAssessmentWithExamName(String examName) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            findAssessmentByName(examName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (AssessmentNotFoundException pne) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Iterator\u003cAssessment\u003e iterator() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof UniqueAssessmentsList // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                (UniqueAssessmentsList) other).internalList));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 179
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniqueExamList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * A list of exams. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * @see Exam#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class UniqueExamList implements Iterable\u003cExam\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final List\u003cExam\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class DuplicateExamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        protected DuplicateExamException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            super(\"Operation would result in duplicate exams\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //* Signals that an operation would have violated the \u0027no overlapping timings\u0027 property of the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //public static class OverlappingTimeException extends Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //protected OverlappingTimeException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //super(\"Operation would result in overlapping exam timings\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that an operation targeting a specified exam in the list would fail because"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * there is no such matching exam in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class ExamNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs empty exam list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList() {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a exam list with the given exams."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList(Exam... exams) throws DuplicateExamException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cExam\u003e initialTags \u003d Arrays.asList(exams);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new DuplicateExamException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exams a collection of exams"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws DuplicateExamException if the {@code exams} contains duplicate exams"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList(Collection\u003cExam\u003e exams) throws DuplicateExamException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!Utils.elementsAreUnique(exams)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new DuplicateExamException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.addAll(exams);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList(UniqueExamList source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the list contains an equivalent exam as the given argument."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean contains(ReadOnlyExam toCheck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds a exam to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws DuplicateExamException if the exam to add is a duplicate of an existing exam in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void add(Exam toAdd) throws DuplicateExamException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new DuplicateExamException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //for (Exam e: internalList){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //      if (toAdd.isOverlapping(e)){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //        throw new OverlappingTimeException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the equivalent exam from the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void remove(ReadOnlyExam toRemove) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final boolean examFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!examFoundAndDeleted) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyExam}s."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cReadOnlyExam\u003e immutableListView() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams in list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Finds the equivalent exam from the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such exam could be found in the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam find(ReadOnlyExam exam) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //TODO: Fix potato"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam p: internalList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (p.equals(exam)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Sorts all exams in list by their subject names."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.sort((Exam name1, Exam name2)-\u003ename1.getSubjectName().compareToIgnoreCase(name2.getSubjectName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Iterator\u003cExam\u003e iterator() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof UniqueExamList // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                (UniqueExamList) other).internalList));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 174
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation targeting a specified person in the list would fail because"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a person list with the given persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Person... persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e initialTags \u003d Arrays.asList(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Finds the equivalent person from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person find(ReadOnlyPerson person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //TODO: Fix potato"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.equals(person)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * loops through list and appends data to string person."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String loopFees(ReadOnlyPerson person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        //TODO: Fix potato"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    p.getName(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    p.getFees());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            builder.append(stringChain);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Finds and returns the Person who has the given username in its Account"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param username to be matched to a person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return The Person who matches the username. This should be guaranteed to be unique."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException Person cannot be found with the given username in internalList"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPersonByUsername(String username) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //TODO: Fix potato"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.getAccount().isPresent() \u0026\u0026 p.getAccount().get().getUsername().equals(username)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**Checks if UniquePersonList holds a Person who has given username in its Account"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param username of the person to be associated with."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return true if such a Person exists. False otherwise"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Boolean containsPersonWithUsername(String username) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            findPersonByUsername(username);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pne) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                (UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 50,
      "micklwl": 3,
      "lucdx": 20,
      "-": 127
    }
  },
  {
    "path": "src/seedu/addressbook/data/person/UniqueStatisticsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * A list of statistics per assignment. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see AssignmentStatistics#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class UniqueStatisticsList implements Iterable\u003cAssignmentStatistics\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003cAssignmentStatistics\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class DuplicateStatisticsException extends DuplicateDataException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        protected DuplicateStatisticsException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(\"Operation would result in duplicate assignment statistics\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation targeting a specified result in the list would fail because"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * there is no such matching result in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class StatisticsNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs empty result list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a result list with the given statistics."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(AssignmentStatistics... statistics) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssignmentStatistics\u003e initialTags \u003d Arrays.asList(statistics);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param statistics a collection of statistics"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateStatisticsException if the {@code statistics} contains duplicate statistics"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(Collection\u003cAssignmentStatistics\u003e statistics) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(statistics)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(statistics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(UniqueStatisticsList source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if the list contains an equivalent statistics as the given argument."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean contains(AssignmentStatistics toCheck) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds a result to the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateStatisticsException if the person to add is a duplicate of an existing stastic in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void add(AssignmentStatistics toAdd) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent statistic from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StatisticsNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void remove(AssignmentStatistics toRemove) throws StatisticsNotFoundException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final boolean statisticsFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!statisticsFoundAndDeleted) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new StatisticsNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all statistics in list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Iterator\u003cAssignmentStatistics\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof UniqueStatisticsList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                (UniqueStatisticsList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 125,
      "micklwl": 2
    }
  },
  {
    "path": "src/seedu/addressbook/data/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given tag name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given tag name string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.tagName \u003d trimmedName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 3,
      "-": 49
    }
  },
  {
    "path": "src/seedu/addressbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INSUFFICIENT_PRIVILEGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main Logic of the AddressBook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook examBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The list of person shown to the user most recently.  */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e lastShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of person shown to the user most recently.  */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003c? extends Assessment\u003e lastShownAssessmentList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** The list of exam shown to the user most recently.  */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003c? extends ReadOnlyExam\u003e lastShownExamList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that an operation requiring password authentication failed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class WrongPasswordEnteredException extends Exception {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(storage.load());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setExamBook(storage.loadExam());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setStatisticsBook(storage.loadStatistics());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        initPrivilege();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    Logic(Storage storageFile, AddressBook addressBook, ExamBook examBook, StatisticsBook statisticsBook, Privilege"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            privilege) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this(storageFile, addressBook, examBook, statisticsBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setPrivilege(privilege);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    Logic(Storage storageFile, AddressBook addressBook, ExamBook examBook, StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setExamBook(examBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setStatisticsBook(statisticsBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Sets privilege as Admin if addressBook isPermAdmin, else set to Basic*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void initPrivilege() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d new Privilege();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (addressBook.isPermAdmin()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setStorage(Storage storage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setAddressBook(AddressBook addressBook) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPrivilege(Privilege privilege) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d privilege;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setExamBook(ExamBook examBook) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examBook \u003d examBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setStatisticsBook(StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageFile.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageFile.InvalidInitialisationException if the JAXB set up has error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private StorageFile initializeStorage()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws StorageFile.InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            StorageFile.InvalidInitialisationException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getStorageFilePathExam() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return storage.getPathExam();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getStorageFilePathStatistics() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return storage.getPathStatistics();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable view of the current last shown list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastShownList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(lastShownList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownList \u003d newList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable view of the current last shown exams list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e getLastShownAssessmentList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Collections.unmodifiableList(lastShownAssessmentList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected void setLastShownAssessmentList (List\u003c? extends Assessment\u003e newList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        lastShownAssessmentList \u003d newList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Unmodifiable view of the current last shown exams list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cReadOnlyExam\u003e getLastShownExamList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Collections.unmodifiableList(lastShownExamList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected void setLastShownExamList(List\u003c? extends ReadOnlyExam\u003e newList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        lastShownExamList \u003d newList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command, updates storage if the command can potentially mutate data,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * and returns the result."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final CommandResult result;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        command.setData(addressBook, lastShownList, lastShownExamList, lastShownAssessmentList, privilege, examBook,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                statisticsBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Checking instanceof IncorrectCommand to prevent overwriting the message of an incorrect command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (privilege.isAllowedCommand(command) || (command instanceof IncorrectCommand)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            result \u003d command.execute();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            result \u003d new IncorrectCommand (String.format(MESSAGE_INSUFFICIENT_PRIVILEGE,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                            privilege.getRequiredPrivilegeAsString(command),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                            privilege.getLevelAsString())).execute();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (command.isMutating()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(addressBook);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            storage.saveExam(examBook);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            storage.saveStatistics(statisticsBook);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Updates the {@link #lastShownList} if the result contains a list of Persons."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *  Updates the {@link #lastShownExamList} if the result contains a list of Exams."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e personList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        personList.ifPresent(a -\u003e lastShownList \u003d a);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e examList \u003d result.getRelevantExams();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Optional\u003cList\u003c? extends Assessment\u003e\u003e assessmentList \u003d result.getRelevantAssessments();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.isPresent()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            lastShownList \u003d personList.get();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else if (examList.isPresent()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            lastShownExamList \u003d examList.get();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } else if (assessmentList.isPresent()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            lastShownAssessmentList \u003d assessmentList.get();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 37,
      "0WN463": 48,
      "micklwl": 38,
      "-": 88
    }
  },
  {
    "path": "src/seedu/addressbook/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NO_ARGS_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.AddAssessmentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.AddAssignmentStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.AddExamCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.commands.AddFeesCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ClearExamsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.EditExamCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ExamsListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.ListAssessmentCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.commands.ListFeesCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LoginCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LogoutCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.commands.ViewFeesCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewSelfCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern BOOLEAN_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cboolean\u003e.+)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern SINGLE_KEYWORD_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+\\\\s*)\"); // one keyword separated by whitespace"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final Pattern EXAM_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Pattern.compile(\"(?\u003cisExamPrivate\u003ep?)e/(?\u003cexamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" s/(?\u003csubjectName\u003e[^/]+)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" d/(?\u003cexamDate\u003e[^/]+)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" st/(?\u003cexamStartTime\u003e[^/]+)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" et/(?\u003cexamEndTime\u003e[^/]+)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" dt/(?\u003cexamDetails\u003e[^/]+)\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final Pattern FEES_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e[^/]+)\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    + \" (?\u003cfees\u003e[^/]+)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    + \" (?\u003cdate\u003e[^/]+)\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final Pattern STATISTICS_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Pattern.compile(\"(?\u003csubjectName\u003e[^/]+)\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \" (?\u003cisExamPrivate\u003ep?)e/(?\u003cexamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" ts/(?\u003ctopScorer\u003e[^/]+)\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" av/(?\u003caverageScore\u003e[^/]+)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" te/(?\u003ctotalExamTakers\u003e[^/]+)\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" ab/(?\u003cnumberAbsent\u003e[^/]+)\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" tp/(?\u003ctotalPass\u003e[^/]+)\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    + \" mm/(?\u003cmaxMin\u003e[^/]+)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern ATTENDANCE_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" d/(?\u003cdate\u003e[^/]+)\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" att/(?\u003cisPresent\u003e[0-1])\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final Pattern EDIT_EXAM_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e[^/]+)\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(p/(?\u003cisExamPrivate\u003e[^/]+))*\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(e/(?\u003cexamName\u003e[^/]+))*\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(s/(?\u003csubjectName\u003e[^/]+))*\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(d/(?\u003cexamDate\u003e[^/]+))*\" // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(st/(?\u003cexamStartTime\u003e[^/]+))*\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(et/(?\u003cexamEndTime\u003e[^/]+))*\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"(dt/(?\u003cexamDetails\u003e[^/]+))*\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final Pattern ASSESSMENT_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Pattern.compile(\"(?\u003cexamName\u003e[^/]+)\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareAdd(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case AddFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareFees(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareDelete(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareFind(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareView(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareViewAll(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ViewPrivilegeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new ViewPrivilegeCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ViewSelfCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new ViewSelfCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case RaisePrivilegeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareRaisePrivilege(arguments);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case SetPermanentAdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSetPermAdmin(arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case EditPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareChangePassword(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case AddExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareAddExam(arguments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case AddAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareAddAccount(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareDeleteAccount(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareLogin(arguments);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case ViewFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareViewFees(arguments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case AddAssignmentStatistics.COMMAND_WORD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareAddStatistics(arguments);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case UpdateAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareUpdateAttendance(arguments);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        case ReplaceAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareReplaceAttendance(arguments);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ViewAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareViewAttendance(arguments);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case ExamsListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new ExamsListCommand();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case ListFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareFeesList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case DeleteExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareDeleteExam(arguments);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case ClearExamsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new ClearExamsCommand();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case EditExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareEditExam(arguments);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case AddAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareAddAssessment(arguments);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case DeleteAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareDeleteAssessment(arguments);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case ListAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new ListAssessmentCommand();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new HelpCommand(MESSAGE_COMMAND_NOT_FOUND);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the add person command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareAdd(String args) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"p\".equals(matchedPrefix);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    //TODO: Generalize the prepare functions"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Parses arguments in the context of the AddFeesCommand command."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Command prepareFees(String args) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final Matcher matcher \u003d FEES_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFeesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"index\"));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new AddFeesCommand("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    matcher.group(\"fees\"),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    matcher.group(\"date\")"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            );"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the delete person command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Parses arguments in the context of the viewFees command."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Command prepareViewFees(String args) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new ViewFeesCommand(targetIndex);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFeesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Prepare arguments in the context of feeslist command"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Command prepareFeesList() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new ListFeesCommand(parseArgsAsDisplayedIndex(\"1\"));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view command."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareView(String args) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(targetIndex);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the view all command."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareViewAll(String args) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand(targetIndex);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        return parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Parse the given arguments string as a float"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     private float parseArgsAsFloat(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            throw new ParseException(\"Could not find float number to parse\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Float.parseFloat(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the RaisePrivilege command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareRaisePrivilege(String args) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d SINGLE_KEYWORD_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    RaisePrivilegeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String password \u003d matcher.group(\"keywords\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new RaisePrivilegeCommand(password);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the RaisePrivilege command."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareSetPermAdmin(String args) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d BOOLEAN_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String booleanString \u003d matcher.group(\"boolean\").toLowerCase();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final boolean isPerm;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!\"true\".equals(booleanString) \u0026\u0026 !\"false\".equals(booleanString)) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPerm \u003d \"true\".equals(booleanString);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new SetPermanentAdminCommand(isPerm);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the ChangePassword command."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareChangePassword(String args) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // TODO Change the regex to match only 2 words"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new EditPasswordCommand(keywords);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the AddAccount command."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareAddAccount(String args) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(keywords[0]);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (keywords.length !\u003d 4) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                final String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                throw new IllegalValueException(message);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new AddAccountCommand(targetIndex, keywords[1], keywords[2], keywords[3]);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the Login command."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareLogin(String args) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // TODO Change the regex to match only 2 words"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new LoginCommand(keywords);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the delete account command."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareDeleteAccount(String args) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new DeleteAccountCommand(targetIndex);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    DeleteAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Parses arguments in the context of the add exam command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareAddExam(String args) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d EXAM_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new AddExamCommand("
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examName\"),"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"subjectName\"),"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examDate\"),"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examStartTime\"),"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examEndTime\"),"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examDetails\"),"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isExamPrivate\"))"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the add assignment statistics command."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareAddStatistics(String args) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Matcher matcher \u003d STATISTICS_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddAssignmentStatistics.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new AddAssignmentStatistics("
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"subjectName\"),"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"examName\"),"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"topScorer\"),"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"averageScore\"),"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"totalExamTakers\"),"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"numberAbsent\"),"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"totalPass\"),"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"maxMin\"),"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isExamPrivate\"))"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            );"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the update Attendance command."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareUpdateAttendance(String args) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d ATTENDANCE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "            final Integer isPresent \u003d parseInt(matcher.group(\"isPresent\"));"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "            final boolean isPresentBool \u003d isPresent.equals(1);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!\"0\".equals(matcher.group(\"date\"))) {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "                dateFormat.parse(matcher.group(\"date\").trim());"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new UpdateAttendanceCommand("
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPresentBool);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(nfe.getMessage());"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses arguments in the context of the replaceAttendance command."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareReplaceAttendance(String args) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d ATTENDANCE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            final Integer isPresent \u003d parseInt(matcher.group(\"isPresent\"));"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            final boolean isPresentBool \u003d isPresent.equals(1);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!\"0\".equals(matcher.group(\"date\"))) {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                dateFormat.parse(matcher.group(\"date\").trim());"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ReplaceAttendanceCommand("
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPresentBool);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(nfe.getMessage());"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the view attendance command."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareViewAttendance(String args) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    ViewAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAttendanceCommand(targetIndex);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(nfe.getMessage());"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Parses arguments in the context of the edit exam command."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareDeleteExam(String args) {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new DeleteExamCommand(targetIndex);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Parses arguments in the context of the edit exam command."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareEditExam(String args) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d EDIT_EXAM_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String isPrivate \u003d matcher.group(\"isExamPrivate\");"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate private status"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isPrivateValid(isPrivate)) {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Map\u003cString, String\u003e changedDetails \u003d storeNewDetails(matcher.group(\"examName\"),"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                matcher.group(\"subjectName\"), matcher.group(\"examDate\"),"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                matcher.group(\"examStartTime\"), matcher.group(\"examEndTime\"),"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                matcher.group(\"examDetails\"), isPrivate);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (changedDetails.isEmpty()) {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    MESSAGE_NO_ARGS_FOUND + EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\").trim());"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new EditExamCommand(targetIndex, changedDetails);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the add assessment command."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareAddAssessment (String args) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Matcher matcher \u003d ASSESSMENT_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddAssessmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new AddAssessmentCommand("
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"examName\")"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            );"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the delete assessment command."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareDeleteAssessment(String args) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new DeleteAssessmentCommand(targetIndex);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    DeleteAssessmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Stores the new values of exam to be edited to."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    */"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Map\u003cString, String\u003e storeNewDetails(String examName, String subjectName,"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                                    String examDate, String startTime, String endTime,"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                                    String details, String isExamPrivate) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Map\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examName !\u003d null) {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"examName\", examName);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (subjectName !\u003d null) {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"subjectName\", subjectName);"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examDate !\u003d null) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"examDate\", examDate);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"examStartTime\", startTime);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (endTime !\u003d null) {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"examEndTime\", endTime);"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (details !\u003d null) {"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"examDetails\", details);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isExamPrivate !\u003d null) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(\"isPrivate\", isExamPrivate);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the private status for edit exam command is valid."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static boolean isPrivateValid(String value) {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean valid \u003d true;"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (value !\u003d null \u0026\u0026 !\"y\".equals(value.trim()) \u0026\u0026 !\"n\".equals(value.trim())) {"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            valid \u003d false;"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 92,
      "0WN463": 222,
      "micklwl": 166,
      "lucdx": 74,
      "-": 293
    }
  },
  {
    "path": "src/seedu/addressbook/privilege/Privilege.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.privilege;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.TutorUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Represents the privilege level of the user */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Privilege {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Enums for the different privilege levels*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private enum PrivilegeLevels {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        BASIC(new BasicUser()),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TUTOR(new TutorUser()),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ADMIN(new AdminUser());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private final User userType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        PrivilegeLevels(User userType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            this.userType \u003d userType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public User getUserType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return userType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Person myPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.BASIC.getUserType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege(User user) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that an operation would have changed the properties of the currently logged in user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class SelfTargetingException extends Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        protected SelfTargetingException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super(\"Operation would result in errors due effects on logged in user\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static Privilege getPrivilegeFromString (String userType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (PrivilegeLevels p : PrivilegeLevels.values()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.toString().equals(userType.toUpperCase())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new Privilege(p.getUserType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Copies all the information of another privilege into this object, effectively cloning it."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void copyPrivilege(Privilege privilege) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.user \u003d privilege.getUser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.myPerson \u003d privilege.getMyPerson().orElse(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raiseToTutor() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.TUTOR.getUserType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raiseToAdmin() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.ADMIN.getUserType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cPerson\u003e getMyPerson() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(myPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cReadOnlyPerson\u003e getMyReadOnlyPerson() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(myPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setMyPerson(Person myPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.myPerson \u003d myPerson;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Resets the privilege to base (No myPerson assigned, Basic User)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void resetPrivilege() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearMyPerson();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        raiseToBasic();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isBase() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (user.equals(PrivilegeLevels.BASIC.getUserType()) \u0026\u0026 myPerson \u003d\u003d null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void clearMyPerson() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        myPerson \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void raiseToBasic() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.BASIC.getUserType();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getLevelAsString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cCommand\u003e getAllowedCommands() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.getAllowedCommands();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.isAllowedCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Checks if the target is the currently logged in user"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws SelfTargetingException if the above is true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void checkTargetIsSelf(ReadOnlyPerson person) throws SelfTargetingException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isTargetSelf(person)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new SelfTargetingException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isTargetSelf(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return person.equals(myPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getRequiredPrivilegeAsString(Command command) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // TODO Fix this potato code"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String requiredPrivilege \u003d \"PRIVILEGE NOT FOUND\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (PrivilegeLevels p : PrivilegeLevels.values()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.getUserType().isAllowedCommand(command)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                requiredPrivilege \u003d p.getUserType().getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return requiredPrivilege;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 143,
      "micklwl": 5
    }
  },
  {
    "path": "src/seedu/addressbook/privilege/user/AdminUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ClearExamsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Admin access"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AdminUser extends TutorUser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommand \u003d Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewAllCommand(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new EditPasswordCommand(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new ClearExamsCommand(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new EditPasswordCommand(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new SetPermanentAdminCommand(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddAccountCommand(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeleteAccountCommand()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdminUser() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setCurrentLevel(PrivilegeLevel.Admin);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Overrides the check with always be true to allow compatibility with \"new\" commands that were"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * unaccounted for (ie commands made by teammates)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 42,
      "micklwl": 3
    }
  },
  {
    "path": "src/seedu/addressbook/privilege/user/BasicUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LoginCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LogoutCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewSelfCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Basic access"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class BasicUser implements User {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommands \u003d Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewCommand(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListCommand(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new RaisePrivilegeCommand(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewPrivilegeCommand(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new FindCommand(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new HelpCommand(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new LoginCommand(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new LogoutCommand(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ExitCommand(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewSelfCommand()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003cCommand\u003e allowedCommands;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private PrivilegeLevel currentLevel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public BasicUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        currentLevel \u003d PrivilegeLevel.Basic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.addAll(newAllowedCommands);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void addAllowedCommands(List\u003cCommand\u003e newAllowedCommands) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.addAll(newAllowedCommands);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void setCurrentLevel(PrivilegeLevel currentLevel) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.currentLevel \u003d currentLevel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrivilegeLevelAsString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return currentLevel.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public PrivilegeLevel getPrivilegeLevel() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return currentLevel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cCommand\u003e getAllowedCommands() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allowedCommands;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void sortCommands() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.sort(new SortByCategory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Checks if this privilege level have access to the given command*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Command allowedCommand: allowedCommands) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (command.getClass().equals(allowedCommand.getClass())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Comparator used to sort the commands in allowedCommands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    class SortByCategory implements Comparator\u003cCommand\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         * Compare commands based on category, if they are the same, compare name of the command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public int compare(Command a, Command b) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String categoryA \u003d a.getCategory().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String categoryB \u003d b.getCategory().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!categoryA.equals(categoryB)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return categoryA.compareTo(categoryB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return a.toString().compareTo(b.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof BasicUser // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.currentLevel.equals(((BasicUser) other).currentLevel)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 97,
      "micklwl": 7
    }
  },
  {
    "path": "src/seedu/addressbook/privilege/user/TutorUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.AddExamCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.EditExamCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ExamsListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Tutor access"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class TutorUser extends BasicUser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommand \u003d Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddCommand(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new DeleteCommand(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new AddExamCommand(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new ExamsListCommand(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new DeleteExamCommand(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditExamCommand(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new UpdateAttendanceCommand(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new ReplaceAttendanceCommand(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new ViewAttendanceCommand()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TutorUser() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setCurrentLevel(PrivilegeLevel.Tutor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 24,
      "micklwl": 8,
      "-": 8
    }
  },
  {
    "path": "src/seedu/addressbook/privilege/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " This interface describes who the current user is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public interface User {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Enum to describe privilege levels. Used only as String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    enum PrivilegeLevel { Basic, Tutor, Admin }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    PrivilegeLevel getPrivilegeLevel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    List\u003cCommand\u003e getAllowedCommands();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    boolean isAllowedCommand (Command command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 20
    }
  },
  {
    "path": "src/seedu/addressbook/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " *  This is the abstract class in charge of Storage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " *  Used to apply DI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract void save(AddressBook addressBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract void saveStatistics(StatisticsBook statisticsBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract AddressBook load() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract StatisticsBook loadStatistics() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract String getPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract String getPathStatistics();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract void saveExam(ExamBook examBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract ExamBook loadExam() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract String getPathExam();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 6,
      "0WN463": 22,
      "micklwl": 7
    }
  },
  {
    "path": "src/seedu/addressbook/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedExamBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.storage.jaxb.AdaptedStatisticsBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the file used to store address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class StorageFile extends Storage {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"addressbook.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String DEFAULT_EXAMS_FILEPATH \u003d \"exams.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String DEFAULT_STATISTICS_FILEPATH \u003d \"statistics.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public final Path pathExam;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public final Path pathStatistics;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final JAXBContext jaxbContext2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final JAXBContext jaxbContext3;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that there is some jaxb initialisation error."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class InvalidInitialisationException extends IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        public InvalidInitialisationException(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            InvalidInitialisationException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH, DEFAULT_EXAMS_FILEPATH, DEFAULT_STATISTICS_FILEPATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException, InvalidInitialisationException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this(filePath, DEFAULT_EXAMS_FILEPATH, DEFAULT_STATISTICS_FILEPATH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StorageFile(String filePath, String filePathExam, String filePathStatistics)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            InvalidInitialisationException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedAddressBook.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            jaxbContext2 \u003d JAXBContext.newInstance(AdaptedExamBook.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            jaxbContext3 \u003d JAXBContext.newInstance(AdaptedStatisticsBook.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new InvalidInitialisationException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        pathExam \u003d Paths.get(filePathExam);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidPath(pathExam)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Exam file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        pathStatistics \u003d Paths.get(filePathStatistics);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidPath(pathStatistics)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Statistics file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(AddressBook addressBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook toSave \u003d new AdaptedAddressBook(addressBook);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook load() throws StorageOperationException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook loaded \u003d (AdaptedAddressBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddressBook empty \u003d new AddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPathExam() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathExam.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPathStatistics() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathStatistics.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam(ExamBook examBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(pathExam.toFile()))) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AdaptedExamBook toSave \u003d new AdaptedExamBook(examBook);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext2.createMarshaller();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to exam file: \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + pathExam + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error converting exam book into storage format\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook loadExam() throws StorageOperationException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(pathExam.toFile()))) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext2.createUnmarshaller();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AdaptedExamBook loaded \u003d (AdaptedExamBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new StorageOperationException(\"Exam file data missing some elements\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ExamBook empty \u003d new ExamBook();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            saveExam(empty);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to exam file: \" + pathExam);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error parsing exam file data format\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Exam file contains illegal data values; \""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"data type constraints not met\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void saveStatistics(StatisticsBook statisticsBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "         */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(pathStatistics.toFile()))) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AdaptedStatisticsBook toSave \u003d new AdaptedStatisticsBook(statisticsBook);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext3.createMarshaller();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to statistics file: \""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + pathStatistics + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new StorageOperationException(\"Error converting statistics book into storage format\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook loadStatistics() throws StorageOperationException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(pathStatistics.toFile()))) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext3.createUnmarshaller();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AdaptedStatisticsBook loaded \u003d (AdaptedStatisticsBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new StorageOperationException(\"Statistics file data missing some elements\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final StatisticsBook empty \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            saveStatistics(empty);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to statistics file: \" + pathStatistics);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error parsing statistics file data format\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Statistics File contains illegal data values; \""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + \"data type constraints not met\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 70,
      "0WN463": 20,
      "micklwl": 93,
      "-": 125
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "@XmlRootElement(name \u003d \"account\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AdaptedAccount {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String privilege;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdaptedAccount() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        username \u003d source.getUsername();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d source.getPrivilege().getLevelAsString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Utils.isAnyNull(username, password, privilege);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Account(username, password, privilege);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 59
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"AddressBook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cAssessment\u003e assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(name \u003d \"password\", defaultValue \u003d \"default_pw\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isPermAdmin;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAddressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook(AddressBook source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        password \u003d source.getMasterPassword();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPermAdmin \u003d source.isPermAdmin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedAddressBook} object into the corresponding(@code AddressBook} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String masterPassword \u003d password;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssessment\u003e assessmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment assessment : assessments) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assessmentList.add(assessment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook ab \u003d new AddressBook(new UniquePersonList(personList),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new UniqueAssessmentsList(assessmentList),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                masterPassword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab.setPermAdmin(isPermAdmin);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 10,
      "0WN463": 21,
      "micklwl": 1,
      "-": 55
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedExam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * JAXB-friendly adapted exam data holder class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AdaptedExam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examStartTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examEndTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDetails;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExam() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts a given Exam into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedExam"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExam(Exam source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        isPrivate \u003d source.isPrivate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        subjectName \u003d source.getSubjectName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examName \u003d source.getExamName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDate \u003d source.getExamDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examStartTime \u003d source.getExamStartTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examEndTime \u003d source.getExamEndTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDetails \u003d source.getExamDetails();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Utils.isAnyNull(subjectName, examName, examDate, examStartTime, examEndTime, examDetails, isPrivate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts this jaxb-friendly adapted exam object into the Exam object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exam"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String subjectName \u003d this.subjectName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examName \u003d this.examName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examDate \u003d this.examDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examStartTime \u003d this.examStartTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examEndTime \u003d this.examEndTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examDetails \u003d this.examDetails;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final boolean isPrivate \u003d this.isPrivate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, isPrivate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 84
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedExamBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * JAXB-friendly adapted exam book data holder class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "@XmlRootElement(name \u003d \"ExamBook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AdaptedExamBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cAdaptedExam\u003e examsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExamBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedExamBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExamBook(ExamBook source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        source.getAllExam().forEach(exam -\u003e examsList.add(new AdaptedExam(exam)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examsList.stream().anyMatch(AdaptedExam::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedExamBook} object into the corresponding(@code ExamBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exam"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cExam\u003e examTempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (AdaptedExam exam : examsList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examTempList.add(exam.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook(new UniqueExamList(examTempList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 64
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.Fees;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private AdaptedContactDetail fees;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private String duedate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AdaptedAccount account;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * JAXB-friendly adapted contact detail data holder class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private String value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private boolean isPrivate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson() {}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        fees \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        fees.isPrivate \u003d source.getFees().isPrivate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        fees.value \u003d source.getFees().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        duedate \u003d source.getFees().duedate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (source.getAccount().isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            account \u003d new AdaptedAccount(source.getAccount().get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (account !\u003d null \u0026\u0026 account.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Utils.isAnyNull(name, phone, email, address, fees)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                || Utils.isAnyNull(phone.value, email.value, address.value, fees.value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final Fees fees \u003d new Fees(this.fees.value, this.duedate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Optional\u003cAdaptedAccount\u003e optAccount \u003d Optional.ofNullable(account);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!optAccount.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final Person person \u003d new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            person.setFees(fees);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Account account \u003d this.account.toModelType();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person person \u003d new Person(name, phone, email, address, tags, account);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            person.setFees(fees);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            account.setPrivilegePerson(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new Person(name, phone, email, address, tags, account);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 44,
      "lucdx": 16,
      "-": 92
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted assignment statistics data holder class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AdaptedStatistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Boolean isPrivate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String topScorer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String averageScore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String totalExamTakers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String numberAbsent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String totalPass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String maxMin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatistics() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts a given statistic into this class for JAXB use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedStatistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatistics(AssignmentStatistics source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        isPrivate \u003d source.isPrivate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        subjectName \u003d source.getSubjectName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        examName \u003d source.getExamName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        topScorer \u003d source.getTopScorer();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        averageScore \u003d source.getAverageScore();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        totalExamTakers \u003d source.getTotalExamTakers();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        numberAbsent \u003d source.getNumberAbsent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        totalPass \u003d source.getTotalPass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        maxMin \u003d source.getMaxMin();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Utils.isAnyNull(subjectName, examName, topScorer, averageScore, totalExamTakers, numberAbsent,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                totalPass, maxMin, isPrivate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly adapted statistics object into the Assignment Statistics object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted statistics"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String subjectName \u003d this.subjectName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String examName \u003d this.examName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String topScorer \u003d this.topScorer;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String averageScore \u003d this.averageScore;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String totalExamTakers \u003d this.totalExamTakers;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String numberAbsent \u003d this.numberAbsent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String totalPass \u003d this.totalPass;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String maxMin \u003d this.maxMin;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final boolean isPrivate \u003d this.isPrivate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new AssignmentStatistics(subjectName, examName, topScorer, averageScore, totalExamTakers, numberAbsent,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                totalPass, maxMin, isPrivate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 94
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedStatisticsBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted statistics book data holder class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "@XmlRootElement(name \u003d \"StatisticsBook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AdaptedStatisticsBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cAdaptedStatistics\u003e statisticsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatisticsBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts a given StatisticsBook into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedExamBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatisticsBook(StatisticsBook source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        source.getAllStatistics().forEach(statistics -\u003e statisticsList.add(new AdaptedStatistics(statistics)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.stream().anyMatch(AdaptedStatistics::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedStatisticsBook} object into the corresponding(@code ExamBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exam"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssignmentStatistics\u003e statisticsTempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (AdaptedStatistics exam : statisticsList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsTempList.add(exam.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook(new UniqueStatisticsList(statisticsTempList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 64
    }
  },
  {
    "path": "src/seedu/addressbook/storage/jaxb/AdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedTag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 3,
      "-": 49
    }
  },
  {
    "path": "src/seedu/addressbook/ui/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-family: \u0027Segoe UI Semibold\u0027;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: derive(#1d1d1d,20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: black;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "#statusConsole {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-control-inner-background: grey;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 8,
      "-": 16
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Printable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(String... messages) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            sb.append(LINE_PREFIX)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    .append(m.replace(\"\\n\", LS + LINE_PREFIX))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    .append(LS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String format(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return format(asIndexedList(formattedPersons));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int displayIndex \u003d 0 + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String getPrintableString(boolean showPrivate, Printable... printables) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder stringChain \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Printable i: printables) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            stringChain.append(i.getPrintableString(showPrivate)).append(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return stringChain.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String getPrintableField(boolean showPrivate, boolean isPrivate, String fieldLabel, String value) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isPrivate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return String.format(\"{private %s: %s}\", fieldLabel, value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return String.format(\"%s: %s\", fieldLabel, value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Formats the given list of exams for displaying to the admin user. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String formatExam(List\u003c? extends ReadOnlyExam\u003e exams) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cString\u003e formattedExams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (ReadOnlyExam exam : exams) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            formattedExams.add(exam.getAsTextShowAll());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return format(asIndexedList(formattedExams));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Formats the given list of exams for displaying to the admin user. */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String formatAssessments(List\u003c? extends Assessment\u003e assessments) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cString\u003e formattedAssessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment assessment : assessments) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            formattedAssessments.add(assessment.getAsTextShowAll());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return format(asIndexedList(formattedAssessments));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 11,
      "0WN463": 27,
      "micklwl": 11,
      "-": 63
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.Main;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gui(Logic logic, String version) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Create the startup the window **/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        mainWindow.displayWelcomeMessage(version, logic.getStorageFilePath(), logic.getStorageFilePathExam(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getStorageFilePathStatistics());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Create the GUI window **/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        MainWindow mainWindow \u003d loader.getController();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setLogic(logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setMainApp(mainApp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 6,
      "-": 47
    }
  },
  {
    "path": "src/seedu/addressbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_USING_EXAMS_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_USING_STATISTICS_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_USING_STORAGE_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextArea statusConsole;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return result.getStatusConsoleMessage().equals(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the output display area */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearOutputConsole() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Clears the status display area */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void clearStatusConsole() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        statusConsole.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e resultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        resultPersons.ifPresent(this::display);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //TODO: Clean up code"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e resultExams \u003d result.getRelevantExams();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Optional\u003cList\u003c? extends Assessment\u003e\u003e resultAssessment \u003d result.getRelevantAssessments();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (resultExams.isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            displayExams(resultExams.get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } else if (resultAssessment.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            displayAssessments(resultAssessment.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(result.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Displays the welcome message**/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath, String examsFilePath,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                      String statisticsFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examsFileInfo \u003d String.format(MESSAGE_USING_EXAMS_FILE, examsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String statisticsFileInfo \u003d String.format(MESSAGE_USING_STATISTICS_FILE, statisticsFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        display(MESSAGE_WELCOME, version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo, examsFileInfo,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                statisticsFileInfo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of persons in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Private contact details are hidden."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(List\u003c? extends ReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        display(new Formatter().format(persons));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + new Formatter().format(messages));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Displays the list of exams in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void displayExams(List\u003c? extends ReadOnlyExam\u003e exams) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        display(new Formatter().formatExam(exams));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void displayStatus(String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearStatusConsole();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        statusConsole.setText(message);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void handleDisplay(CommandResult result) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearStatusConsole();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearCommandInput();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (result.hasStatusMessage()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            displayStatus(result.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (result.hasOutputMessage()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Displays the list of exams in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private void displayAssessments(List\u003c? extends Assessment\u003e assessments) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        display(new Formatter().formatAssessments(assessments));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Reads the user command on the CLI **/"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            handleDisplay(result);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (isExitCommand(result)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                clearOutputConsole();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            display(e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Exits the app after a given delay*/"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void exitApp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int delayInMillis \u003d 500;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    mainApp.stop();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    throw new RuntimeException(e);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Timer timer \u003d new Timer(\"Timer\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        timer.schedule(task, delayInMillis);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 17,
      "0WN463": 78,
      "micklwl": 12,
      "-": 69
    }
  },
  {
    "path": "src/seedu/addressbook/ui/Stoppable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * An App that can be stopped by calling the stop() method."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Stoppable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    void stop() throws Exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "-": 7
    }
  },
  {
    "path": "src/seedu/addressbook/ui/mainwindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox stylesheets\u003d\"@/seedu/addressbook/ui/DarkTheme.css\" alignment\u003d\"center\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      fx:controller\u003d\"seedu.addressbook.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandInput\" onAction\u003d\"#onCommand\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextArea fx:id\u003d\"outputConsole\" editable\u003d\"false\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cTextArea fx:id\u003d\"statusConsole\" editable\u003d\"false\" wrapText\u003d\"true\" VBox.vgrow\u003d\"NEVER\" prefHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "-": 20
    }
  },
  {
    "path": "test/java/seedu/addressbook/FormatterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class FormatterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static Formatter formatter \u003d new Formatter();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatStringChain() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(\" A\" + NEWLINE + \" B\" + NEWLINE + \" C\" + NEWLINE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                formatter.format(\"A\", \"B\", \"C\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(\" A\" + NEWLINE + \" B\" + NEWLINE + \" C\" + NEWLINE + \" D\" + NEWLINE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                formatter.format(\"A\", \"B\\nC\", \"D\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatPerson() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person toBePrinted \u003d helper.adam();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expected \u003d \" \\t1. Adam Brown  Email: adam@gmail.com    Tags: [tag1][tag2]\" + NEWLINE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        persons.add(toBePrinted);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, formatter.format(persons));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatPersons() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e persons \u003d helper.generatePersonList(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expected \u003d \" \\t1. Person 1 Phone: 1 Email: 1@email Address: House of 1   Tags: [tag1][tag2]\" + NEWLINE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, formatter.format(persons));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all fields non-private"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        persons \u003d helper.generatePersonList(false, false , false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected \u003d \" \\t1. Person 1 Phone: 1 Email: 1@email Address: House of 1   Tags: [tag1][tag2]\" + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \\t2. Person 2 Phone: 2 Email: 2@email Address: House of 2   Tags: [tag2][tag3]\" + NEWLINE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \\t3. Person 3 Phone: 3 Email: 3@email Address: House of 3   Tags: [tag4][tag3]\" + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, formatter.format(persons));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all fields non-private*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        persons \u003d helper.generatePersonList(false, true , false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected \u003d \" \\t1. Person 1 Phone: 1 Email: 1@email Address: House of 1   Tags: [tag1][tag2]\" + NEWLINE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \\t2. Person 2      Tags: [tag2][tag3]\" + NEWLINE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \\t3. Person 3 Phone: 3 Email: 3@email Address: House of 3   Tags: [tag4][tag3]\" + NEWLINE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, formatter.format(persons));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void formatAllExam() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e exams \u003d helper.generateExamList(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expected \u003d \" \\t1. Exam: Exam 1 Subject 1 01-02-2018 10:00 12:00 Held in 1\" + NEWLINE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expected, formatter.formatExam(exams));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 62,
      "micklwl": 11
    }
  },
  {
    "path": "test/java/seedu/addressbook/TestDataHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.Fees;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * A utility class to generate test data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class TestDataHelper {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Test person for testing**/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person adam() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Test exam for testing**/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam math() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examName \u003d \"Math Mid-Terms 2018\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectName \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String date \u003d \"06-06-2018\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTime \u003d \"09:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String details \u003d \"Held in MPSH\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Boolean isPrivate \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam(examName, subjectName, date, startTime, endTime, details, isPrivate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /** Test fees for testing**/"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees fees () throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String test \u003d \"123.45\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String testdate \u003d \"01-01-2018\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return new Fees(test, testdate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Test exam for testing**/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics stat() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String subjectName \u003d \"Spanish\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examName \u003d \"Quiz\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String topScorer \u003d \"Pedro\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String averageScore \u003d \"95\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String totalExamTakers \u003d \"10\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String numberAbsent \u003d \"3\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String totalPass \u003d \"7\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String maxMin \u003d \"100 87\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Boolean isPrivate \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new AssignmentStatistics(subjectName, examName, topScorer, averageScore, totalExamTakers, numberAbsent,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                totalPass, maxMin, isPrivate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Test assessment for testing**/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public final Assessment assess () throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String assessment \u003d \"CG2271 Midterm\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new Assessment(assessment);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid exam using the given seed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned exam will have the same state."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Each unique seed will generate a unique Exam object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param seed used to generate the exam data field values"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isExamPrivate determines if the exam will be private"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam generateExam(int seed, boolean isExamPrivate) throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam((\"Exam \" + seed), (\"Subject \" + seed), \"01-02-2018\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"10:00\", \"12:00\", (\"Held in \" + seed), isExamPrivate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**Generated the prefix for the field **/"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Phone phone) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (phone.isPrivate() ? \" pp/\" : \" p/\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Email email) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (email.isPrivate() ? \" pe/\" : \" e/\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Address address) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (address.isPrivate() ? \" pa/\" : \" a/\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPrefix (String name, Boolean isPrivate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (isPrivate ? \" pn/\" : \" n/\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamNamePrefix (Boolean isPrivate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (isPrivate ? \" pe/\" : \"e/\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getSubjectNamePrefix() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" s/\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getDatePrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" d/\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getStartTimePrefix() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" st/\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getEndTimePrefix() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" et/\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getDetailsPrefix() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" dt/\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTopScorerPrefix (String value) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" ts/\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getAverageScorePrefix (String value) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" av/\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTotalExamTakersPrefix (String value) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" te/\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getNumberAbsentPrefix (String value) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" ab/\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getTotalPassPrefix (String value) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" tp/\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getMaxMinPrefix (String value) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (\" mm/\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPrivatePrefix (Boolean isPrivate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (isPrivate ? \" p\" : \"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String phoneField \u003d getPrefix(p.getPhone()) + p.getPhone();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String emailField \u003d getPrefix(p.getEmail()) + p.getEmail();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String addressField \u003d getPrefix(p.getAddress()) + p.getAddress();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(\"add\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(phoneField);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(emailField);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(addressField);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Tag t: tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Generates the correct addfees command based on the person given */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String generateAddFeesCommand() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\"addfees\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\" 2\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\" 123.45\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\" 01-01-2018\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Generates the correct addexam command based on the exam given */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String generateAddExamCommand(Exam e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examNameField \u003d getExamNamePrefix(e.isPrivate()) + e.getExamName();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectNameField \u003d getSubjectNamePrefix() + e.getSubjectName();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String dateField \u003d getDatePrefix() + e.getExamDate();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTimeField \u003d getStartTimePrefix() + e.getExamStartTime();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTimeField \u003d getEndTimePrefix() + e.getExamEndTime();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String detailsField \u003d getDetailsPrefix() + e.getExamDetails();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(\"addexam\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(examNameField);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(subjectNameField);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(dateField);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(startTimeField);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(endTimeField);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(detailsField);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Generates the correct addstatistics command based on the exam given */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String generateAddAssignmentStatistics(AssignmentStatistics s) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String subjectField \u003d s.getSubjectName();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examNameField \u003d getExamNamePrefix(s.isPrivate()) + s.getExamName();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String topScorerField \u003d getTopScorerPrefix(s.getTopScorer()) + s.getTopScorer();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String averageScoreField \u003d getAverageScorePrefix(s.getAverageScore()) + s.getAverageScore();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String totalExamTakersField \u003d getTotalExamTakersPrefix(s.getTotalExamTakers()) + s.getTotalExamTakers();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String numberAbsentField \u003d getNumberAbsentPrefix(s.getNumberAbsent()) + s.getNumberAbsent();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String totalPassField \u003d getTotalPassPrefix(s.getTotalPass()) + s.getTotalPass();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String maxMinField \u003d getMaxMinPrefix(s.getMaxMin()) + s.getMaxMin();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(\"addstatistics\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(subjectField);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(examNameField);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(topScorerField);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(averageScoreField);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(totalExamTakersField);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(numberAbsentField);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(totalPassField);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(maxMinField);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Generates the correct addassess command based on the person given */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String generateAddAssessment(Assessment a) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examName \u003d a.getExamName();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(\"addassess\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(examName);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates an ExamBook with auto-generated exams."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all exams should be set to"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook generateExamBook(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examBook;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates an ExamBook based on the list of Exams given."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook generateExamBook(List\u003cExam\u003e exams) throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, exams);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examBook;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds auto-generated Exam objects to the given ExamBook"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examBook The ExamBook to which the Exams will be added"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if the generated exams should be set to"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addToExamBook(ExamBook examBook, Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, generateExamList(isPrivateStatuses));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds the given list of Exams to the given ExamBook"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addToExamBook(ExamBook examBook, List\u003cExam\u003e examsToAdd) throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam p: examsToAdd) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(p);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes special characters in a string for exam values"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String removeSpecialChar(String value) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String newValue \u003d value.replaceAll(\"[^a-zA-Z0-9!@\\\\.,]\", \"\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return newValue;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook generateAddressBook(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook generateAddressBook(List\u003cPerson\u003e persons) throws Exception {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, persons);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addToAddressBook(AddressBook addressBook, Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addToAddressBook(AddressBook addressBook, List\u003cPerson\u003e personsToAdd) throws Exception {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Person p: personsToAdd) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.addPerson(p);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Creates a list of Persons based on the give Person objects."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cPerson\u003e generatePersonList(Person... persons) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(persons));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Boolean p: isPrivateStatuses) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Phone(\"1\", false),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates a list of Exams based on the give Exam objects."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cExam\u003e generateExamList(Exam... exams) throws Exception {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e examList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam e: exams) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examList.add(e);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a list of Exams based on the flags."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if the exams should be set to"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cExam\u003e generateExamList(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Boolean p: isPrivateStatuses) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            exams.add(generateExam(i++, p));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return exams;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid date using a seed"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String generateDate(int seed) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long max \u003d 0L;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long min \u003d 100000000000L;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        SimpleDateFormat spf \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Random rnd \u003d new Random(seed);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long randomLong \u003d (rnd.nextLong() % (max - min)) + min;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Date date \u003d new Date(randomLong);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return removeSpecialChar(spf.format(date));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid time using a seed"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String generateTime(int seed) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long max \u003d 0L;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long min \u003d 100000000000L;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        SimpleDateFormat spf \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Random rnd \u003d new Random(seed);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Long randomLong \u003d (rnd.nextLong() % (max - min)) + min;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Date date \u003d new Date(randomLong);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return removeSpecialChar(spf.format(date));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generate the next time"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String addTimeInterval(String time) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String timeString \u003d new StringBuilder(time).insert(2, \":\").toString();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        SimpleDateFormat spf \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Date date \u003d spf.parse(timeString);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Long nextTime \u003d date.getTime();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            nextTime +\u003d (2 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Date nextDate \u003d new Date(nextTime);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return removeSpecialChar(spf.format(nextDate));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Class used to wrap the return arrays for generateThreePersons"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class ThreePersons {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cPerson\u003e expected;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cPerson\u003e actual;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public ThreePersons() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            actual \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public List\u003cPerson\u003e getExpected() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return expected;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setExpected(List\u003cPerson\u003e expected) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // copies the list"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            for (Person person: expected) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                this.expected.add(new Person(person));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public List\u003cPerson\u003e getActual() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return actual;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setActual(List\u003cPerson\u003e actual) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // copies the list"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            for (Person person: actual) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                this.actual.add(new Person(person));"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public Person getActualPerson(int index) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return actual.get(index - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public Person getExpectedPerson(int index) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return expected.get(index - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setBothPersons(int index, Account account) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            actual.get(index - DISPLAYED_INDEX_OFFSET).setAccount(account);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            expected.get(index - DISPLAYED_INDEX_OFFSET).setAccount(account);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a 3 Person object with given name. Returns the Lists wrapped in ThreePerson"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public ThreePersons generateThreePersons() throws Exception {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ThreePersons threePersons \u003d new ThreePersons();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final List\u003cPerson\u003e p \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(1, true));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(2, false));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(3, false));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setActual(p);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setExpected(p);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return threePersons;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 80,
      "0WN463": 221,
      "micklwl": 204,
      "lucdx": 15
    }
  },
  {
    "path": "test/java/seedu/addressbook/common/UtilsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNull() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // Any non-empty list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(new Object(), new Object()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"test\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with just one null at the beginning"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull((Object) null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, \"\", new Object()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, new Object(), new Object()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with nulls in the middle"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), null, null, \"test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", null, new Object()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with one null as the last element"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", new Object(), null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), new Object(), null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside the list are not considered"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e nullList \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(nullList));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void elementsAreUnique() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // only one object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique((Object) null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // all objects unique"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\", \"ab\", \"a\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // some identical objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"abc\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(1, Integer.valueOf(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, 1, Integer.valueOf(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, \"a\", \"b\", null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAreUnique(Object... objects) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNotUnique(Object... objects) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "-": 71
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/AccountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.data.account.Account.MESSAGE_PRIVILEGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.TestDataHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddAccountCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LoginCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.LogoutCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.TutorUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.User.PrivilegeLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.stubs.StorageStub;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This tests for Commands that affects or depends on Account"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageStub stubFile;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile saveFile;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StatisticsBook statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticsBook, privilege);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.setData(saveFile, addressBook, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpThreePerson(AddressBook addressBook,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  AddressBook expected,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  Logic logic,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  TestDataHelper.ThreePersons threePersons) throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(expected, threePersons.getExpected());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons.getActual());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(threePersons.getActual());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountInvalidArgumentNumber() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc user password TUTOR\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 password TUTOR\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username TUTOR\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username password\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username password TUTOR TrailingArgument\"};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"addacc\", \"\", \"username password BASIC\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountTargetPersonHasAccount() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"SomeAccount\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"SomeAccount\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc 1 user password Basic\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 1 user password TUTOR\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 1 user password admin\"};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_PERSON_HAS_ACCOUNT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getActual());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountPersonMissing() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 2 user password basic\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountInvalidPrivilegeArgument() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputPrivileges \u003d {\"SUPERMAN\", \"BasicUser\", \"Admins\"};"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String inputPrivilege : inputPrivileges) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String inputFormat \u003d \"addacc 2 user password %s\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String input \u003d String.format(inputFormat, inputPrivilege);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    String.format(MESSAGE_PRIVILEGE_CONSTRAINTS, inputPrivilege),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getActual());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountDuplicateUsername() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"takenUserName\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectP1.setAccount(new Account(\"takenUserName\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc 2 takenUserName password TUTOR\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 takenUserName AnotherPassword Basic\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 3 takenUserName password admin\"};"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USERNAME_TAKEN,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getActual());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc \", expectedMessage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delacc\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountSuccess() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(3, new Account(\"user3\", \"pw3\", \"Admin\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p2.setAccount(new Account(\"user2\", \"pw2\", \"basic\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc 2\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(DeleteAccountCommand.MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS, p2.getName()),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountPersonMissing() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(expectedP2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc 2\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountTargetHasNoAccount() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc 2\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteAccountCommand.MESSAGE_PERSON_ACCOUNT_ABSENT,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccountDeleteSelf() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account myAccount \u003d new Account(\"myself\", \"password\", \"admin\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, myAccount);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person self \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(self);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delacc 1\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteAccountCommand.MESSAGE_DELETING_SELF,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccountSuccess() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"user\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 1 user password BASIC\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 1\"),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP2.setAccount(new Account(\"user2\", \"password2\", \"Admin\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 2 user2 password2 admin\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 2\"),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP3 \u003d threePersons.getExpectedPerson(3);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP3.setAccount(new Account(\"user3\", \"password3\", \"Tutor\"));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 3 user3 password3 Tutor\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 3\"),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLoginInvalidArgument() throws Exception {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook expectedAddressbook \u003d new AddressBook();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedAddressbook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLoginInvalidArgumentNumber() throws Exception {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook expectedAddressbook \u003d new AddressBook();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedAddressbook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int requiredArguments \u003d 2;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int actualArguments \u003d 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username\","
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login password\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username password extra_argument\","
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLoginMissingUser() throws Exception {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login otherUsername password\","
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login password password\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLoginWrongPassword() throws Exception {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook expectedAddressbook \u003d new AddressBook();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedAddressbook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username WrongPassword\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username username\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username password12345\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLoginSuccess() throws Exception {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, new Account(\"tutorUser\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(2, new Account(\"B_user\", \"password2\", \"Basic\"));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(3, new Account(\"Sudo\", \"password\", \"Admin\"));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login tutorUser password\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p1.getName(), \"Tutor\"),"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new TutorUser());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login B_user password2\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p2.getName(), \"Basic\"),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p3 \u003d threePersons.getActualPerson(3);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login Sudo password\","
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p3.getName(), \"Admin\"),"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogoutNotLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"logout\", MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogoutSuccess() throws Exception {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"logout\", LogoutCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(privilege.isBase());"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 470
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/CommandAssertions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.TestDataHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.CommandResult.MessageType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * This class holds the commonly used assertions of commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class CommandAssertions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static StorageFile saveFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static AddressBook addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static ExamBook examBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void setData(StorageFile saveFile, AddressBook addressBook, Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.saveFile \u003d saveFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static void setData(StorageFile saveFile, AddressBook addressBook, Logic logic, ExamBook examBook,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                               StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setData(saveFile, addressBook, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.examBook \u003d examBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandAssertions.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false, Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status and output messages are correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedOutputMessage) throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, expectedOutputMessage,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                AddressBook.empty(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Both the \u0027address book\u0027 and the \u0027last shown list\u0027 are expected to be empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             MessageType messageType) throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (messageType.equals(MessageType.STATUS)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(inputCommand, expectedMessage, AddressBook.empty(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false, Collections.emptyList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else if (messageType.equals(MessageType.OUTPUT)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(inputCommand, \"\", expectedMessage, AddressBook.empty(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false, Collections.emptyList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumes the command does not write to file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      List\u003c? extends ReadOnlyPerson\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the output and status messages is correct and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumes the command does not write to file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedStatusMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedOutputMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      if the command will write to file"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      boolean writesToFile) throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Sets expected status message as blank as it is not expected such messages"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, \"\", expectedAddressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantPersonsExpected, lastShownList, writesToFile);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      if the command will write to file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean writesToFile) throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // If we need to test if the command writes to file correctly"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Injects the saveFile object to check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedOutputMessage, r.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isRelevantPersonsExpected) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(addressBook, saveFile.load());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal exam book data are same as those in the {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      if the command will write to file"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the storage file content matches data in {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      String expectedMessage,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                      boolean writesToFile) throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // If we need to test if the command writes to file correctly"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Injects the saveFile object to check"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedExamBook, examBook);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(examBook, saveFile.loadExam());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Assumes the command does not write to file"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      * @see #assertCommandBehavior(String, String, ExamBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(inputCommand,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedExamBook,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                isRelevantExamsExpected,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the internal exam book data are same as those in the {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code expectedLastList} \u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      if the command will write to file"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownList,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean writesToFile) throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // If we need to test if the command writes to file correctly"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Injects the saveFile object to check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(r.getRelevantExams().isPresent(), isRelevantExamsExpected);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isRelevantExamsExpected) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantExams().get());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedExamBook, examBook);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(examBook, saveFile.loadExam());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the internal statistics book data are same as those in the {@code expectedStatisticsBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      if the command will write to file"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the storage file content matches data in {@code expectedStatisticsBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             StatisticsBook expectedStatisticsBook,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             boolean writesToFile) throws Exception {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // If we need to test if the command writes to file correctly"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Injects the saveFile object to check"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expectedStatisticsBook, statisticsBook);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (writesToFile) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertEquals(statisticsBook, saveFile.loadStatistics());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD INDEX"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] commands \u003d {commandWord + \" 0\", commandWord + \" -1\", commandWord + \" 3\"};"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviour(commands);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD PREFIX INDEX SUFFIX"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * PREFIX and SUFFIX can be empty"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commandWord of the command."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param prefix containing required information to enter before the INDEX."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param suffix containing required information to enter after the INDEX."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertInvalidIndexBehaviorForCommand(String commandWord, String prefix, String suffix)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] commands \u003d {String.format(\"%s %s 0 %s\", commandWord, prefix, suffix),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(\"%s %s -1 %s\", commandWord, prefix, suffix),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(\"%s %s 3 %s\", commandWord, prefix, suffix)};"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviour(commands);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command array"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commands to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static void assertInvalidIndexBehaviour(String[] commands) throws Exception {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String command: commands) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddressBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * targeting a single exam in the last shown list, using visible index."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param commandWord to test assuming it targets a single exam in the last shown list based on visible index."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertInvalidIndexBehaviorForExamCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e lastShownList \u003d helper.generateExamList(false, true);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(lastShownList);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(commandWord + \" -1\", expectedMessage,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ExamBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(commandWord + \" 0\", expectedMessage,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ExamBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(commandWord + \" 3\", expectedMessage,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ExamBook.empty(), false, lastShownList);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 34,
      "0WN463": 249,
      "micklwl": 85
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/ExamTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * For further testing of methods in Exam class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidDate(\"0132-2018\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidDate(\"31-02-2018\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidDate(\"33-02-2018\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidDate(\"notADate\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Exam.isValidDate(\"01-02-2018\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"0132/2018\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"25:00\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"2500\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"notATime\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidTimeInterval() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"2300\", \"1000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"23:00\", \"10:00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"10:00\", \"10:00\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Exam.isValidTimeInterval(\"10:00\", \"10:01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 41
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NO_ARGS_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.logic.CommandAssertions.assertInvalidIndexBehaviorForExamCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.TestDataHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.AddAssessmentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.AddAssignmentStatistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.AddExamCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "//import seedu.addressbook.commands.AddFeesCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ClearExamsCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.CommandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.EditExamCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.EditPasswordCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.commands.ViewAttendanceCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.commands.ViewFeesCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewSelfCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.common.Messages;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import seedu.addressbook.data.person.Fees;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.stubs.StorageStub;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile saveFile;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook examBook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook statisticBook;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageStub stubFile;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Privilege set to admin to allow all commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Privilege restrictions are tested separately under PrivilegeTest."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticBook, privilege);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandAssertions.setData(saveFile, addressBook, logic, examBook, statisticBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        saveFile.saveExam(examBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        saveFile.saveStatistics(statisticBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpThreePerson(AddressBook addressBook,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  AddressBook expected,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  Logic logic,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  TestDataHelper.ThreePersons threePersons) throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //expected \u003d helper.generateAddressBook(threePersons.getExpected());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(expected, threePersons.getExpected());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons.getActual());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(threePersons.getActual());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void defaultConstructor() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Verifies if addressbook.txt is loadable"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic \u003d new Logic();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalid() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_unknownCommandWord() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helpCommand.setData(addressBook, statisticBook, new ArrayList\u003c\u003e(), privilege);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(unknownCommand, MESSAGE_COMMAND_NOT_FOUND, helpCommand.makeHelpManual());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeHelp() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helpCommand.setData(addressBook, statisticBook, new ArrayList\u003c\u003e(), privilege);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", helpCommand.makeHelpManual(), CommandResult.MessageType.OUTPUT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.makeHelpManual(), CommandResult.MessageType.OUTPUT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", HelpCommand.makeHelpManual(), CommandResult.MessageType.OUTPUT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeExit() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeClearSuccess() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // TODO: refactor this elsewhere"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // generates the 3 test people and execute the add command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 3; ++i) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person testPerson \u003d helper.generatePerson(i, true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.addPerson(testPerson);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            logic.execute(helper.generateAddCommand(testPerson));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"clear\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                AddressBook.empty(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\", expectedMessage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddInvalidPersonData() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\", Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\", Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/notAnEmail a/valid, address\", Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"add Valid Name p/12345 e/valid@e.mail a/#$%#@#What Am I?\", Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"add Valid Name p/1234 e/valid@e.mail a/valid, address t/invalid_-[.tag\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeAddFeesCommandInvalidData() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                \"addfees 2 1.111 01-01-2018\", Fees.MESSAGE_FEES_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeAddFeesSuccessful() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.fees());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        //TODO make it more modular using generate add command, and string.format(command, p2)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        //Dk why its not working in this build, the expected message"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"addfees 2 123.45 01-01-2018\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                \"Fees updated: Person 2 {private Fees: 123.45 / 01-01-2018}  \","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddDuplicateNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toBeAdded \u003d helper.adam();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddExamSuccessful() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.math();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                helper.generateAddExamCommand(toBeAdded),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(AddExamCommand.MESSAGE_SUCCESS, toBeAdded, toBeAdded.isPrivate() ? \" private\" : \"\"),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, true);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddDuplicateExamNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.math();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.addExam(toBeAdded); // exam already in internal exam book"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                helper.generateAddExamCommand(toBeAdded),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                AddExamCommand.MESSAGE_DUPLICATE_EXAM,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddExamInvalidArgs() throws Exception {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg \u003d \"d/32122018\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg2 \u003d \"d/not_a_number\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validDateArg \u003d \"d/\" + Exam.EXAM_DATE_EXAMPLE;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg \u003d \"st/not__numbers\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg2 \u003d \"st/999999\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validStartTimeArg \u003d \"st/\" + Exam.EXAM_START_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg \u003d \"et/not__numbers\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg2 \u003d \"et/999999\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validEndTimeArg \u003d \"et/\" + Exam.EXAM_END_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeIntervalArg \u003d \"et/08:00\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // exam name, subject name and details can be any string, so no invalid strings"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String addExamCommandFormatString \u003d \"addexam e/\" + Exam.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" s/\" + Exam.SUBJECT_NAME_EXAMPLE"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" %s %s %s dt/\" + Exam.EXAM_DETAILS_EXAMPLE;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.math();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d Exam.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, invalidDateArg,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, invalidDateArg2,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                invalidStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                invalidStartTimeArg2, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeArg2), expectedMessage);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_INTERVAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeIntervalArg), expectedMessage);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssignmentStatisticsSuccessful() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AssignmentStatistics toBeAdded \u003d helper.stat();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook expected \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addStatistic(toBeAdded);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssignmentStatistics(toBeAdded),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(AddAssignmentStatistics.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expected, false);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssignmentStatisticsDuplicateNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AssignmentStatistics toBeAdded \u003d helper.stat();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook expected \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addStatistic(toBeAdded);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticBook.addStatistic(toBeAdded); // statistic already in internal statistic book"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssignmentStatistics(toBeAdded),"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddAssignmentStatistics.MESSAGE_DUPLICATE_STATISTIC, expected, false);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssessmentSuccessful() throws Exception {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment toBeAdded \u003d helper.assess();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(toBeAdded);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e dummyList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssessment(toBeAdded),"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(AddAssessmentCommand.MESSAGE_SUCCESS, toBeAdded), expected, false,"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                dummyList);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssessmentDuplicateNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment toBeAdded \u003d helper.assess();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(toBeAdded);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e dummyList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(toBeAdded); // statistic already in internal statistic book"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssessment(toBeAdded),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddAssessmentCommand.MESSAGE_DUPLICATE_ASSESSMENT, expected, false, dummyList);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeExamsListShowsAllExams() throws Exception {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d null;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected \u003d helper.generateExamBook(false, true);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003c? extends ReadOnlyExam\u003e expectedList \u003d expected.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // prepare exam book state"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, false, true);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"examslist\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Command.getMessageForExamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeListShowsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewOnlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextHidePrivate()),"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeTryToViewMissingPersonErrorMessage() throws Exception {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(p2);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p2);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewAllInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewAllInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewAllAlsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getAsTextShowAll()),"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeTryToViewAllPersonMissingInAddressBookErrorMessage() throws Exception {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "                lastShownList);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeViewFeesCommandSuccessful() throws Exception {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.fees());"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"viewfees 2\","
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(ViewFeesCommand.MESSAGE_VIEWFEE_PERSON_SUCCESS, p2.getAsTextShowFee()),"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeViewFeesCommandInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewfees\");"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeViewFeesInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFeesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"viewfees \", expectedMessage);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"viewfees arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteRemovesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual(),"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteSelfExceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteCommand.MESSAGE_DELETING_SELF,"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual(),"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteMissingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindOnlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindIsCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindMatchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedList);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeChangePasswordInvalidArguments() throws Exception {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                EditPasswordCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw\", expectedMessage);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw \", expectedMessage);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeChangePasswordInvalidArgumentNumber() throws Exception {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int requiredArguments \u003d 2;"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int actualArguments \u003d 1;"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw\", String.format(expectedMessage,"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                requiredArguments, actualArguments, EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 3;"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw new_pw extra_arg\","
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments,"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeChangePasswordWrongPassword() throws Exception {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d EditPasswordCommand.MESSAGE_WRONG_PASSWORD;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw wrong_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw default_password1 new_password\", expectedMessage);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw Default_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeChangePasswordSameAsOldPassword() throws Exception {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d EditPasswordCommand.MESSAGE_SAME_AS_OLDPASSWORD;"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw default_pw\", expectedMessage);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setMasterPassword(\"new_password\");"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw new_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeChangePasswordSuccess() throws Exception {"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d EditPasswordCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String commandFormat \u003d \"editpw %s %s\";"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String oldPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String newPassword \u003d \"new_password\";"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String commandInput \u003d String.format(commandFormat, oldPassword, newPassword);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(commandInput,"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, newPassword));"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), newPassword);"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        oldPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        newPassword \u003d \"another_new_password\";"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        commandInput \u003d String.format(commandFormat, oldPassword, newPassword);"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(commandInput,"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, newPassword));"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), newPassword);"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewSelfNotLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewself\", Messages.MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewSelfSuccess() throws Exception {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewself\","
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(ViewSelfCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getAsTextShowAll()),"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getActual());"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeUpdateAttendanceInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-1996 att/ \", expectedMessage);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"attendance 2\", expectedMessage);"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUpdateAttendanceInvalidDateFormat() throws Exception {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_DATE, UpdateAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/123123-123 att/1 \","
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "                personList);"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeUpdateAttendanceUpdateCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersonsExpected \u003d helper.generatePersonList(p1Expected, p2, p3);"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersonsExpected);"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "        p1Expected.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(UpdateAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName()),"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(p1.getAttendance(), p1Expected.getAttendance());"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUpdateAttendanceNoInputDate() throws Exception {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersonsExpected \u003d helper.generatePersonList(p1Expected, p2, p3);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersonsExpected);"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String currentDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        p1Expected.updateAttendanceMethod(currentDate, true, false);"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/0 att/1\","
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(UpdateAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName()),"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(p1.getAttendance(), p1Expected.getAttendance());"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUpdateAttendanceDuplicateDate() throws Exception {"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        p1.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateAttendanceCommand.MESSAGE_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "                personList);"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeViewAttendanceSuccess() throws Exception {"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "        p1Expected.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personListExpected);"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewAtten 1\","
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName()"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                               + \":\\n\" + p1Expected.viewAttendanceMethod(),"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "                personListExpected);"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeViewAttendanceNilAttendance() throws Exception {"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"viewAtten 1\","
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName()"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \":\\n\" + p1Expected.viewAttendanceMethod(),"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "                personList);"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeReplaceAttendanceSuccess() throws Exception {"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        p1.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                ReplaceAttendanceCommand.MESSAGE_SUCCESS + p1.getName(),"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "                personList);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeReplaceAttendanceNoAttendanceYet() throws Exception {"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "                ReplaceAttendanceCommand.MESSAGE_NO_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                personList);"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeClearExamsSuccess() throws Exception {"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // TODO: refactor this elsewhere"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setStorage(saveFile);"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // generates the 3 test exam and execute the add exam command"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 3; ++i) {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam testExam \u003d helper.generateExam(i, true);"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(testExam);"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            logic.execute(helper.generateAddExamCommand(testExam));"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"clearexams\","
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ClearExamsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ExamBook.empty(),"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExamInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam \", expectedMessage);"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExamInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForExamCommand(\"deleteexam\");"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExamRemovesCorrectExam() throws Exception {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, true);"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam 2\","
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(DeleteExamCommand.MESSAGE_DELETE_EXAM_SUCCESS, e2),"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threeExams,"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteMissingInExamBook() throws Exception {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, true);"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.removeExam(e2);"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam 2\","
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threeExams);"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditMissingInExamBook() throws Exception {"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, true);"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.removeExam(e2);"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 2 s/Mathematics\","
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threeExams);"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExamInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForExamCommand(\"editexam 4 s/Mathematics\");"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExamInvalidArgsFormat() throws Exception {"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam \", expectedMessage);"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_NO_ARGS_FOUND"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExamSuccess() throws Exception {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, true);"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e4 \u003d helper.generateExam(4, false);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.editExam(e2, e4);"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 2 p/n e/Exam 4 s/Subject 4 d/01-02-2018 dt/Held in 4\","
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(EditExamCommand.MESSAGE_EDIT_EXAM_SUCCESS, e2, e4, e4.isPrivate() ? \" private\" : \"\"),"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threeExams,"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExamInvalidArgs() throws Exception {"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExam \u003d helper.generateExamList(e1);"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, singleExam);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(singleExam);"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d Exam.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 d/notADate\", expectedMessage);"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 d/07012018 st/09:00\", expectedMessage);"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 d/32122018 st/09:00\", expectedMessage);"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 st/notATime\", expectedMessage);"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 st/07012018\", expectedMessage);"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 st/2366\", expectedMessage);"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 et/notATime\", expectedMessage);"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 et/07012018\", expectedMessage);"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 et/2366\", expectedMessage);"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_INTERVAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 st/09:00 et/08:00\", expectedMessage);"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d AddExamCommand.MESSAGE_DUPLICATE_EXAM;"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(\"editexam 1 e/%s\", e1.getExamName()), expectedMessage);"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Meg1456": 77,
      "0WN463": 306,
      "micklwl": 259,
      "lucdx": 63,
      "-": 500
    }
  },
  {
    "path": "test/java/seedu/addressbook/logic/PrivilegeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INSUFFICIENT_PRIVILEGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.TestDataHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.CommandResult.MessageType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.Privilege;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.privilege.user.User;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.StorageFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.stubs.StorageStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class PrivilegeTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This tests for Commands that affects or depends on Privilege"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege \u003d new Privilege();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageStub stubFile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile saveFile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        saveFile \u003d new StorageFile(saveFolder.newFile(\"testSaveFile.txt\").getPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        saveFile.save(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Logic logic \u003d new Logic(stubFile, addressBook, examBook, statisticsBook, privilege);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.setData(saveFile, addressBook, logic);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSayNotLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String feedbackFormat \u003d ViewPrivilegeCommand.MESSAGE_NOT_LOGGED_IN"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + ViewPrivilegeCommand.MESSAGE_PRIVILEGE_FORMAT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Basic.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Tutor.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Admin.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSayLoggedIn() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person testPerson \u003d helper.adam();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String feedbackFormat \u003d String.format(ViewPrivilegeCommand.MESSAGE_LOGGED_IN, testPerson.getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + ViewPrivilegeCommand.MESSAGE_PRIVILEGE_FORMAT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(testPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Basic.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Tutor.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Admin.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void assertDefaultPassword() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String defaultPassword \u003d \"default_pw\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), defaultPassword);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilegeInvalidArg() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"raise\", \"raise \", \"raise arg1 arg2\" , \"raise arg1 arg2 arg3\"};"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                RaisePrivilegeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            CommandAssertions.assertCommandBehavior(input, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilegeWrongPassword() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d RaisePrivilegeCommand.MESSAGE_WRONG_PASSWORD;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"raise wrong_password\", expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilegeSuccessDefaultPassword() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String defaultPassword \u003d AddressBook.DEFAULT_MASTER_PASSWORD;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"raise \" + defaultPassword,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(RaisePrivilegeCommand.MESSAGE_SUCCESS, new AdminUser().getPrivilegeLevelAsString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilegeSuccessChangedPassword() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setMasterPassword(\"new_Password\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"raise new_Password\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(RaisePrivilegeCommand.MESSAGE_SUCCESS, new AdminUser().getPrivilegeLevelAsString()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSetPermInvalidDesiredState() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"perm wut\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSetPermSuccess() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"perm true\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(SetPermanentAdminCommand.MESSAGE_SUCCESS, \"\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.assertCommandBehavior(\"perm false\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(SetPermanentAdminCommand.MESSAGE_SUCCESS, \" not\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAdminCommandsInsufficientPrivilege() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"clear\", \"viewall 1\", \"editpw default_pw new_pw\" };"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeTutorCommandsInsufficientPrivilege() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"add Valid Name p/12345 e/valid@e.mail a/valid, address \","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"delete 1\"};"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Asserts that the given command strings cannot be executed using the current privilege level*/"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void assertCommandsInsufficientPrivilege(String[] inputs) throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            CommandAssertions.assertCommandBehavior(input, String.format(MESSAGE_INSUFFICIENT_PRIVILEGE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    privilege.getRequiredPrivilegeAsString(command), privilege.getLevelAsString()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 3,
      "0WN463": 172,
      "micklwl": 1
    }
  },
  {
    "path": "test/java/seedu/addressbook/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static seedu.addressbook.common.Messages.MESSAGE_NO_ARGS_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.TestDataHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.AddAssessmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.AddExamCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.EditExamCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.commands.ExamsListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.commands.ListAssessmentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.commands.ViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.Assessment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test add person command"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add \","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // no phone prefix"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s %s e/%s a/%s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // no email prefix"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s p/%s %s a/%s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // no address prefix"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s p/%s e/%s %s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String addCommandFormatString \u003d \"add %s %s %s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder input \u003d new StringBuilder(convertPersonToAddCommandString(testPerson));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            input.append(\" t/\").append(tag.tagName);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input.toString(), AddCommand.class);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raisePrivilegeCommand_invalidArgs() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"raise\","
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"raise \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RaisePrivilegeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test add exam command"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_invalidArgs() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"addexam\", \"addexam \", \"addexam wrong args format\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no subject name prefix"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s %s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no date prefix"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s %s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no start time prefix"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s %s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no end time prefix"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s st/%s %s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no details prefix"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s st/%s et/%s %s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_invalidExamDataInArgs() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg \u003d \"d/not__numbers\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validDateArg \u003d \"d/\" + Exam.EXAM_DATE_EXAMPLE;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg \u003d \"st/not__numbers\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validStartTimeArg \u003d \"st/\" + Exam.EXAM_START_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg \u003d \"et/not__numbers\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validEndTimeArg \u003d \"et/\" + Exam.EXAM_END_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeIntervalArg \u003d \"et/08:00\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // subject name and details can be any string, so no invalid address"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String addExamCommandFormatString \u003d \"addexam \" + Exam.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" s/\" + Exam.SUBJECT_NAME_EXAMPLE"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" %s %s %s dt/\" + Exam.EXAM_DETAILS_EXAMPLE;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid date"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, invalidDateArg, validStartTimeArg, validEndTimeArg),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid start time"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, invalidStartTimeArg, validEndTimeArg),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid end time"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, validStartTimeArg, invalidEndTimeArg),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid time interval"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, validStartTimeArg,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        invalidEndTimeIntervalArg),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_validExamData_parsedCorrectly() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam testExam \u003d generateTestExam();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final String input \u003d convertExamToAddExamCommandString(testExam);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AddExamCommand result \u003d parseAndAssertCommandType(input, AddExamCommand.class);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(result.getExam(), testExam);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessmentCommand_validAssessmentData_parsedCorrectly() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Assessment testAssessment \u003d generateTestAssessment();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final String input \u003d convertAssessmentToAddAssessmentCommandString(testAssessment);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AddAssessmentCommand result \u003d parseAndAssertCommandType(input, AddAssessmentCommand.class);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertEquals(result.getAssessment(), testAssessment);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void listAssessmentCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String input \u003d \"listassess\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertCommandType(input, ListAssessmentCommand.class);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_noArgs() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deleteassess\", \"deleteassess \" };"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deleteassess notAnumber \", \"deleteassess 8*wh12\", \"deleteassess 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String input \u003d \"deleteassess \" + testIndex;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final DeleteAssessmentCommand result \u003d parseAndAssertCommandType(input, DeleteAssessmentCommand.class);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test edit exam command"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_invalidArgs() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"editexam\", \"editexam \","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                //no index"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"editexam e/%s s/%s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no exam name prefix"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"editexam 1 %s s/%s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String input \u003d \"editexam 1\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_NO_ARGS_FOUND"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, input);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputPrivateChange \u003d { \"editexam 1 p/ok\", \"editexam 1 p/12\", \"editexam 1 p/a\" };"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputPrivateChange);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_indexIsNotSingleNumber() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"editexam notAnumber s/Mathematics st/09:00 et/11:00 dt/Held in MPSH\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 8*wh12 s/Mathematics\","
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 1 2 3 4 5 s/Mathematics\" };"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_numericIndex_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String input \u003d String.format(\"editexam %d e/%s s/%s d/%s st/%s et/%s dt/%s\","
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                testIndex, Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final EditExamCommand result \u003d parseAndAssertCommandType(input, EditExamCommand.class);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(result.getTargetIndex(), testIndex);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void examsListCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String input \u003d \"examslist\";"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertCommandType(input, ExamsListCommand.class);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Person generateTestPerson() throws IllegalValueException {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String phoneField \u003d helper.getPrefix(person.getPhone()) + person.getPhone();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String emailField \u003d helper.getPrefix(person.getEmail()) + person.getEmail();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String addressField \u003d helper.getPrefix(person.getAddress()) + person.getAddress();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder addCommand \u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new StringBuilder(\"add \" + person.getName().fullName + phoneField + emailField + addressField);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addCommand.append(\" t/\").append(tag.tagName);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addCommand.toString();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Exam generateTestExam() throws IllegalValueException {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new Exam(Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.SUBJECT_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_DATE_EXAMPLE,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_END_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_DETAILS_EXAMPLE,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    false"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(\"test exam data should be valid by definition\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static Assessment generateTestAssessment() throws IllegalValueException {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new Assessment(Assessment.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            );"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(\"test assessment data should be valid by definition\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static String convertExamToAddExamCommandString(Exam exam) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examNameField \u003d helper.getExamNamePrefix(exam.isPrivate()) + exam.getExamName();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectNameField \u003d helper.getSubjectNamePrefix() + exam.getSubjectName();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String dateField \u003d helper.getDatePrefix() + exam.getExamDate();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTimeField \u003d helper.getStartTimePrefix()"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + exam.getExamStartTime();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTimeField \u003d helper.getEndTimePrefix()"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + exam.getExamEndTime();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String detailsField \u003d helper.getDetailsPrefix() + exam.getExamDetails();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String addExamCommand \u003d \"addexam \" + examNameField"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + subjectNameField + dateField + startTimeField"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + endTimeField + detailsField;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return addExamCommand;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static String convertAssessmentToAddAssessmentCommandString(Assessment assessment) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examNameField \u003d assessment.getExamName();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String addAssessmentCommand \u003d \"addassess \" + examNameField;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return addAssessmentCommand;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 64,
      "0WN463": 57,
      "micklwl": 180,
      "-": 272
    }
  },
  {
    "path": "test/java/seedu/addressbook/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static seedu.addressbook.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.account.Account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.person.Exam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.addressbook.data.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String VALID_EXAM_DATA_PATH \u003d \"ValidExamData.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static final String VALID_STATISTICS_DATA_PATH \u003d \"ValidStatisticsData.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(null, TEST_DATA_FOLDER + \"/\" + \"examBook.txt\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + \"statisticsBook.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_nullExamFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"addressBook.txt\", null, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_nullBothFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(null, null, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructor_defaultPath() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d new StorageFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertNotNull(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_noTxtAddressBookExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\", TEST_DATA_FOLDER + \"/\" + \"exams.txt\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + \"statistics.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_noTxtExamBookExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"addressbook.txt\", TEST_DATA_FOLDER + \"/\" + \"InvalidExamfileName\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + \"InvalidStatisticsfileName.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_invalidAccountFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidAccountData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"InvalidStatistics.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void loadExam_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // The file contains valid xml data, but does not match the ExamBook class"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getStorage(\"ValidData.txt\", \"InvalidExamData.txt\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.loadExam();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void loadStatistics_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // The file contains valid xml data, but does not match the StatisticsBook class"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getStorage(\"NotValidData.txt\", \"NotValidExamData.txt\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"notValidStatisticsData.txt\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.loadStatistics();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        HashMap\u003cString, AddressBook\u003e inputToExpectedOutputs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.put(\"ValidDataWithNewPasswordLuc.txt\", getTestAddressBook(false, false));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.put(\"ValidDataWithDefaultPasswordLuc.txt\", getTestAddressBook(true, false));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.put(\"ValidEmptyData.txt\", AddressBook.empty());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.put(\"ValidDataWithAccount.txt\", getTestAddressBook(true, true));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.put(\"ValidDataWithoutPasswordLuc.txt\", getTestAddressBook(true, false));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (HashMap.Entry\u003cString, AddressBook\u003e inputToExpected : inputToExpectedOutputs.entrySet()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final AddressBook actual \u003d getStorage(inputToExpected.getKey()).load();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final AddressBook expected \u003d inputToExpected.getValue();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: overwrite equals method in AddressBook class and replace with equals method below"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(actual.getAllPersons(), expected.getAllPersons());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(actual.getMasterPassword(), expected.getMasterPassword());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_validFormatIsPerm() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook actual \u003d getStorage(\"ValidDataWithIsPerm.txt\").load();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // TODO: overwrite equals method in ExamBook class and replace with equals method below"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(actual.getAllPersons(), expected.getAllPersons());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(actual.isPermAdmin());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void loadExam_validFormat() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ExamBook actual \u003d getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\").loadExam();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d getTestExamBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // TODO: overwrite equals method in ExamBook class and replace with equals method below"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(actual.getAllExam(), expected.getAllExam());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void save_nullExamBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.saveExam(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void save_nullStatisticsBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.saveStatistics(null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook(true, false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d getTestExamBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook sb \u003d getTestStatisticsBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.saveExam(eb);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.saveStatistics(sb);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Checks that the password and isPerm is saved as a new field"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithDefaultPasswordLuc.txt\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithNewPasswordLuc.txt\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithNewPasswordLuc.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab \u003d getTestAddressBook(true, true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAccount.txt\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void save_validExamBook() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d getTestExamBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.saveExam(eb);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertExamsFilesEqual(storage, getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Asserts that the contents of two exams files are the same."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void assertExamsFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPathExam()), Paths.get(sf2.getPathExam()));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StorageFile getStorage(String fileName, String examFileName, String statisticsFileName) throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName, TEST_DATA_FOLDER + \"/\" + examFileName,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + statisticsFileName);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName, VALID_EXAM_DATA_PATH, VALID_STATISTICS_DATA_PATH);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String tempExam \u003d testFolder.getRoot().getPath() + \"/\" + \"tempExam.txt\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String tempStatistics \u003d testFolder.getRoot().getPath() + \"/\" + \"tempStatistics.txt\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\", tempExam, tempStatistics);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return getTestAddressBook(false, false);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook getTestAddressBook(boolean isUsingDefaultPassword, boolean hasAccount) throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person john \u003d new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (hasAccount) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            john.setAccount(new Account(\"user\", \"pw\", \"Admin\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab.addPerson(john);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isUsingDefaultPassword) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            ab.setMasterPassword(\"newPassword\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook getTestExamBook() throws Exception {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d new ExamBook();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        eb.addExam(new Exam(\"Math Midterms\", \"Mathematics\", \"01-12-2018\", \"09:00\", \"10:00\", \"Held in MPSH\", false));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        eb.addExam(new Exam(\"English Midterms\", \"English\", \"02-12-2018\", \"09:00\", \"10:00\", \"Held in MPSH\", false));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook getTestStatisticsBook() throws Exception {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook sb \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        sb.addStatistic(new AssignmentStatistics(\"Mathematics\", \"Midterms\", \"John\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"72\", \"102\", \"4\", \"98\", \"95 32\", false));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        sb.addStatistic(new AssignmentStatistics(\"English\", \"final\", \"Mark\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"83\", \"71\", \"0\", \"70\", \"90 26\", true));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 53,
      "0WN463": 72,
      "micklwl": 55,
      "lucdx": 4,
      "-": 106
    }
  },
  {
    "path": "test/java/seedu/addressbook/stubs/StorageStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package seedu.addressbook.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.data.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import seedu.addressbook.data.ExamBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import seedu.addressbook.data.StatisticsBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import seedu.addressbook.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Class used to apply DI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String pathExam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String pathStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StorageStub(String filePath, String filePathExam, String filePathStatistics) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        pathExam \u003d filePathExam;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        pathStatistics \u003d filePathStatistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void save(AddressBook addressBook){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //this is blank on purpose"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam(ExamBook examBook){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //this is blank on purpose"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void saveStatistics(StatisticsBook statisticsBook){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //this is blank on purpose"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook load() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook loadExam() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPathExam() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathExam;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook loadStatistics() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPathStatistics() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return pathStatistics;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 17,
      "0WN463": 24,
      "micklwl": 18
    }
  },
  {
    "path": "test/java/seedu/addressbook/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.addressbook.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** **/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "-": 19
    }
  }
]
