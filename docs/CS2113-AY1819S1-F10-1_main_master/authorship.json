[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d ClassRepo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:imagesDir: docs/images]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-F10-1/main[image:https://travis-ci.org/CS2113-AY1819S1-F10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/e1ed6200448148c6a6c8d955ee177c64[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/0WN463/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2113-AY1819S1-F10-1/main\u0026utm_campaign\u003dBadge_Grade\"]https://coveralls.io/github/CS2113-AY1819S1-F10-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-F10-1/main/badge.svg[Build Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* This is a CLI (Command Line Interface) Database application *written in OOP fashion*. It has a very basic GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* The application manages and facilitates data entry and viewing for a secondary school database."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Students, tutors and admins can access information with increasing privileges respectively."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* A simple GUI added to replace the Text UI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Appendices added to \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*`5 Key Features` implemented by each \u003c\u003cAboutUs#, team member\u003e\u003e listed below*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Account Authentication."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Attendance Tracking."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Grades Tracking."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Fees Tracking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Exam Tracking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*Useful Links*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* https://cs2113-ay1819s1-f10-1.github.io/main/[Website]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributors"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "The full list of contributors for ClassRepo can be found https://cs2113-ay1819s1-f10-1.github.io/main/AboutUs.html[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This application was adapted from AddressBook-Level 3 by se-edu image:SeEduLogo.png[width \u003d \"20\"] https://github.com/se-edu/addressbook-level3[here]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contact Us"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-F10-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "0WN463": 4,
      "micklwl": 3,
      "lucdx": 14,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t\"formats\": [\"adoc\", \"cs\", \"css\", \"fxml\", \"gradle\", \"html\", \"java\", \"js\", \"json\", \"jsp\", \"md\", \"py\", \"tag\", \"xml\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t\"authors\":"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"githubId\": \"lucdx\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"displayName\": \"LUC...HAO\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"authorNames\": [\"lucdx\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"githubId\": \"Meg1456\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"displayName\": \"MEG...NAN\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"authorNames\": [\"Meg1456\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"githubId\": \"micklwl\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"displayName\": \"MIC...LIN\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"authorNames\": [\"micklwl\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t\t\t\"githubId\": \"meisbokai\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"displayName\": \"NEO...KAI\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t\t\t\"authorNames\": [\"meisbokai\", \"Neow Bo Kai\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t}, "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"githubId\": \"0WN463\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"displayName\": \"NG ... IN\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\t\t\t\"authorNames\": [\"0WN463\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "micklwl": 21,
      "meisbokai": 9
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "mainClassName \u003d \u0027classrepo.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            srcDirs \u003d [\u0027test/java\u0027]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    archiveName \u003d \u0027ClassRepo.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        \u0027site-name\u0027: \u0027ClassRepo\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-F10-1/main\u0027,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027"
      }
    ],
    "authorContributionMap": {
      "0WN463": 70,
      "micklwl": 1,
      "-": 100
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 423
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\"-//Puppy Crawl//DTD Suppressions 1.1//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\"http://checkstyle.sourceforge.net/dtds/suppressions_1_1.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:https://www.comp.nus.edu.sg/templates/t3_nus2015/images/assets/logos/logo.png[NUS-SOC,644,115]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "This project was done for our CS2113T module during AY1819-S1 and our group number is F10-1."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Ng Tek In"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::0wn463.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[https://github.com/0wn463[github]] [\u003c\u003c0wn463#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Managing Pull Requests +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Feature: Privilege and Account"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Mick Lee Wei Lin"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::micklwl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[http://github.com/micklwl[github]] [\u003c\u003cmicklwl#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Role: Bug catcher +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Responsibilities: Managing code tests +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Feature: Exams"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Meghana Narayanan"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::meg1456.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[https://github.com/meg1456[github]] [\u003c\u003cmeg1456#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Role: Deliverables and Deadlines In-charge +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Ensuring work is completed on time +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Tests and Grades"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Neow Bo Kai"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::meisbokai.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[https://github.com/meisbokai[github]] [\u003c\u003cmeisbokai#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Role: Developer + Code Quality Check +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Code Quality +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Attendance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d Lucas Lim"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::lucdx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "{empty}[https://github.com/lucdx[github]] [\u003c\u003clucdx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Role: Documentation and Scribe +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Responsibilities: Coherent documents +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Feature: Fees"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 34,
      "micklwl": 10,
      "lucdx": 15,
      "meisbokai": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-F10-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Email us* : You can also reach us at `tekin [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "micklwl": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d ClassRepo - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F10-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "By: `CS2113T-AY1819S1 Team F10-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialogue first)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click `Open`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Run the `src.classrepo.Main` and try a few commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". \u003c\u003cTesting, Run the tests\u003e\u003e to ensure they all pass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open the `StorageFile` file and check for any code errors"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003djava.xml.bind\u0027 to module compiler options`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. Get some sense of the new features added on from https://github.com/se-edu/addressbook-level3[AddressBook-Level 3] by se-edu by reading \u003c\u003cImplementation\u003e\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[Implementation]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "// tag::Exam[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Exams Feature"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-ExamDiagram]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".Class Diagram of the Exam feature"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::Exam.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There is a master ExamBook which contains all the exams. There are several features the ExamBook offers."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The main features are:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Adding a new exam`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Deleting an exam`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Editing an exam`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Registering a person for an exam`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". `Deregistering a person for an exam`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Changes to the master ExamBook will affect the corresponding exams in the AddressBook. This is done through iterating through the AddressBook to update the change. Changes in the AddressBook will also affect the exams the persons registered for in the ExamBook and hence, for other persons in the AddressBook. This is also done through iterating."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "An Example of how feature 5 - `Registering a person for an exam` works:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". First, the specific exam and person will be identified from the most recent exams and persons listing respectively."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The specific exam and person is then extracted out of the ExamBook and AddressBook respectively."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". A check is performed to ensure the specific person is not already registered for the exam."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". A new exam is created to keep a copy of the original exam."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The exam has its number of exam takers increased by 1."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The exam is added to the specific person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". For the AddressBook, any copies of the original exam are removed and replaced with the new exam."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "This is demonstrated by the following sequence diagram:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-registerPersonDiagram]]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".Sequence Diagram of registering a person for an exam with no errors occurring"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::RegisterExam_Sequence_Diagram.png[width\u003d\"1200\"]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the exam data are being synchronised between the AddressBook and ExamBook"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (current choice):** Each time there is a change in the field of an Exam, there has to be iteration through the whole AddressBook or ExamBook to update them."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Less space is needed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: This can waste some time if no changes need to be made for example."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Store the persons registered for an exam for each exam."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: This makes it faster to update any changes in both AddressBook and ExamBook if needed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: More data is duplicated and stored in both AddressBook and ExamBook."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the exam data are being updated"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Each time there is a change in a field of an Exam, a new Exam is created with the new details and added into the ExamBook and the old Exam is deleted from the ExamBook."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: To enable good synchronisation between the AddressBook and ExamBook as the old hash key is removed and a new hash key is added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Temporary increase in space for the object created during the method."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Edit the original exam directly."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Easy access to set values."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: To check if an exam exists for a person, there needs to be iteration and checks using the equals() method due to different hashing, increasing time."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Exam equality"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** The current equals() method does not check for full equality."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: This is used when there is not a need to check for full equality, such as when adding a new exam to the ExamBook."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Another method is needed to check for full equality."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Have the current equals() method check for full equality, with no extra methods."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Fewer methods and easier to understand implementation."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Duplicate exams can be added, especially after modification of an exam in the ExamBook."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the exam commands"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Exams are stored in a set under each Person object in the AddressBook but stored as a list in the ExamBook."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: In the Exambook, it is required to access an exam through an index to delete and edit, hence list is better. In the AddressBook, exams are only to be used for viewing and accessed to check for the value. It takes O(1) time to check for existence and remove and add."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Exams stored under each Person in the AddressBook cannot be sorted."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 2:** Exams are stored as a list in both ExamBook and AddressBook."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Exams stored under each Person in the AddressBook can be sorted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: It takes O(n) time (longer time) to check if a Person has a same Exam with the Exam to be updated."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of ExamBook"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* **Alternative 1 (current choice):** Exams are stored in a separate txt file from AddressBook"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: This allows for clarity and easy access to find and see exams in raw XML format."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Extra storage file and hence methods and file paths are needed, this may be confusing and cause much repetition of code."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Exams are stored in the same data file as AddressBook."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Pros: Only 1 storage file is needed. Less repetition and variables are needed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Cons: Might be harder for the user to see exams in raw XML format as everything is stored together."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "// end::Exam[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// tag::privilege[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Privilege/Account Feature"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The Privilege feature aims to only restrict the user\u0027s interaction to their allowed commands, while the Account feature provides a means for the user to authenticate himself/herself to access more commands."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "---"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The figure below shows the class diagram describing the implementation of the Privilege/Account feature."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-PrivilegeDiagram]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Class Diagram of the Privilege Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::PrivilegeClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *Logic* is assigned to one *Privilege* object at all times. *Privilege* contains a *User* (specified by the *PrivilegeLevel* enum) and a *Person* (referred to as `myPerson`). +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* The *User* interface describes the different \u003c\u003cprivilege-level, *Privilege* level\u003e\u003e an user can have, which is implemented by *BasicUser*, *TutorUser* and *AdminUser*. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *BasicUser* is the class with the lowest access level, and the ancestor to other 2 *User* classes. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* To create an increasing level of access, each *User* of a higher level inherits from the successively lower one. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *User* levels have their own list of new commands they can run, which is appended to the list inherited from their parent. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* *Account* class, which contains its respective *Privilege* object as well as login details, assigns a *Privilege* level to a *Person*. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "An example of how `logging into an account` works:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". First, the *Command* will retrieve the *Person* with the specified username, which is gotten from *AddressBook* who receives it from *UniquePersonList*."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". The *Command* then validates that the specified password matches the password the *Account* belonging to the retrieved person."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". If the password is correct, the *Command* will update the *Privilege* level(`user`) and its *Person*(`myPerson`) to match that of the *Account*."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Finally, the *Command* retrieve the *Name* of the *Person* in a string format to be printed as part of the feedback message."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Step 3 is illustrated in the Object Diagram below."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-PrivilegeObjectDiagram]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".How switching Privilege is implemented (Object Diagram)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::PrivilegeObjectDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "---"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The Sequence Diagram below gives an overview of the process involved in logging into an *Account*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[fig-LoginSequenceDiagram]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Sequence Diagram for Login Command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Login_Sequence_Diagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to define a privilege level of Privilege"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Instantiate *User* objects of the different access level. *Privilege* contains an enum *UserType* which point to each of these instantiated objects."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Allow us to make use of inheritance to organize the list (higher access level *User\u0027s* list of allowed *Commands* will always be a superset of that of a lower access level). +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The usage of enums also allows us to keep a reference to the created *User* object, which allows us to point back to these object if need be, rather than having to instantiate new ones each time."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Requires the use of *User* class to represent the different access levels"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Use an enum to indicate the current access level. List of allowed *Commands* will be generated base on the value of this enum."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Does not require a separate class to represent the different *Privilege* levels."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to maintain the list of allowed *Commands*."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Use a String to determine the *Privilege* level."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to implement and parse."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Very prone to undetected bugs, like misspelling the *Privilege* levels."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to define the required *Privilege* level of *Commands*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Each *User* holds a list of *Commands* they can run"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to maintain the list of available *Commands* for a given *User*."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to find the required *Privilege* level a *Command*, as it requires looping through the list to find the presence of the given *Command*."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Each *Command* knows what access level is required to run it"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Easy to find what access level a *Command* requires"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to see the *Commands* available to a given *User* can run, thus making it hard to organize the *Commands* by their required access level."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Have both 1 and 2"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Doing both the above operations become easy"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Difficult to maintain both information. The required *Privilege* level for *Commands* will be stored in 2 separate locations and needs to be in sync."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the *Privilege* of *Logic* when logging into an *Account*"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** The *Privilege* object attached to *Logic* will copy the *User* and the *Person* attached to the given *Account* object, into its own variables."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Does not require the *Command* to interact with *Logic*, thus reducing coupling."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: A bit more awkward solution than the Alternative 2"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Make *Logic\u0027s* variable to point to the new *Privilege* object inside of Account."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Quick to implement."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Has a higher level of coupling compared to Alternative 1. Also, would require storing or instantiating a default *Privilege* object and making a *Logic* point to this new object if *Logout Command* were to be called."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Default required access levels for *Commands*"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** Required *Privilege* level is set to Admin by default"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: If a developer forgets to assign a required *Privilege* level to a *Command*, it will to still be functional."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: May mask the fact that the *Command* has the unintended access level of Admin, which is a minor drawback."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Enforce all *Commands* to be assigned an access level"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Forces developers to be deliberate with their access level assigned to *Commands*."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Program will fail to integrate if any of the developers forgot to assign an access level to their newly developed *Command*."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Who throws InsufficientPrivilege Exception"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 1 (current choice):** *Logic* throws the Exception"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: It is a common starting point of commands, so it is easy to implement it to throw the Exception"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Blurs the responsibility of *Commands* being the one throwing Exceptions"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 2:** Each *Command* checks the *Privilege* level during execute()"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Keeps to the responsibility of *Commands* being the one to throw the Exception."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Requires backdating all *Commands* to include this function in their execute(). Also prone to errors as a developer may forget to call this function in their execute() of their newly developed *Command*."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **Alternative 3:** Have a function that checks the *Privilege* level in parent command that is called during execute()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Pros: Same as **Alternative 2**."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Cons: Same as **Alternative 2**, but instead of using individual functions, we are repeatedly using the inherited function instead"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// end::privilege[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// tag::Grades[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Grades Feature"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "There is a master StatisticsBook which contains all the statistics for various exams. There is also a list of assessments"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "and the grades for these assessments being stored in the AddressBook. The current set of commands include:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Adding a new assessment`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Listing all assessments`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Deleting an assessment`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Adding grades for a student`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Viewing all grades for a student`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Deleting a specific grade for a student`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Adding statistics for an assessment`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Listing all statistics`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". `Deleting a statistic`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "This is the class diagram for the assessments, grades and statistics combined:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-AssessmentDiagram]]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ".Class Diagram"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "image::AssessmentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". A list of unique assessments can be stored in the AddressBook."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". Each assessment object contains a Hash Map, with Person as the Key and Grades as the Value. Hence, the grades of all"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "students for a particular assessment will be stored together in the same HashMap."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". Each person object (or student) can have a list of assessments and respective grades under it. This makes sense"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "logically since a student will have multiple assessments throughout the school year."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Statistics can be added for an existing assessment. The grades stored in the HasHMap will be used to calculate various"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "stats such as average score, total exam takers, max score and min score."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". This list of statistics is stored in the statisticsbook."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "An Example of how feature 2 - `Adding a new assessment to the AddressBook` works:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". The user (teacher/ admin) will be able to use the \u0027addassess\u0027 command to add a new assessment."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". This assessment will only be added to the AddressBook if it is not already present. i.e. check for duplicate assessments"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "is done."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ". These assessments reflect the exams/homework of the school in general. This list of assessments can then be used to add"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "  grades to a particular student."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "This is demonstrated by the following sequence diagram:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[fig-AddAssessmentSeqDiagram]]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ".Sequence Diagram of adding a new assessment"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "image::Assessment_Seq_Diagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: \u0027Assessment\u0027 and \u0027Grades\u0027 as separate classes"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 1 (current choice):** Assessments and Grades are created as two separate classes. Assessment class stores the grades of all students for that assessment in a HashMap, where the Person (or student) is the key."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Better design in terms of OOP. Allows easier calculation of statistics per assessment as you can simply loop through all the grades. It is also a good model of the real world where all grades for an assessment will be stored together."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: This is a little more tedious in terms of coding."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 2:** The Assessment and Grades are combined into a single class with different parameters to take in the exam name and grade respectively."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: - Storage of the data becomes a little easier and you can just store a list of grades added to each person."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Cannot view the list of assessments separately. This architecture does not make sense in terms of modelling how grades are stored in the real world."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store grades"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 1 (current choice):** The grades are stored using a Map data structure under Assessment class"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: Allows easy reference to person class."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Cannot sort/ order the entries if required."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 2:** The grades are stored using a \u0027List\u0027 data structure under Assessment class"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: Can sort the grades alphabetically if required."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Difficult to link grades to person."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Creation and Storage of Statistics Book"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 1 (current choice):** A separate Statistics Book is created to store the statistics of all assessments. Also, these statistics are stored in a separate txt file (statistics.txt) from AddressBook"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: These assessment statistics have no direct link to the person object. It is a separate set of information accessible to all users (students, teachers and admin). Hence, a separate Statistics Book provides increased clarity and makes sense in terms of the end-usage. This also gives easy access to find and see statistics in raw XML format."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Using an extra storage file implies that additional methods and file paths are needed. Makes code lengthier and repetitive."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 2:** Store statistics in AddressBook itself."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: Everything is condensed and can be found in the same spot. Also, only one storage file would be needed."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: It is messy and confusing in terms of implementation - Unrelated data is being stored together."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Automatic calculation of statistics"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (current choice):** A fixed set of statistics (average score, the total number of exam takers, max score and min score) are automatically calculated inside the application itself."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Reduces human effort. Makes the process of creating a statistic easier for the user as they would not have to use any external tools like Excel to do this."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Only the statistics parameters currently built into the app can be added. If the user wants to add any other parameter like pass rate, then it is currently not possible."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 2:** The user manually calculates statistics using given data by hand and enters it in the app to store."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: The user can choose to leave some field blank if wanted."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Extremely tedious. Against the whole point of digitizing the school management as manual paperwork is still involved."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: XML Storage of Assessments and Grades"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 1 (current choice):** Two concurrent lists are used to store the person index (as per latest person list) and respective grades for each assessment."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: Since each student only has one grade per assessment, it is practical to store them as lists. Essentially, the keys of the hash map (in index form) and the values are stored as two separate lists. The corresponding pairs can be obtained by reading the entries at the same index in both lists."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: This is an adaptation of the HashMap used to store grades in the code."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* **Alternative 2:** Store the grades as a list of pairs (person index and grade value) for each assessment"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Pros: Storage is more coherent."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** Cons: Code is lengthier and more strenuous to write."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// end::Grades[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lucdx"
        },
        "content": "// tag::Fees[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d Fees Feature"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[[fig-FeesDiagram]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lucdx"
        },
        "content": ".Class Diagram of Fees"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::FeesClassDiag.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Fees are an additional field to every `Person` object:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". Each Person will have a Fees object"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". Fees contain both a String value as well as a String duedate"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Users can thus check the Fees of a particular person, or list out all the fees of the Persons in the AddressBook"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lucdx"
        },
        "content": "An attribute under the Person class is initialised when a Person is added to the AddressBook. This attribute holds 2 Strings, one being the monetary value of"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lucdx"
        },
        "content": "the fee and the other being the duedate for that respective fee. The current set of commands include:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". `Editing a Fee`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". `Paying a Fee in full`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". `Viewing Fee of a Person`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". `Listing all Fees`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". `Listing all Due Fees`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lucdx"
        },
        "content": "An Example of how command 1 - `Editing the Fee of a Person` works:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". The admin will be able to use the \u0027editfees\u0027 command to add a new fee to the Person."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lucdx"
        },
        "content": ". The existing fee with its date will be replaced by this new value in the Person object in the AddressBook."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". The updated fees will then be stored in the AddressBook and will be automatically private, only viewable by the admin and tutors."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lucdx"
        },
        "content": "This is shown in the diagram below."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[[fig-EditFeesSequenceDiagram]]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lucdx"
        },
        "content": ".Sequence Diagram of EditFeesCommand"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lucdx"
        },
        "content": "image::EditFeesSequenceDiag.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to define a Fee for each Person"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 1 (current choice):** Instantiate Fee attribute under each Person created in the Person Class."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Allow us to skip the need for another data Class to be saved into any of the storage files, therefore being more convenient and reducing the number of files and Books. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: May get messy with more data manipulation of the Fees attribute when printing/sorting."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Use a separate date file \u0027FeesBook\u0027 to keep track of each Person and their respective fees."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Data independency and hence no conflict during data manipulation."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Cluttered as there may be too many data Books just to track an attribute."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 3:** A compulsory attribute under Person Class hence occupying a data field in the input for AddPersonCommand."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Easy to implement and parse."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Input for Add Command would be too long as it will have too many data entry points."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Paying a fee for a Person"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 1 (current choice):** Separate command for Admin to indicate a Person to have paid fees fully."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Convenient for admins to control Fees data of each Person. +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: May seem redundant for 2 Commands to change the attributes of Fees."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 2:** Using EditFeesCommand to indicate the payment of Fees when edited back to 0 value."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Lesser commands in the Fees feature, therefore lesser clutter."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Counterintuitive as Admin would have to manually edit values to be \"0.00\"."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to List fees of everyone"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 1 (current choice):** Shallow copies the internalList of ReadOnlyPerson, sorts the copy with a custom comparator and prints the list,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lucdx"
        },
        "content": "showing only name and fees."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Allows for easy sorting and does not manipulate the date in the original internalList."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Does not allow for any data manipulation such as omitting any Person"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 2:** Looping through internalList and printing every name and respective Fee."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Unable to be sorted by the date dues of the Fees of each Person."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Having another ListDueFeesCommand"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 1 (current choice):** Having another Command which only shows the people that have Fees that are due with respect to"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lucdx"
        },
        "content": "the current system date."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Clearer presentation of data and specific Persons involved. Ability to add \"feesdue\" tag to only the people shown."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: May seem redundant as these people already appear at the top of ListFeesCommand."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 2:** Merging it with ListFeesCommand, therefore only have one List Command with respect to Fees."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Less clutter of code."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: Inability to show the list of Fees of the Persons whose Fees are not yet due. Restricted in presenting data."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using ViewFeesCommand with respect to INDEX"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (current choice):** Follows the other ViewCommands with respect to the last INDEX presented following any List Command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: Coherent code template as all ViewCommands follow the INDEXED structure. Ability to be flexible depending on which List Command was"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lucdx"
        },
        "content": "called beforehand."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: May not seem intuitive to view Fee of a specific Person if User only knows Name of the Person, therefore leading to use of the Find"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Command first."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* **Alternative 2:** Using another parameter such as Name of the Person, instead of INDEX"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Pros: More intuitive to layman Users."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Cons: There may be Persons with identical names, thus resulting in conflicts in ViewCommand."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lucdx"
        },
        "content": "// end::Fees[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "// tag::attendance[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[[attendance]]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Attendance Feature"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[[fig-AttendanceDiagram]]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".Class Diagram of the Attendance feature"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "image::ClassDiagram_Attendance.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[[fig-AttendanceDiagramWithMethods]]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".Class Diagram that links from UniquePersonList to Attendance object, including methods"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "image::ClassDiagram_Attendance_with_Methods.png[width\u003d\u0027800\u0027]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "The attendance field is an additional field to every `Person` object:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Each `Person` will have an `Attendance` object"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Each `Attendance` object will contain a Hashmap, which will store the attendance of each person by keying each String `date` to a boolean `isPresent`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". `UniquePersonList` will contain 2 lists, containing a list of people who are present or absent for each particular date."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Users can thus check the attendance of a particular person, or for a particular date."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "The AddressBook contains the attendance of each person for each date that his/her attendance is taken. The current set of commands include:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". `Updating a person\u0027s attendance`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". `Replacing a person\u0027s attendance`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". `Viewing of a person\u0027s attendance`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". `Viewing of present people on a particular date`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "An example of how feature 1 - `Updating a person\u0027s attendance` works:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". The user (teacher/ admin) will be able to use the \u0027attendance\u0027 command to update the attendance of a particular person (student)."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". The specific person is extracted from the AddressBook."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". A check is performed to check if the person already has his/her attendance taken."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". If the attendance has already been taken, the user will be prompted to use another command `replaceAtten` to replace the attendance."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". If the attendance has yet to be taken, the attendance of the specified person for the specified date will be taken as either \u0027present\u0027 or \u0027absent\u0027."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store attendance for each person"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (Current choice):** Each person has a hashmap that stores the date to the attendance."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Hashmaps allows more efficient checking of duplicate attendance (get() method has a complexity of O(1)."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Values and Keys in hashmap are not sorted."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Each person has a list of strings containing the date and attendance."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: A list of strings will allow easier storage and viewing of the data"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: List or ArrayList will require O(n) time to check for duplicates"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: A single string will not allow handling of data separately"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 3:** Each person has a list of pairs containing date and attendance."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Pairing of date to attendance ensures that the checking of attendance requires at most O(n) time, but minimally O(1)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Usage of pairs in java will require an extra class or an external library, which is unnecessary"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to check if attendance has duplicate"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (Current choice):** Use a boolean to check if there is a duplicate date in the hashmap."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Booleans only have 2 value, and thus there is no need to define a string with a proper variable name"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Booleans are fixed as true and false, thus needed additional code to translate the result into a string so that the user can understand the results easily."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Use a separate class, \u0027hasDuplicate\u0027 to check for duplicate date"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: An additional class means that the code will be more encapsulated, fulfilling the purpose of OOP."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Additional code will be required to create the additional class"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to differentiate between updating and replacing a person\u0027s attendance"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (Current choice):** Using an additional parameter (Boolean overWrite) that is fixed in the command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: No confusion for the user since the parameter to overwrite is fixed."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: THere is no need to have 2 separate methods in the Attendance object as both updating and replacing of attendance has very similar functions."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: There is a need to check for an additional parameter in the same method, which may lengthen the code and cause minor \u0027arrowhead\u0027 coding."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Treat the 2 commands as 2 completely separate commands and execute them individually."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: The 2 commands will each be short, simple and easy to understand."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: There will be 2 methods with extremely similar functions, which is redundant."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 3:** Have the user input an additional parameter (Boolean overWrite) if they want to overwrite the current data"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Similar to alternative 1, having the user input an additional parameter and only having 1 method in the Attendance object can reduce the need to have unnecessary duplicates in the code."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: An additional parameter will require a change in the parser."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store data in XML, addressbook.txt"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (Current choice):** Use 2 list to store a list of dates and a list of absent/present"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Simple implementation, and utilizes the fact that each date can only have either present/absent. Iterating through the map to generate the 2 lists will thus ensure that the data is in order"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: In the XML format, data will be stored as 2 separate lists, which may not be as user-friendly to edit directly."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2:** Use a list of pairs, Pair \u003cString Date, Boolean isPresent\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Only requires 1 single list to store the data of the entire map."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Such implementation will require a Pair object, which will require additional methods and classes, thus requiring longer code."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 3:** Convert Hashmap to XML directly"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Direct transfer of data will thus require less memory space to store the same data."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: A Hashmap to XML converter will require either a very long code (unnecessary for only 1 map), or requires the import of an external library."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Coming in v2.0"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: : How to implement `multiAtten` Command"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 1 (Most likely choice):** `multiAtten` command calls the `attendance` command multiple times"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Reduce the need for repeated code since the multiAtten command is very similar to attendance command."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Simpler to implement when the input is 0 as there is no need to catch index 0 since index 0 will not exist in the UniquePersonList."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Increase in coupling as a change in `attendance` command will cause `multiAtten` command to change."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* **Alternative 2 (Unlikely choice):** Reimplement the command as a brand new command"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: Cleaner codes"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Pros: A brand new implementation would allow for future upgrades"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Cons: Lengthier and repeated code"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "// end::attendance[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting the document to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in web pages."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "0WN463"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "0WN463"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Modifying the template files in the link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "0WN463"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We have 3 types of test:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "0WN463"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "micklwl"
        },
        "content": "e.g. `classrepo.commons.UtilsTest`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "0WN463"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `StorageFileTest`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "..  Hybrids of unit and integration tests. These tests are checking multiple code units as well as how they are connected together. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `LogicTest`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "0WN463"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "When a pull request has changed to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Update the version number in link:{repoURL}/src/seedu/addressbook/Main.java[`Main.java`]."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "0WN463"
        },
        "content": "A project often depends on third-party libraries. For example, AddressBook depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "0WN463"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "0WN463"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Target user*: +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Students, teachers and staff of Secondary Schools. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* differences on how each group may interact with the system"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Click to Expand"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"10%, 10%, 30%, 50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |user |login to my account |access my account"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |user |log out of my account |other people cannot use my account after logging out"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |first admin |raise my privilege to admin |have the initial privilege to access restricted commands"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |add a new person |"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* * *` |admin |change the master password |have a password that is more suitable/easier to remember"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|`* * *` |admin |add accounts to people |other people can have an account to log in to"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|`* * *` |admin |delete accounts from people |remove the account from people who do not need it anymore"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |add a new exam |"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |delete an exam |remove entries that I no longer need"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |edit an exam |update the details of exam entries"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |admin |hide \u003c\u003cprivate-exam,private exams\u003e\u003e |not reveal to students the details before they are finalised"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |tutor/admin |register a user for an exam|allow the user to know of the exam and keep track of the number of exam-takers"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |tutor/admin |deregister a user for an exam|remove entries that I made wrongly or no longer need"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* * *` |tutor/admin |view the lists of exams|manage the exams"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|`* * *` |tutor/admin |add a new assessments |keep track of all assessments conducted in the semester"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|`* * *` |student/tutor/admin |view a list of all assessments|know about upcoming assessments and have a record of all past ones as well"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|`* * *` |tutor/admin |add grades to a student for a particular assessment |keep track of all grades and update student about their performance"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|`* * *` |tutor/admin |add a new statistic |view general performance of students in assessments"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|`* * *` |student/tutor/admin |view a list of all statistics|know about performance of students in school examinations"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* *` |user |view my privilege |know what commands I have access to"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`* *` |user |view my own details |know my details"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|`* *` |student |view my exams |know details of the exams I am going to take"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`*` |user |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|`*` |user |sort exams by a specified field |locate an exam easily"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|`*` |tutor | mark my student(s)s\u0027 attendance | keep track of their attendance and submit to the school"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|`*` |tutor | edit my student(s)\u0027s attendance | correct any mistakes or make changes if any"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|`*` |tutor | view my student(s)\u0027 attendance | review and analyse my student(s)\u0027s attendance to see if any of them require help in their work"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Click to Expand"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "micklwl"
        },
        "content": "(For all use cases below, the *System* is the `ClassRepo` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actors: Tutor, Admin"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to add person."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo requests the details of the person to add."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User enters the detail of the person."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo adds the person."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The details entered is of an invalid format. +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends. +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. The person to add already exists in ClassRepo. +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actors: Tutor, Admin"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to delete a specific person in the list."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo deletes the person."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  ClassRepo checks for all the exams the person is registered for and updates the number of exam takers in the ExamBook."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo updates the exam details for all persons in the AddressBook registered for the exams."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid. +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Add exam"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to add exam."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo requests the details of the exam to add."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User enters the details of the exam."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo adds the exam in the ExamBook."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The details entered is of an invalid format. +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. The exam to add already exists in ClassRepo. +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Delete exam"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e "
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to delete a specific exam in the list."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo deletes the exam in the ExamBook."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  ClassRepo deletes the exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid. +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit exam"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e "
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to edit a specific exam in the list."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo requests the details of the exam to edit."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5.  ClassRepo edits the exam in the ExamBook."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "7.  ClassRepo shows an updated list of exams in the ExamBook."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid. +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The details entered is of an invalid format. +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 4a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4b. The exam with the changed details already exists in the ExamBook. +"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 4b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Register for an exam"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to list persons."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "5.  User requests to register a specific person in the person list for a specific exam in the exams list."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the person."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "micklwl"
        },
        "content": "7.  ClassRepo updates the number of exam takers for the specific exam in the ExamBook."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "micklwl"
        },
        "content": "8.  ClassRepo updates the specific exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "9.  ClassRepo shows an updated list of exams of the specified person."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The list is empty. +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5a. The given person index is invalid. +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5b. The given exam index is invalid. +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Deregister for an exam"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User requests to list persons."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "5.  User requests to deregister a specific person in the person list for a specific exam in the exams list."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6.  ClassRepo edits the person."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "micklwl"
        },
        "content": "7.  ClassRepo updates the number of exam takers for the specific exam in the ExamBook."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "micklwl"
        },
        "content": "8.  ClassRepo updates the specific exam for all persons registered for it in the AddressBook."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "9.  ClassRepo shows an updated list of exams of the specified person."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. The list is empty. +"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5a. The given person index is invalid. +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 5b. The given exam index is invalid. +"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing the exams list"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list exams."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of exams."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Use case: View a person\u0027s exams"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows a list of persons."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "3.  User requests to show exams of a specified person in the list."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "4.  ClassRepo shows a list of exams of the specified person."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. User is not a Tutor/Admin and is not logged in. +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 3b. User is logged in as a Student and tries to view the exams of other students. +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 4a. User is logged in as a Student and tries to view his own exams. +"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 4a1. ClassRepo shows a list of his non-private exams. +"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Use case: Add assessment"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1. User requests to add an assessment."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "2. ClassRepo expects the name of the assessment to add."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "3. User enters the name of the assessment."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "4. ClassRepo adds the assessment to the AddressBook."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 3a. The details entered are in an invalid format. +"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 3b. The assessment to add already exists in ClassRepo. +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** 3b1. ClassRepo shows an error message (duplication of assessment). +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing the assessments list"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Student, Tutor, Admin"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1.  User requests to list all assessments."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "2.  ClassRepo displays an indexed list of assessments."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Use case: Add grades for an assessment"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1.  User requests to list persons."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo displays an indexed list of all persons in the AddressBook."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "3.  User requests to list assessments."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo displays an indexed list of all assessments in the AddressBook."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "5.  User requests to add grades to a specific person in the person list for a specific assessment in the assessments list."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "6.  ClassRepo adds the grades to the appropriate person."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 4a. The list is empty. +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 5a. The given person index is invalid. +"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** 5a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 5b. The given assessment index is invalid. +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** 5b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 5c. The given grades value is invalid. +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "** 5b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Use case: Add statistic"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor, Admin"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1. User requests to list assessments."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo displays an indexed list of all assessments in the AddressBook."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "3. User requests to add a statistic for a specific assessment."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "4. ClassRepo calculates statistics for the assessment and adds it to the list"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* 3a. The given assessment index is invalid. +"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing the statistics list"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Student, Tutor, Admin"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1.  User requests to list all statistics."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "2.  ClassRepo displays an indexed list of statistics."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "+"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: View the user\u0027s own details"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "1.  User requests to view his own details +"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows the details of the person associated with the logged-in account"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 1a. User is not logged in +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 1a1. ClassRepo displays an error message. +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Raise privilege to Admin"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "1. User requests to increase his privilege +"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "2. ClassRepo requests authentication password +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "3. User enters password +"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo increases the user\u0027s privileges to Admin"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 1a. The command entered is of an invalid format +"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 1a1. ClassRepo displays an error message. +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. Incorrect password entered +"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Change master password"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. User requests to change the master password"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2. ClassRepo requests the current password"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "3. User enters the current password"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "4. ClassRepo requests the new password"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "5. User enters the new password"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6. ClassRepo changes the password to the new one"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 3a. Incorrect password entered"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 3a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "User case resumes from step 2."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 5a. New password in the invalid format"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 5a1. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "User case resumes from step 4."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 5b1. The new password is the same as the old password +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 5b2. ClassRepo shows an error message +"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "User case resumes from step 4."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Add account to a person"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "1. User requests to list persons +"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo shows a list of persons +"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "3. User requests to add an account to a target person +"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo adds the account to the person"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid. +"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. The account format is invalid. +"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3c. The target person has an existing account. +"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3c1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Delete account"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. User requests to list persons"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo shows a list of persons"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "3. User requests to delete the account belonging to a specific person in the list"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo deletes the account"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 2a. The list is empty. +"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3a. The given index is invalid. +"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. Target person does not have an account. +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Login to an account"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to log in"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo requests username and password"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User enters username and password"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo logs the user into the account"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 3a. User provided the wrong number of arguments +"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3b. No existing account has the given username. +"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* 3c. The password does not match the existing account with the given username. +"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 3c1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* 4a. User is logged in. +"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** 4a1. ClassRepo logs the user out before logging into the new account. +"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: Logout of an account"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. User requests to log out"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo logs the user out of his account"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 2. User is not logged in +"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** 2a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Use case: View your current privilege"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to view his privilege"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo shows the privilege level and the account the user is logged in as"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d Use case: Adding Fees to a Person"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Admin"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1. User requests to list all the students in the address book"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2. ClassRepo shows all the current students in the console"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User requests to edit fees of a student to a certain value"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo shows the new Fees values of the student"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "lucdx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* 1a. The list is empty. +"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** 1a1. ClassRepo shows that the list is empty. +"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* 3a. The person to edit fees for does not exist. +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Use case: Taking attendance for student"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "1. User requests to list people."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "2. ClassRepo shows a list of people."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3. User request to update attendance of person with index x"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4. ClassRepo shows attendance of person with index x is updated"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "5. User requests to change attendance of person with index x"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "6. ClassRepo shows attendance of person with index x is replaced"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 3a. User provided the invalid index. +"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 3b. Person with index x already has attendance. +"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 3b1. ClassRepo shows an error message and suggests to use the replaceAtten command. +"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 5a. User provided the invalid index. +"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 5a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 5b. Person with index x does not have existing attendance. +"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 5b1. ClassRepo shows an error message and suggests to use attendance command. +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing of attendance"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Actor: Tutor"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003c\u003cmss, *MSS*\u003e\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "1.  User requests to view attendance of person with index x"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "2.  ClassRepo shows attendance of person with index x"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "micklwl"
        },
        "content": "3.  User request to view attendances of people for date y"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "micklwl"
        },
        "content": "4.  ClassRepo shows the lists of people who are present and absent for date y"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "+"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 1a. User provided the invalid index. +"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 1a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 3a. User provided the invalid index. +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 3a1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* 4b. User input invalid date. +"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** 4b1. ClassRepo shows an error message. +"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[[private-exam]] Private exam::"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "An exam with details that are not meant to be released to the students yet"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[privilege-level]] Privilege Level::"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Describes the authority of the current user. Interchangeable with the term \"access level\""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[mss]] Main Success Scenario::"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The Main Success Scenario (MSS) describes the most straightforward interaction for a given use case, which assumes that nothing goes wrong."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Given below are instructions to test the app manually. +"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Before reporting bugs, refer to \u003c\u003cUserGuide.adoc#known-issues, Known Issues\u003e\u003e to see the list of known issues that we deemed low priority to fix."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "0WN463"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Loading sample data"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Loading of sample data into the program"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Move the `jar` file into the working directory."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Copy the sample data from the link:{repoURL}/sample_data[GitHub Repo] into the working directory."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Launch the `jar` file. Type `list` into the CLI to confirm that the data is loaded into the system."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The below image shows the different interactable interfaces"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".The different interfaces"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Interface.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Testing Privileges/Accounts"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There are 3 accounts available in the sample data. Avoid modifying them to ensure smooth testing."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[width\u003d\"50%\",cols\u003d\"22%,\u003c20%,\u003c20%,\u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|Person |Username |Password |Privilege"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|Filbert |fil_username |fil_password |Basic"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|Lira |lira_username |lira_password |Tutor"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|John Doe |john_the_admin |pw123 |Admin"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The master password for the `raise` commamd is `default_pw`."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Logging in"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: Not logged in."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `login fil_username fil_password` +"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `viewpri` +"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `viewself` +"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Login is successful. Viewpri/viewself shows correct details on both consoles. +"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Other similar situations to try: Log in as a tutor/admin instead. +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Logging out"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: Logged in/have privilege to relinquish."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `logout` +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `viewpri` +"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `viewself` +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Logout is successful.  Viewpri shows updated details on the output console. Viewself shows error on the status console. + "
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: Not logged in/no privilege to relinquish."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `logout` +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Logout is unsuccessful, as shown in the status console. +"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Raising privilege"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: Not logged in."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `raise default_pw` +"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `viewpri` +"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Raise privilege is successful. Viewpri shows updated privileges. +"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Accessing a command without sufficient privilege level"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Not logged in or logged in as student."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   `delete 1` +"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status console. Output console remains the same. +"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Other similar situations to try: Log in as a tutor instead. +"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Accessing a command with sufficient privilege level"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Privilege is Admin, either by logging in or raising privileges."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: 1st person in the list deleted. Status console shows success message. Output console shows updated list."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   .. Test case: `help` +"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Output console shows the list of runnable commands given the current privilege level."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   "
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Other commands to try: For full list of commands testable, refer to \u003c\u003cUserGuide.adoc#command-summary, Command Summary\u003e\u003e +"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Commands execute only if the privilege level is sufficient."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Deleting an exam"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Deleting an exam while all exams are listed"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all exams using the `listexams` command. Multiple exams in the list. Logged in as admin."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `deleteexam 1` +"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: First exam is deleted from the list. Details of the deleted exam shown in the status console. List in the output console is updated."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: No exam is deleted. Error details are shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other incorrect delete commands to try: `deleteexam`, `deleteexam x` (where x is larger than the list size), `deleteexam a` (where a is not an integer) +"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other similar commands to try: `delete`, `deleteassess` +"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d Adding a duplicate person"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Add a person while it already exists in the AddressBook"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: Logged in as admin."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `add John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney` +"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Contact is added to the list. Details of the added contact shown in the status console. List in the output console is updated."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `add John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney` after the previous test case was performed. +"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: No person is added. Error details are shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other similar commands to try: `addexam`, `addassess` +"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "0WN463"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Registering a person for an exam"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Register a person in the AddressBook for an exam in the ExamBook"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. List all exams using the `listexams` command. Multiple exams in the list. Logged in as tutor/admin."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `regexam 1 1` +"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Exam is added to person. Status console shows success message. Output console displays the exams of person."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `regexam 1 1` after the previous test case was performed. +"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Exam is not added. Error details are shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other similar commands to try: `addassess`, `addstatistics` +"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Deregistering a person for an exam"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Deregister a person in the AddressBook for an exam in the ExamBook"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. List all exams using the `listexams` command. Multiple exams in the list. Logged in as tutor/admin. Have the 1st person in the AddressBook be registered for the 1st exam in the exam book."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `deregexam 1 1` +"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Exam is removed from person. Status console shows success message. Output console displays the exams of person."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `deregexam 1 1` after the previous test case was performed. +"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Exam is not removed. Error details are shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Editing an exam"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Edit an exam in the ExamBook and change its details"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all exams using the `listexams` command. Multiple exams in the list. Logged in as admin."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `editexam 1 d/07-06-2018` +"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Exam is edited. Status console shows success message. Output console displays the updated list of exams."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `editexam 1 p/y` +"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Exam is not edited. Error details are shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Viewing exams as a student"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". View non-private exams in a student account"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Prerequisites: Logged in with a student account of the 1st person in the AddressBook. AddressBook has multiple persons."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `viewexams 1` +"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Status console shows success message. Output console displays the list of non-private exams of the 1st person in the AddressBook."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `viewexams 2` +"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Status console shows error message. Output console remains the same."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Editing fees for a person"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". Editing fees for a person while all persons are listed"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Logged in as admin."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Test case: `editfees 1 34.50 11-12-2018` +"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Fees is updated for person. After the first command, status console shows success message. Output console remains the same."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Test case: `editfees 1 34.540 11-12-2018` +"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Status console shows error message. Output console remains the same."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Other similar situations to try: Enter an invalid date/date format. +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   "
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Adding attendance for a person"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Adding attendance for a person while all persons are listed"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Logged in as tutor/admin."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `attendance 1 d/0 att/1` +"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Attendance is updated for person. Status console shows success message. Output console remains the same."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `attendance 1 d/0 att/1` after the previous test case was performed. +"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Error details shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Replacing attendance for a person"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Updating attendance for a person while all persons are listed"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Logged in as tutor/admin. Attendance was already taken once on same date."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `replaceAtten 1 d/0 att/1` +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Attendance is updated for person. Status console shows success message. Output console remains the same."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Test case: `replaceAtten 1 d/10-10-2018 att/1`. +"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Error details shown in the status console. Output console remains the same."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d Viewing attendance for a person"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ". View the all attendance of a single person"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Logged in as tutor/admin. No attendance for the person has been taken."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Test case: `viewAttenPerson 1` +"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Person has no attendance. Status console shows success message. Output console shows nil and nil."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Logged in as tutor/admin. Attendance for person has been taken. "
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Test case: `viewAttenPerson 1`. +"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "   Expected: Attendance is updated for person. Status console show success message. Output console shows the list of attendance."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Data storage"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Dealing with corrupted data files"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ".. Prerequisites: Run the application at least once to generate the storage files and add in some person\u0027s data."
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Open up `addressbook.txt`."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Edit a field of a person such that it is invalid, eg. the field of `phone` is changed to `notANumber`."
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Run the application again. +"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: The application is unable to be opened. Refer to the `log.txt` in the base folder to check for the error message, which should indicate an error for the phone number."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other similar edits can be made to `exams.txt` and `statistics.txt` to try. +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   "
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Dealing with missing data files"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Prerequisites: Run the application at least once to generate the storage files and add in some person and exam data. Register some persons for some exams."
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Delete `exams.txt`."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Run the application again. +"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: The application is unable to be opened. Refer to the `log.txt` in the base folder to check for the error message, which should indicate an error for missing data."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".. Other similar edits can be made to `addressbook.txt` to try. +"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Expected: Similar to previous.      "
      }
    ],
    "authorContributionMap": {
      "Meg1456": 187,
      "0WN463": 564,
      "micklwl": 481,
      "lucdx": 97,
      "meisbokai": 243,
      "-": 74
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d ClassRepo - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc-title: "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-F10-1/main"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image::Banner.png[450,290]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ClassRepo is database application that is targeted at secondary school users who *prefer to use a desktop app for managing all their school-related information*."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ClassRepo is *optimized for those who prefer to work with a Command Line Interface* (CLI). +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Download the latest `ClassRepo.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ClassRepo application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds, as shown below."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ".UI of ClassRepo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Commands Available"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This sections documents all the commands available to the user:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:Admin.png[16,16] commands require Admin privileges to run +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:Tutor.png[16,16] commands require Tutor privileges to run +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "image:Basic.png[16,16] commands require no privilege to run."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the general commands:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays the list of commands the user can run. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Help is also shown if you enter an incorrect command e.g. `abcd`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// tag::privilege[]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[privilege]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Privilege Commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with privilege:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Raises your privilege level : `raise` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Raises the privilege level to Admin. Requires the master password. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `raise PASSWORD`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The default master password when first deploying ClassRepo is `default_pw`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `raise default_pw` +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Raises your privilege level to Admin."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d See your privilege level : `viewpri` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays your current privilege level as well as the account you are logged in as +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `viewpri`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Change the master password : `editpw` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Changes the master password. Requires the current master password and Admin privileges. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `editpw OLD_PASSWORD NEW_PASSWORD`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Changes the master password to `NEW_PASSWORD`, if the provided `OLD_PASSWORD` is correct."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "It is recommended to change the master password when first deploying ClassRepo."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `editpw default_pw new_pw` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Changes the master password to \"new_pw\"."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Sets default privilege : `perm` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Sets/Unsets the privilege to be Admin when starting a new session. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `perm BOOLEAN`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Enter `BOOLEAN` as `true` to set the default privilege to Admin. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Enter `BOOLEAN` as `false` to set the default privilege to Basic."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This is recommended to be only done on machines that you are certain only administrators of your school have access to."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `raise default_pw` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`perm true` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Sets the default privilege when starting a session to be Admin."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `raise default_pw` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`perm false` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Sets the default privilege when starting a session to be Basic."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// end::privilege[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Person Commands"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with persons in the system:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person: `add` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "items with `...` after them can have multiple instances. Order of parameters is fixed. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Put a `p` before the phone/ email/address prefixes to mark it as `private`. `private` details can only"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "be seen using the `viewall` command. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Persons can have any number of tags (including 0)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `add John Doe p/98765432 e/johnd@gmail.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* `add Betsy Crowe pp/1234567 e/betsycrowe@gmail.com pa/Newgate Prison t/criminal t/friend`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons (simplied view): `list` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This shows only the names of each person in the address book. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "For a more detailed view, refer to \u003c\u003clistall, List (detailed view)\u003e\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[listall]]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons (detailed view) : `listall` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays all persons (showing all non-private details) in the address book as a list with index numbers. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `listall`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Finding all persons containing any keyword in their name: `find` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The search is case sensitive, the order of the keywords does not matter, only the name is searched,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "and persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `John Doe` but not `john`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Returns any persons having names `Betsy`, `Tim`, or `John`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. Irreversible. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The index refers to the index number shown in the most recent person listing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d View non-private details of a person : `view` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the non-private details of the specified person. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view INDEX`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Views the person at the specified `INDEX`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The index refers to the index number shown in the most recent person listing."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`view 2` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 2nd person in the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`view 1` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Views the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d View all details of a person : `viewall` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Displays all details (including private details) of the specified person. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `viewall INDEX`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The index refers to the index number shown in the most recent person listing."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 2` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 2nd person in the address book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "`viewall 1` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Views all details of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d View your own details : `viewself` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Displays the all the details of the user, provided the user is logged in. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `viewself`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// tag::account[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[account]]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Account Commands"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deal with accounts:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Add an account to a person: `addacc` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Adds an account to the target person. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `addacc INDEX USERNAME PASSWORD PRIVILEGE_LEVEL`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Creates an account for the person with INDEX as specified by the last shown person listing. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "USERNAME and PASSWORD will be used for logging in. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "PRIVILEGE_LEVEL can be of type \"Basic\", \"Tutor\" or \"Admin\"."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`addacc 1 JohnDoe1337 P455W0RD Admin` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Adds an account with the username of `JohnDoe1337`, password of `P455W0RD` and privilege level of `Admin`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "to the first person in the list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Delete the account of a person: `deleteacc` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the target person. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `deleteacc INDEX`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the person with INDEX as specified by the last shown list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`deleteacc 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the account of the first person in the list, provided that he has an account."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Login to an account: `login` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Log in to the account with the specified username and password. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `login USERNAME PASSWORD`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logs into the account with the given USERNAME and PASSWORD. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Sets the current privilege level to that of the account."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `login JohnDoe1337 P455W0RD` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Login an account with the username of `JohnDoe1337` and password of `P455W0RD`, provided it exists."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Executing `login` while logged in will log you out before logging into the new account."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Logout of an account: `logout` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logout of the current account. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logout from the currently signed in account. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Also resets the privilege back to the level of a Basic User."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Logs out of the current account, provided there is privilege or account to relinquish."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d Displays the list of people with account: `listacc` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Shows a list of all persons with an account in the address book, showing only names and user type. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Format: `listacc`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": "// end::account[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "micklwl"
        },
        "content": "//tag::Exam[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Exam Commands"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with exam data:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an exam : `addexam` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Adds an exam to the exam book, with the number of takers initialised as `0`. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `addexam [p]e/EXAM_NAME s/SUBJECT_NAME d/EXAM_DATE st/EXAM_START_TIME et/EXAM_END_TIME dt/EXAM_DETAILS`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional. Order of parameters is fixed. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Put a `p` before the exam name prefix to mark the exam as `private`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `addexam e/Math 2018 Finals s/Mathematics d/01-12-2018 st/09:00 et/12:00 dt/At MPSH` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `addexam pe/2017 English Finals Paper 2 s/English d/01-12-2017 st/08:00 et/10:00 dt/No Pencils Allowed`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all exams : `listexams` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Shows a list of all exams in the exam book. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `listexams`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an exam : `deleteexam` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the specified exam from the exam book. Irreversible. Persons registered for the corresponding exam will have the exam deleted as well. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `deleteexam INDEX`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the exam at the specified `INDEX`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listexams` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deleteexam 2` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deletes the 2nd exam in the exam book."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an exam : `editexam` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Edits the specified exam from the exam book. Persons registered for the corresponding exam will have the exam details updated as well. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `editexam INDEX [p/PRIVATE_STATUS] [e/EXAM_NAME] [s/SUBJECT_NAME] [d/EXAM_DATE] [st/EXAM_START_TIME] [et/EXAM_END_TIME] [dt/EXAM_DETAILS]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Edits the exam at the specified `INDEX`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Words in `UPPER_CASE` are the parameters, items in `SQUARE_BRACKETS` are optional. Order of parameters is fixed. At least 1 item in `SQUARE_BRACKETS` must be present."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "micklwl"
        },
        "content": "PRIVATE_STATUS is denoted by `y` for private and `n` for non-private."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listexams` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`editexam 2 p/y e/English 2018 Finals dt/In MPSH`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listexams` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`editexam 1 dt/Cancelled`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Registering for an exam : `regexam` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers a specified person for a specified exam. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `regexam PERSON_INDEX EXAM_INDEX`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers the person at the specified `PERSON_INDEX` for the exam at the specified `EXAM_INDEX`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The `PERSON_INDEX` refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The `EXAM_INDEX` refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Changes to an exam in the exam book will change the corresponding exam for all persons registered under it, be it an \u0027edit\u0027 or a \u0027delete\u0027."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Exams registered for a person will not be shown in the `list` command and only viewable under the `viewall`, `viewself` and `viewexams` command."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listexams` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`regexam 2 2` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Registers the 2nd person in the address book for the 2nd exam in the exam book."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Deregistering for an exam : `deregexam` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deregister a specified person for a specified exam. +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `deregexam PERSON_INDEX EXAM_INDEX`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deregisters the person at the specified `PERSON_INDEX` for the exam at the specified `EXAM_INDEX`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The `PERSON_INDEX` refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The `EXAM_INDEX` refers to the index number shown in the most recent exams listing."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listexams` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deregexam 2 2` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Deregisters the 2nd person in the address book for the 2nd exam in the exam book."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing exams : `viewexams` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "View the exams for a specified person in the address book. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `viewexams INDEX`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Views the exams of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The index refers to the index number shown in the most recent persons listing."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "This command will work for all `INDEX` only when the user is of `Tutor` and `Admin` privileges. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If the user has no privileges, the user must be logged into an account and can execute the command to view only his own non-private exams.   "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `login user pw` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`viewexams 1` +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Views the non-private exams of the 1st person in the address book, *if the logged-account belongs to him/her*."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `login admin admin` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`viewexams 1` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Views the exams of the 1st person in the address book, *if the logged-account belongs to a tutor/admin*."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clearexams` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Clears all entries from the exam book. All exams will be cleared in the address book as well. +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Format: `clearexams`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "micklwl"
        },
        "content": "//end::Exam[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lucdx"
        },
        "content": "//tag::Fees[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lucdx"
        },
        "content": "[[Fees]]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Fees Commands"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Below are the commands that deals with fees data:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d Editing fees of a person: `editfees` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Edits the numerical fees of a person in the address book. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `editfees INDEX FEE DUE_DATE` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lucdx"
        },
        "content": "FEE must have the form of 2 decimal places +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lucdx"
        },
        "content": "DUE_DATE must have the form of DD-MM-YYYY"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Words in `UPPER_CASE` are the parameters, the order of parameters is fixed."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Fees are automatically marked as `private`. `private` details can only"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lucdx"
        },
        "content": "be seen using the `viewall` command, or for fees specifically, the `viewfees` command."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`editfees 1 344.41 31-10-2018`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`editfees 2 0.60 01-01-2019`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d Removing the fees of a person: `paidfees` image:Admin.png[16,16]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Removes the fees from a person, once he/she has paid in full, in the address book. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `paidfees INDEX` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Words in `UPPER_CASE` are the parameters."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lucdx"
        },
        "content": "The INDEX refers to the index number shown in the most recent person listing."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`paidfees 2` +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Fees of the 2nd person in the address book are now fully paid."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d View fees of a person : `viewfees` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Displays the fees(private) of the specified person. +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `viewfees INDEX`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views the fees of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lucdx"
        },
        "content": "The INDEX refers to the index number shown in the most recent person listing."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`viewfees 2` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views fees of the 2nd person in the address book."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`viewfees 1` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views fees of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d List all fees of every person : `listfees` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Displays the fees(private) of all the people in the AddressBook. +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `listfees`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views the fees of all the people with respect to their INDEX."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Shows only the index, name and fees."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d\u003d\u003d List only people with due fees : `listdue` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Displays the fees(private) of all the people in the AddressBook with overdue Fees. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Format: `listdue`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views the fees of all the people with overdue fees."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Shows only the index, name, fee and due status."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Adds a \"feesdue\" tag to the people shown for easier tracking in the future."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lucdx"
        },
        "content": "****"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* `listdue` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lucdx"
        },
        "content": "`viewall 1` +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Views all information of the 1st person in the results of the `listdue` command. +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Including the \"feesdue\" tag."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lucdx"
        },
        "content": "//end::Fees[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// tag::Grades[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Grade Commands"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Below are the commands that deals with grades/assessments of students:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an Assessment : `addassess` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Adds an assessment to the address book. +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `addassess ASSESSMENT_NAME`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Words in `UPPER_CASE` are the parameters. There is only one parameter for this command, which is the exam or assessment"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "name. Duplicate assessments cannot be added."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `addassess CG2271 Midterm` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `addassess Mathematics final class test`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all assessments : `listassess` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Shows a list of all assessments in the address book, along with an index for each +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `listassess`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an assessment : `deleteassess` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Deletes the specified assessment from the assessment book, based on the index. Irreversible. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `deleteassess INDEX`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the assessment at the specified `INDEX`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "The index refers to the index number shown in the most recent assessments listing."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `listassess` +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deleteassess 1`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding grades to a person : `addgrades` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Adds grades to selected student/person for a specific assessment listed in addressbook. +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `addgrades PERSON_INDEX ASSESSMENT_INDEX GRADES`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Words in `UPPER_CASE` are the parameters. There are three parameters for this command, which are the index of the person"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "micklwl"
        },
        "content": "or student, index of the appropriate assessment and the grades themselves. +"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1. No restriction on upper limit! It is up to the teacher to decide what the total marks are. +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "2. In case of any mistake in the entry or necessity to update the grade, you can overwrite a previously entered value by"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "simply using the same function again! +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "`addgrades PERSON_INDEX ASSESSMENT_INDEX UPDATED_GRADES`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`listassess` +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`addgrades 1 1 89` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing grades of a person : `viewgrades` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "View the grades for all assessments of a selected student/person. +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `viewgrades PERSON_INDEX`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Words in `UPPER_CASE` are the parameters. There is only one parameter for this command, which is the index of the person"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "or student whose grades you want to view. This is based on the index number shown in the most recent person listing. +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Using `list` command"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`viewgrades 1` +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The results will be displayed as a list of assessments the student has taken and their corresponding grades."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a grade : `deletegrades` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the specified assessment and respective grades of a particular student. It is irreversible. +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `deletegrades PERSON_INDEX ASSESSMENT_INDEX`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes grades for the specified `PERSON_INDEX` and their respective assessment at the specified `ASSESSMENT_INDEX`."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "The index refers to the index number shown in the most recent person and assessments listing respectively."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`listassess` +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`deletegrades 1 2` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`listassess` -- Check the updated list +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the grades corresponding to the 2nd assessment in the address book for the student at index 1 in the address book."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a statistic : `addstatistics` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Adds a statistic to the statistics book. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `addstatistics ASSESSMENT_INDEX`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Words in `UPPER_CASE` are the parameters. There is only one parameter for this command which is the assessment index as"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "shown in the most recent assessments listing. +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "This command automatically calculates and adds statistics for a given assessment based on all the grades or scores"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "previously entered to students for that particular assessment. These statistics include: +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "1. Average Score +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "2. Total Number of Exam Takers +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "3. Maximum Score +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "4. Minimum Score +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `listassess`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `addstatistics 1` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "If you change/ update grades after already generating a statistic, you must delete that statistic and re-add it to the"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "statistics book to ensure that it is up to date."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all statistics : `liststatistics` image:Basic.png[16,16]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Shows a list of all statistics in the statistics book, along with an index for each +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `liststatistics`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "If you delete an assessment after generating its statistics, this statistic will still remain in the statistics book. This"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "is to ensure that the school can maintain a record of all its statistics over time if needed, even though the assessment"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "may have ended and the grades are awarded to students. It is up to the school to decide how long they want to store their"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "statistics for."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a statistic : `deletestatistics` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the specified statistic from the statistics book, based on the index. Irreversible. +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Format: `deletstatistics INDEX`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Deletes the statistic at the specified `INDEX`."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "The index refers to the index number shown in the most recent statistics listing."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "****"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* `liststatistics` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "`deletestatistics 1`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "// end::Grades[]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "// tag::attendance[]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d Attendance Commands"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Below are the commands that deal with attendance data:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Updates the attendance of a person: `attendance` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Updates the attendance of the target person. +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `attendance INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Updates the attendance of the person with INDEX as specified by the last shown list. +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "~*If~ ~the~ ~input~ ~date~ ~is~ ~0~ ~(e.g.~ ~d/0)~~,~ ~the~ ~current~ ~date~ ~will~ ~be~ ~used~"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`attendance 1 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Marks the attendance of the first person in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`attendance 1 d/0 att/0` +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Marks the attendance of the first person on the list as absent for today\u0027s date."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d Replaces the attendance of a person: `replaceAtten` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the current attendance of the target person. +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `replaceAtten INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the attendance of the person with INDEX as specified by the last shown list."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`replaceAtten 1 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the attendance of the first person in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d View the attendance of a person: `viewAttenPerson` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "View the attendance of the target person. +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `viewAttenPerson INDEX`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "micklwl"
        },
        "content": "View the attendance of the person with INDEX as specified by the last shown list."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`viewAttenPerson 1` +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Views the attendance of the first person on the list."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d\u003d View the attendance of a date: `viewAttenDate` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "View the attendance of the given date. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `viewAttenDate DATE`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "micklwl"
        },
        "content": "****"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Shows a list of people who were present and absent on a particular date. +"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "If a person\u0027s attendance has yet to be taken, the person\u0027s name will default be under absent. +"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "~*If~ ~the~ ~input~ ~date~ ~is~ ~0~ ~(e.g.~ ~d/0)~~,~ ~the~ ~current~ ~date~ ~will~ ~be~ ~used~"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `viewAttenDate d/28-10-2018` +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Shows a list of people who were present on a particular date."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `viewAttenDate d/0` +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Shows a list of people who were present today."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Replaces the attendance of a person: `replaceAtten` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the current attendance of the target person. +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `replaceAtten INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the attendance of the person with INDEX as specified by the last shown list according to the DATE."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`replaceAtten 1 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Replaces the attendance of the first person in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Coming in v2.0:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d\u003d\u003d Update multiple people attendance: `multiAtten` image:Tutor.png[16,16]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Updates the attendance of multiple people based on the list of index. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Format: `multiAtten i/MULTIPLE_INDEX d/DATE att/ATTENDANCE`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Updates the attendance of muultiple people with a list of INDEX as specified by the last shown list. +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "~*If~ ~the~ ~input~ ~date~ ~is~ ~0~ ~(e.g.~ ~d/0)~~,~ ~the~ ~current~ ~date~ ~will~ ~be~ ~used~ +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "~*If~ ~the~ ~input~ ~index~ ~is~ ~0~ ~(e.g.~ ~i/0)~~,~ ~all~ ~people~ ~in~ ~the~ ~addressbook~ ~will~ ~be~ ~updated~"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "****"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`multiAtten i/1 2 4 5 d/29-09-2018 att/1` +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Marks the attendance of the people with index 1, 2, 4 and 5 in the list as present for the date 29th September 2018."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* `list`  +"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "`attendance i/0  d/0 att/0` +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "Marks the attendance of everybody on the list as absent for today\u0027s date."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "// end::attendance[]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Data is saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "micklwl"
        },
        "content": "There is no need to save manually. Address book data, exam book data and statistics book data are saved in files called `addressbook.txt`, `exams.txt` and `statistics.txt` respectively in the project root folder."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Handling Errors"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. ClassRepo does not start up when running the jar file. +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Plausible cause*: `addressbook.txt`, `exams.txt` or `statistics.txt` contains invalid data. +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Solution*: Fix the data error in the problematic file. +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Refer to `log.txt` to find the underlying error. +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "0WN463"
        },
        "content": "2. ClassRepo shuts down mid-operation. +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Plausible cause*: `addressbook.txt`, `exams.txt` or `statistics.txt` was set to read-only during"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "0WN463"
        },
        "content": "a data saving operation. ClassRepo shuts itself down to ensure synchronisation of AppData and storage data. +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Solution*: Ensure that the data files are not set as read-only. "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[known-issues]]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Known Issues"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "0WN463"
        },
        "content": "1. ClassRepo ASCII art may be formatted wrongly on OS\u0027s such as Mac."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "image:asciiArt.png[500,500]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Summary of All Commands"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[command-summary]]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Commands are sorted in terms of increasing privileges needed to run them."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Click to Expand"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[width\u003d\"50%\",cols\u003d\"22%,\u003c20%,\u003c20%,\u003c20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|Command |Basic |Tutor |Admin"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|help |Y |Y |Y"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|exit |Y |Y |Y"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|help |Y |Y |Y"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|raise |Y |Y |Y"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewpri |Y |Y |Y"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|view |Y |Y |Y"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|list |Y |Y |Y"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|find |Y |Y |Y"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|login |Y |Y |Y"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|logout |Y |Y |Y"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listacc |Y |Y |Y"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewexams |Y |Y |Y"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|liststatistics |Y |Y |Y"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listassess |Y |Y |Y"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listall |N |Y |Y"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewall |N |Y |Y"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listexams |N |Y |Y"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|regexam |N |Y |Y"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deregexam |N |Y |Y"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewfees |N |Y |Y"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listfees |N |Y |Y"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|listdue |N |Y |Y"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|addassess |N |Y |Y"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deleteassess |N |Y |Y"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|addgrades |N |Y |Y"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewgrades |N |Y |Y"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deletegrades |N |Y |Y"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|addstatistics |N |Y |Y"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deletestatistics |N |Y |Y"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|attendance |N |Y |Y"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|replaceAtten |N |Y |Y"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewAttenPerson |N |Y |Y"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|viewAttenDate |N |Y |Y"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|editpw |N |N |Y"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|perm |N |N |Y"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|add |N |N |Y"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|delete |N |N |Y"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|clear |N |N |Y"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|addexam |N |N |Y"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deleteexam |N |N |Y"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|editexam |N |N |Y"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|clearexams |N |N |Y"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|addacc |N |N |Y"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|deleteacc |N |N |Y"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|editfees |N |N |Y"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|paidfees |N |N |Y"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 123,
      "0WN463": 219,
      "micklwl": 265,
      "lucdx": 91,
      "meisbokai": 96,
      "-": 113
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The current AppVeyor setup performs the following things whenever someone pushes code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Runs the `gradlew.bat headless allTests` command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Automatically retries the build up to 3 times if a task fails."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "micklwl": 88
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "micklwl": 42
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "micklwl": 54
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `asciidoctor` `checkstyleMain` `checkstyleTest"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "0WN463": 92,
      "micklwl": 5
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630] "
      }
    ],
    "authorContributionMap": {
      "micklwl": 50
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Runs the `./gradlew clean headless allTests coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Automatically retries the build up to 3 times if a task fails."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "--"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "--"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "--"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "--"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/main/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "...."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "micklwl": 132
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    color: #0939e4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgb(197, 90, 17);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "-": 213
    }
  },
  {
    "path": "docs/team/0wn463.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d Ng Tek In - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d PROJECT: ClassRepo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "This portfolio is meant to document the contributions that I made to this project. This project serves as the platform for undergraduates to apply software engineering principles as part of the module CS2113T provided by the National University of Singapore (NUS). ClassRepo was headed by 5 developers, including myself."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "ClassRepo is a desktop Java application designed for secondary school students, tutors and staff. It aims to integrate all the functionalities that each user may require during their time in school. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Functionalities include organising of person data, exams, grades, attendance and fees. Also, a feature to restrict users based on user type is also implemented. +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "With the above, this application achieves its goal of increasing efficiency data handling and improving the ease of access to information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Roles"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Under this project, I serve as the Project Lead, monitoring the merger of Pull Requests and ensuring the master branch is clean and free of bugs. I also took it upon myself to set up the project\u0027s environment (tools and improved codebase), so that the other team members have an easier time developing this product. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d *Code Contributed*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "Available https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003d0wn463[here]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d *Main feature implemented*: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d\u003d *Privilege* and *Account Features*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* What it does: The privilege feature restricts available user interactions based on what privilege level they are currently hold. In addition, the account feature allow users to authenticate themselves and raise their privilege level so as to access more commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Justification: This feature helps fufil the requirement of having different types of user interacting with the system. Thus, setting up the structure within the system by giving access only to the commands the user will need."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Highlights: This feature weaves itself into all the commands implemented, which demands careful modification to each of them as to ensure no bugs arise from regression."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d\u003d *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* In charge of merging pull requests and ensuring passing builds in master branch"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Managed releases `v1.2.1`, `v1.3`,`v1.3.1` and `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Set up several Dev Ops application"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Gradle (Build Automaton adapted from AB4)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Travis (Continuous Integration)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Coveralls (Code Coverage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Codacy (Code Quality)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** GitHub Pages (Auto-publishing)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Updated code of AddressBook-3 to fulfil the Learning Outcomes expected, to provide a good base to start the project on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Set up labels and milestones on issue tracker"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Programed a \"Command usage to adoc format convertor\", available at this https://repl.it/@0WN3D/PresentArcticIntegers[link]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Enhancements to existing features:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Updated the GUI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Added a status console to display status messages"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Designed Koro-san image:Koro-san.png[32,32], our mascot which serves as our Java application icon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F10-1/main/pull/86[#86], "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F10-1/main/pull/127[#127], "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F10-1/main/pull/158[#158], "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F10-1/main/pull/159[#159]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Contributed to forum discussions:  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/nusCS2113-AY1819S1/forum/issues/30[#30], "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/nusCS2113-AY1819S1/forum/issues/50[#50], "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/nusCS2113-AY1819S1/forum/issues/58[#58]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Bug reported to other teams: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/254#event-1944677222[#254],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/256#issuecomment-435553781[#256],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/258#event-1944205020[#258],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/261#event-1944698406[#261], "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "https://github.com/CS2113-AY1819S1-F09-3/main/issues/265#event-1944678415[#265]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ". Documentation:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "* Did cosmetic tweaks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Added table of content"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Made Appendices collapsible"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "** Designed icons image:Basic.png[16,16] image:Tutor.png[16,16] image:Admin.png[16,16] for easier identification of privilege required for commands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "include::../UserGuide.adoc[tag\u003dprivilege]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "include::../UserGuide.adoc[tag\u003daccount]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprivilege]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0WN463": 100
    }
  },
  {
    "path": "docs/team/lucdx.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d Lucas Lim - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d PROJECT: ClassRepO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "ClassRepO is a desktop address book application written in Java that targets secondary schools for usage by their students, tutors and staff."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "It is an address book like application to provide a one stop portal for all in the school to access and update any information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "This portfolio is meant to document the contributions that I made to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d Roles"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "Under this project, I serve as the Scribe, monitoring all the documentation related to the project, thus ensuring that they are both coherent and informative."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* Code Contributed - https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dlucdx\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* *Major enhancement*: added *Fees* feature"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** What it does: Allows the tagging both staff and students with their respective fees and the dates these fees are due."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Justification: This feature gives way to another important attribute being tracked in a school system."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Highlights: This feature allows for tracking of every Person\u0027s fee in the address book without actually manipulating the addressbook data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "It also automatically adds a \u0027Fees Due\u0027 tag to the person and allows for easy viewing of people with due fees."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* *Minor enhancement*: Added a History Command to show the history of commands inputted by the user in that usage session, so as to visually identify mistakes in past commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*** Managed relevant documentation ie. `About Us` on GitHub, as well as to spot and rectify mistakes made in said documentation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*** Did cosmetic tweaks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "**** Tidied up team\u0027s documentation to have consistent language and format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "**** Checks to ensure there\u0027s no spelling and grammatical errors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-F10-1/main/pull/86[#86], https://github.com/CS2113-AY1819S1-F10-1/main/pull/223[#223]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/CS2113-AY1819S1-W13-1/main/issues/116[#116], https://github.com/CS2113-AY1819S1-W13-1/main/issues/119[#119],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": " https://github.com/CS2113-AY1819S1-W13-1/main/issues/123[#123], https://github.com/CS2113-AY1819S1-W13-1/main/issues/125[#125],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": " https://github.com/CS2113-AY1819S1-W13-1/main/issues/130[#130], https://github.com/CS2113-AY1819S1-W13-1/main/issues/133[#133],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": " https://github.com/CS2113-AY1819S1-W13-1/main/issues/140[#140]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003c\u003c../UserGuide.adoc#fees,Fees Section\u003e\u003e +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFees]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "\u003c\u003c./DeveloperGuide.adoc#fees,Implementation of Fees\u003e\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFees]"
      }
    ],
    "authorContributionMap": {
      "lucdx": 64
    }
  },
  {
    "path": "docs/team/meg1456.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d Meghana Narayanan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d ClassRepo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "This portfolio highlights my contributions to a team software development project. After almost 12 weeks of advancements,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "we have created ClassRepo, which is an all-in-one school management system."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d *More About ClassRepo*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "ClassRepo is an enhanced AddressBook application, which is targeted at secondary schools to provide them with an easy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "and effective learning management system. Our aim is to help the students, teachers and the admin personnel in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "secondary schools by bolstering their efficiency. Spending less time on mundane tasks such as attendance taking would"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "mean an increase in time available for actual learning to take place. With this goal in mind, our app targets 5 key areas,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "namely privilege (to ensure data security), exams, assessments \u0026 grades, fees and attendance. The users can interact with"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "our app using a CLI. The application also has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d *How Did I Contribute?*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* Code Contributed - https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dmeg1456\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-05\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* *Major Enhancements*: Added the *Assessments/Grades Feature*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   ** Able to add/list/delete assessments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   ** Able to add/view/delete grades for students individually, for specific assessments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "   ** Able to add/list/delete statistics for any assessment (stored in separate statistics book)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "          What It Does: Allows the user (either teachers/ admin) to maintain a list of all assessments in the school. Grades for these assessments can be added to students individually. Finally, the user can also add statistics for each assessment such as average score, max/min score etc. These statistics will be stored in a separate statistics book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "          Justification: This model allows the grades of all students for a particular assessment to be stored together, while making it easier for user to add grades based on assessment. Since the ClassRepo is designed for secondary schools, this feature will ensure that all teachers and admin are up-to-date with all the assessments being conducted and the corresponding statistics."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "          Highlights: This enhancement is multifaceted and requires addition of new commands as well as careful modification to existing ones. The implementation requires meticulousness to ensure that the code is well-integrated and runs smoothly without any bugs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* *Minor Enhancement*: Added functions to allow statistics such as average grade for each assessment to be calculated automatically, so manual work required by the user is reduced."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "* *Other Contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   ** Project Management"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   *** ROLE: Deliverable and deadlines in-charge - Managed Issue Tracker on GitHub, Set milestones for own features, deadlines for groups, labels and so on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   ** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   *** Tweaked contents of User Guide and Developer Guide to fit our project. Contributed to \u0027About Us\u0027 page."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   ** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   *** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-F10-1/main/pull/159[#159],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   https://github.com/CS2113-AY1819S1-F10-1/main/pull/157[#157], https://github.com/CS2113-AY1819S1-F10-1/main/pull/86[#86],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   https://github.com/CS2113-AY1819S1-F10-1/main/pull/86[#168]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   *** Reported bugs and suggestions for teammates: https://github.com/CS2113-AY1819S1-F10-1/main/issues/173[#173]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   *** Reported bugs and suggestions for other teams in the class: https://github.com/CS2113-AY1819S1-W13-4/main/issues/125[#125],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   https://github.com/CS2113-AY1819S1-W13-4/main/issues/89[#89], https://github.com/CS2113-AY1819S1-W13-4/main/issues/94[#94],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "   https://github.com/CS2113-AY1819S1-W13-4/main/issues/108[#108]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|Attached below is a link to the sections I contributed to the User Guide of our project."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "include::../UserGuide.adoc[tag\u003dGrades]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|Attached below is a link to the sections I contributed to the Developer Guide."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dGrades]"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 64,
      "micklwl": 3,
      "lucdx": 1
    }
  },
  {
    "path": "docs/team/meisbokai.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d Neow Bo Kai - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d PROJECT: ClassRepo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "ClassRepO is a desktop address book application written in Java that targets secondary schools for usage by their students, tutors and administrative staff. This portfolio is meant to document the contributions that I made to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d Roles"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "In this project, I serve mainly as a Code Quality checker. Aside from the code quality, I also ensure that the language used in the documentation is up to standard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* *Code Contributions*: https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dmeisbokai[here]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* *Major enhancement*: added a new field *Attendance* which comes with a few commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** What it does: Enables the ClassRepO to keep track of the students\u0027 attendance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Justification: This feature improves the product significantly as a school already needs to take the students\u0027 attendance. A digitalized storage and management of the attendance will make data analysis faster and also reduces the usage of paper (eco-friendly)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Highlights: This feature uses different forms of software tricks (storage type) to make searching and editing of data more efficient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Credits: https://stackoverflow.com/a/30578421[Victor Hernandez] for the base valid date checker method"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*** Added config.json file to fix repoSense issue: https://github.com/CS2113-AY1819S1-F10-1/main/pull/210[#210]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*** Continuously updated the feature introduced by me (attendance): https://github.com/CS2113-AY1819S1-F10-1/main/pull/214[#214] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/209[#209] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/2126[#126] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/68[#68]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage: https://github.com/CS2113-AY1819S1-F10-1/main/pull/214[#214] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/209[#209] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/2126[#126] | https://github.com/CS2113-AY1819S1-F10-1/main/pull/68[#68]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*** Reviewed grammar and spelling for UG and DG: https://github.com/CS2113-AY1819S1-F10-1/main/pull/270[#270]| https://github.com/CS2113-AY1819S1-F10-1/main/pull/209[#209]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-F10-1/main/pull/221[#221]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003c\u003c../UserGuide.adoc#attendance, Attendance Section\u003e\u003e +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "include::../UserGuide.adoc[tag\u003dattendance]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "\u003c\u003c./DeveloperGuide.adoc#attendance,Implementation of Attendance\u003e\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dattendance]"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 54
    }
  },
  {
    "path": "docs/team/micklwl.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d Mick Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d PROJECT: ClassRepo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The purpose of this portfolio is to document the specific contributions I have made to this project. The project was carried out over the course of one semester in the National University of Singapore(NUS), under the module CS2113T, which aims to teach Software Engineering principles and Object-Oriented Programming. ClassRepo was done by a team of 5 including myself."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "ClassRepo is a desktop address book application written in Java that targets secondary schools for usage by their students, tutors and admins. It serves to integrate all the functionalities that the user would need in their seconday school lives and/or school operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "The user interacts with it using a CLI, and it has a very basic GUI. It is an enhanced version of the AddressBook Level-3 application by the sed-edu team."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "I served as the project’s bug tester, to ensure that each feature added will be as bug-free as possible. I also became a point of contact should any of my group\u0027s members require technical help in developing their respective features and participated in group discussions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Code contributed*: https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dmicklwl[here]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Main feature implemented*: added the *Exams feature*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** What it does: allows staff to create and manage exams held in the school, as well as registering students for them. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Justification: This feature improves the product significantly because exams would be present in every school and it would be valuable for the school tutors and admins to manage them in a single application. Students would be able to benefit as they can check their exam schedules without the need to ask others or record them separately."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Highlights: This enhancement affects existing commands, data structures and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands and data structures. This is because a single exam object is closely related to the whole AddressBook. Hence, there are checks to ensure that the exams are always synchronised in both storage files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Credits: https://stackoverflow.com/a/30578421[Victor Hernandez] for the base valid date checker method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Contributions to project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Helped to manage issues posted in GitHub"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Split test code to different folders for better organisation: https://github.com/CS2113-AY1819S1-F10-1/main/pull/205[#205]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Contributions to project documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Helped to port over and adapted AddressBook - Level 4 documents to ensure working links for website: https://github.com/CS2113-AY1819S1-F10-1/main/pull/156[#156], https://github.com/CS2113-AY1819S1-F10-1/main/pull/206[#206]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Standardised format for documentation: https://github.com/CS2113-AY1819S1-F10-1/main/pull/184[#184]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Helped to update the AboutUs page: https://github.com/CS2113-AY1819S1-F10-1/main/pull/185[#185]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "** Evidence of helping others:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-F10-1/main/pull/68[#68]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Helped to write tests for others and increase coverage: https://github.com/CS2113-AY1819S1-T16-4/main/pull/284[#284]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Manually tested all features in my team\u0027s application and reported any issues: https://github.com/CS2113-AY1819S1-F10-1/main/issues/161[#161], https://github.com/CS2113-AY1819S1-F10-1/main/issues/173[#173], https://github.com/CS2113-AY1819S1-F10-1/main/issues/246[#246], https://github.com/CS2113-AY1819S1-F10-1/main/issues/269[#269]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "*** Manually tested other teams\u0027 applications and reported any issues: https://github.com/CS2113-AY1819S1-T16-4/main/issues/192[#192], https://github.com/CS2113-AY1819S1-T16-4/main/issues/197[#197], https://github.com/CS2113-AY1819S1-T16-4/main/issues/203[#203], https://github.com/CS2113-AY1819S1-T16-4/main/issues/211[#211]  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dExam]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dExam]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "micklwl": 65
    }
  },
  {
    "path": "src/classrepo/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.ui.Gui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.ui.Stoppable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *  Main entry point to the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application implements Stoppable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Logger LOGGER \u003d Logger.getLogger(\"Foo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Version info of the program. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String VERSION \u003d \"ClassRepo - Version 1.4\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            setUpLogger();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Gui gui \u003d new Gui(new Logic(), VERSION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            gui.start(primaryStage, this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            LOGGER.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpLogger() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"log.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            fileHandler.setFormatter(formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IOException(\"Error accessing log.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0WN463": 27,
      "micklwl": 8,
      "-": 26
    }
  },
  {
    "path": "src/classrepo/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final Category DEFAULT_CATEGORY \u003d Category.GENERAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final boolean DEFAULT_IS_MUTATING_SETTING \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Enum used to indicate which category the command belongs to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public enum Category {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        PERSON,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        PRIVILEGE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        GENERAL,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ACCOUNT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ASSESSMENT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        EXAM,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        FEES,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ATTENDANCE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected Privilege privilege;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook addressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected ExamBook examBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected List\u003c? extends Assessment\u003e relevantAssessments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected List\u003c? extends ReadOnlyExam\u003e relevantExams;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected List\u003c? extends AssignmentStatistics\u003e relevantStatistics;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that the target exam index is out of bounds of the last viewed exams listing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class ExamIndexOutOfBoundsException extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        public ExamIndexOutOfBoundsException(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that the target assessment index is out of bounds of the last viewed assessment listing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class AssessmentIndexOutOfBoundsException extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        public AssessmentIndexOutOfBoundsException(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personsDisplayed used to generate summary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMessageForPersonListShownSummary(List\u003c? extends ReadOnlyPerson\u003e personsDisplayed) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, personsDisplayed.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of fees."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param feesList used to generate summary"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static String getMessageForFeesListShownSummary(List\u003c? extends ReadOnlyPerson\u003e feesList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return String.format(Messages.MESSAGE_FEES_LISTED_OVERVIEW, feesList.size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of assessments."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessmentsDisplayed used to generate summary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static String getMessageForAssessmentListShownSummary(List\u003c? extends Assessment\u003e assessmentsDisplayed) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return String.format(Messages.MESSAGE_ASSESSMENTS_LISTED_OVERVIEW, assessmentsDisplayed.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of exams."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examsDisplayed used to generate summary"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return summary message for exams displayed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static String getMessageForExamListShownSummary(List\u003c? extends ReadOnlyExam\u003e examsDisplayed) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return String.format(Messages.MESSAGE_EXAMS_LISTED_OVERVIEW, examsDisplayed.size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of statistics."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param statisticsDisplayed used to generate summary"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return summary message for persons displayed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static String getMessageForStatisticsListShownSummary(List\u003c? extends AssignmentStatistics\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                                                         statisticsDisplayed) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return String.format(Messages.MESSAGE_STATISTICS_LISTED_OVERVIEW, statisticsDisplayed.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setData(AddressBook addressBook, StatisticsBook statisticsBook, List\u003c? extends ReadOnlyPerson\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            relevantPersons, Privilege privilege) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.relevantPersons \u003d relevantPersons;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d privilege;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setData(AddressBook addressBook, List\u003c? extends ReadOnlyPerson\u003e relevantPersons,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        List\u003c? extends ReadOnlyExam\u003e relevantExams, List\u003c? extends Assessment\u003e relevantAssessments,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        Privilege privilege, ExamBook exambook, StatisticsBook statisticsBook,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                        List\u003c? extends AssignmentStatistics\u003e relevantStatistics) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setData(addressBook, statisticsBook, relevantPersons, privilege);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examBook \u003d exambook;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.relevantExams \u003d relevantExams;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantAssessments \u003d relevantAssessments;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.relevantStatistics \u003d relevantStatistics;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return DEFAULT_CATEGORY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Checks if the command can potentially change the data to be stored"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return DEFAULT_IS_MUTATING_SETTING;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns the usage message to be used to construct HelpCommand\u0027s message"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This is needed as each Command\u0027s usage message needs to be static to be accessed by Parser."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This allows the Help Command to retrieve usage messages by looping through each Command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract String getCommandUsageMessage();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the command can potentially change the exam data to be stored"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return DEFAULT_IS_MUTATING_SETTING;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    // The below 2 functions is used by Users to determined if a Command already exists in their newAllowedCommands"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Hash based on class so that we can check if the same command is added to different users"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Objects.hash(this.getClass());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || (this.getClass().equals(other.getClass())); // Checks if the classes are the same"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 44,
      "0WN463": 65,
      "micklwl": 36,
      "lucdx": 7,
      "-": 30
    }
  },
  {
    "path": "src/classrepo/commands/IncorrectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"ERROR, IncorrectCommand is executed\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 6,
      "-": 19
    }
  },
  {
    "path": "src/classrepo/commands/account/AddAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Adds an account to a specific person, with a username and password of choice"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AddAccountCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addacc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Adds an account as specified to the person identified by the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: INDEX USERNAME PASSWORD PRIVILEGE\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"PRIVILEGE could be of type \\\"Basic\\\", \\\"Tutor\\\", \\\"Admin\\\".\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 username password basic\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS \u003d \"Added Account to: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USERNAME_TAKEN \u003d \"Username Taken!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PERSON_HAS_ACCOUNT \u003d \"Target person already has an existing account!!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIVILEGE \u003d \"Desired privilege level of \\\"%s\\\" is not valid.\\n%s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddAccountCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddAccountCommand(int targetVisibleIndex, String username, String password, String privilege)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetVisibleIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            toAdd \u003d new Account(username, password, privilege);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String message \u003d String.format(MESSAGE_INVALID_PRIVILEGE, privilege, ive.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (addressBook.containsPersonWithUsername(toAdd.getUsername())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_USERNAME_TAKEN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person target \u003d getTargetPerson();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (target.hasAccount()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_PERSON_HAS_ACCOUNT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            toAdd.setPrivilegePerson(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            target.setAccount(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e updatedList \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, target.getName()), updatedList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 83,
      "micklwl": 8
    }
  },
  {
    "path": "src/classrepo/commands/account/DeleteAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes the account of a person identified using their last displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteAccountCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteacc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Deletes the account of the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS \u003d \"Deleted Account of: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PERSON_ACCOUNT_ABSENT \u003d \"Target person does not have an existing account!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETING_SELF \u003d \"You cannot delete the account your are logged-in as!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person editablePerson \u003d addressBook.findPerson(target);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!target.hasAccount()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_PERSON_ACCOUNT_ABSENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.checkTargetIsSelf(editablePerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            editablePerson.removeAccount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e updatedList \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS, target.getName()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    updatedList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Privilege.SelfModifyingException ste) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_DELETING_SELF);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 66
    }
  },
  {
    "path": "src/classrepo/commands/account/ListAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Lists all persons with accounts in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ListAccountCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listacc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Displays all persons with accounts in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // We do not need an immutable list as this is a copy of UniquePersonList\u0027s internal list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsWithAccount \u003d allPersons.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(ReadOnlyPerson::hasAccount).collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(personsWithAccount), personsWithAccount,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                PersonListFormat.ACCOUNT_DETAILS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 41
    }
  },
  {
    "path": "src/classrepo/commands/account/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author 0wn643"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.KeywordsFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic.WrongPasswordEnteredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Log into a previously created account. Privilege is raised/ decreased to match that of your account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class LoginCommand extends KeywordsFormatCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Logs into your account. Raises current privilege to that of your account.\\n\\t \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: USERNAME PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" IamSudo sudo1234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged in as : %s (%s)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void validatePassword(Account account) throws WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!password.equals(account.getPassword())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp(String[] arguments) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assert(arguments.length \u003d\u003d REQUIRED_ARGUMENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.userName \u003d arguments[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.password \u003d arguments[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public int getNumRequiredArg () {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return REQUIRED_ARGUMENTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Person requestedPerson \u003d addressBook.findPersonByUsername(userName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Account requestedAccount \u003d requestedPerson.getAccount().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword(requestedAccount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.copyPrivilege(requestedAccount.getPrivilege());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String message \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    requestedPerson.getName().toString(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    requestedAccount.getPrivilege().getLevelAsString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnf) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "Meg1456": 1,
      "0WN463": 69,
      "micklwl": 7
    }
  },
  {
    "path": "src/classrepo/commands/account/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Logs out of your account."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Logs out of your account, resetting privilege to Basic.\\n\\t \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (privilege.isBase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ACCOUNT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 33,
      "micklwl": 6
    }
  },
  {
    "path": "src/classrepo/commands/assessment/AddAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Adds a new assessment to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AddAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addassess\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds an assessment to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: ASSESSMENT_NAME\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" Math Midterm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assessment added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSESSMENT \u003d \"This assessment has already been entered!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final Assessment toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssessmentCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddAssessmentCommand(String examName) throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.toAdd \u003d new Assessment(examName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment getAssessment() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            addressBook.addAssessment(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final List\u003cAssessment\u003e updatedList \u003d addressBook.getAllAssessments().immutableListView();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), updatedList, ListType.ASSESSMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniqueAssessmentsList.DuplicateAssessmentException dpe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_ASSESSMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 67,
      "0WN463": 7,
      "micklwl": 1
    }
  },
  {
    "path": "src/classrepo/commands/assessment/AddAssignmentStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Creates a new statistic in the statistics book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AddAssignmentStatistics extends IndexFormatCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstatistics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds new statistic to the StatisticsBook based \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"on index of assessment, as per the last listing of listassessment.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: EXAMNAME\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New statistic added : %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STATISTIC \u003d \"This statistic already exists in the statistics book!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private AssignmentStatistics toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Map\u003cPerson, Grades\u003e grade;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Assessment assessName \u003d getTargetAssessment();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            String examName \u003d assessName.getExamName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double maxGrade \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double minGrade \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double averageScore;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double total \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            grade \u003d assessName.getAllGrades();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int numPersons \u003d grade.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            for (Grades gradeVal : grade.values()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                maxGrade \u003d Math.max(maxGrade, gradeVal.getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                minGrade \u003d Math.min(minGrade, gradeVal.getValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                total +\u003d gradeVal.getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (numPersons \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                averageScore \u003d (double) Math.round((total / numPersons) * 100) / 100;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                averageScore \u003d 0; //to account for empty grades"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                minGrade \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            this.toAdd \u003d new AssignmentStatistics(examName, averageScore, numPersons, maxGrade, minGrade);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsBook.addStatistic(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final List\u003cAssignmentStatistics\u003e updatedList \u003d statisticsBook.getAllStatistics().immutableListView();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), updatedList,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    ListType.STATISTICS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniqueStatisticsList.DuplicateStatisticsException dpe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_STATISTIC);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (AssessmentIndexOutOfBoundsException aie) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 68,
      "0WN463": 10,
      "micklwl": 7
    }
  },
  {
    "path": "src/classrepo/commands/assessment/AddGradesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Adds a grade for specific assessment to chosen person based on person index and assessment index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AddGradesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgrades\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds grades to a person based on person index\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" and grades index.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: PERSON_INDEX ASSESSMENT_INDEX GRADE\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \" 1 2 85\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ADD_GRADE_SUCCESS \u003d \"Grade has been added to %1$s for %2$s assessment\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double gradesVal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddGradesCommand() { }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddGradesCommand (int targetPersonIndex, int targetAssessIndex, double gradesVal) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetPersonIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetAssessIndex, ObjectTargeted.ASSESSMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.gradesVal \u003d gradesVal;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Person person \u003d getTargetPerson();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Assessment targetAssess \u003d getTargetAssessment();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            person.addAssessment(targetAssess);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Grades grade \u003d new Grades(gradesVal);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            targetAssess.addGrade(person, grade);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_GRADE_SUCCESS, person.getName(), targetAssess));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnf) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (AssessmentIndexOutOfBoundsException aie) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException pie) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_GRADES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 70,
      "0WN463": 15,
      "micklwl": 1
    }
  },
  {
    "path": "src/classrepo/commands/assessment/DeleteAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes an assessment identified using its last displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteAssessmentCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteassess\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Deletes the assessment identified by the index number used in the last assessment listing.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DELETE_ASSESSMENT_SUCCESS \u003d \"Deleted Assessment: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Assessment target \u003d getTargetAssessment();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            addressBook.removeAssessment(target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            target.removeAllGrades();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final List\u003cAssessment\u003e updatedList \u003d addressBook.getAllAssessments().immutableListView();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_ASSESSMENT_SUCCESS, target), updatedList,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    ListType.ASSESSMENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Command.AssessmentIndexOutOfBoundsException aie) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (UniqueAssessmentsList.AssessmentNotFoundException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_ASSESSMENT_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Command.Category getCategory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Command.Category.ASSESSMENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 43,
      "0WN463": 14
    }
  },
  {
    "path": "src/classrepo/commands/assessment/DeleteGradesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes the grades for a person (identified by index in last person listing) for a particular"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * assessment (identified by index in last assessment listing)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteGradesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletegrades\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Deletes the grades for a person identified by the index number in the last person listing \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"for an assessment identified by the index number in the last assessment listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: PERSON_INDEX ASSESSMENT_INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DELETE_GRADES_SUCCESS \u003d \"Grades for this assessment have been deleted - \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"%1$s\\n\\t\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENT_NOT_PRESENT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            \"The assessment has not been added to this person!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public DeleteGradesCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public DeleteGradesCommand(int targetVisibleIndex, int targetAssessmentIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetVisibleIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetAssessmentIndex, ObjectTargeted.ASSESSMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Person person \u003d addressBook.findPerson(getTargetReadOnlyPerson());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Assessment assessment \u003d getTargetAssessment();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (!person.isAssessmentPresent(assessment)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return new CommandResult(MESSAGE_ASSESSMENT_NOT_PRESENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                person.removeAssessment(assessment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                assessment.removeGrades(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DELETE_GRADES_SUCCESS, assessment));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (AssessmentIndexOutOfBoundsException aie) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 65,
      "0WN463": 12
    }
  },
  {
    "path": "src/classrepo/commands/assessment/DeleteStatisticsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes a statistic identified using its last displayed index from the statistics book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class DeleteStatisticsCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletestatistics\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Deletes the statistic identified by the index number used in the last statistics listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_DELETE_STATISTICS_SUCCESS \u003d \"Deleted Statistics: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AssignmentStatistics target \u003d getTargetStatistic();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsBook.removeStatistic(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final List\u003cAssignmentStatistics\u003e updatedList \u003d statisticsBook.getAllStatistics().immutableListView();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_STATISTICS_SUCCESS, target), updatedList,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    ListType.STATISTICS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException iob) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_STATISTICS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (UniqueStatisticsList.StatisticsNotFoundException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_STATISTIC_NOT_IN_STATISTICSBOOK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 50,
      "0WN463": 7
    }
  },
  {
    "path": "src/classrepo/commands/assessment/ListAssessmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Lists all assessments in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class ListAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listassess\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Displays all assessments in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e allAssessments \u003d addressBook.getAllAssessments().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new CommandResult(getMessageForAssessmentListShownSummary(allAssessments), allAssessments,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                ListType.ASSESSMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 31,
      "0WN463": 6
    }
  },
  {
    "path": "src/classrepo/commands/assessment/ListStatisticsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Lists all statistics in the statistics book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class ListStatisticsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"liststatistics\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Displays all statistics in the statistics book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssignmentStatistics\u003e allStatistics \u003d statisticsBook.getAllStatistics().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new CommandResult(getMessageForStatisticsListShownSummary(allStatistics), allStatistics,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                ListType.STATISTICS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 32,
      "0WN463": 5
    }
  },
  {
    "path": "src/classrepo/commands/assessment/ViewGradesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.assessment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Shows all grades of the person identified using the index number in the last displayed person list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewGradesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewgrades\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows the grades of a person identified by the \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"index number in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_VIEW_GRADES_DETAILS \u003d \"Viewing grades: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_GRADES_DETAILS, target.getAsTextShowAssess()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.ASSESSMENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 37,
      "0WN463": 6,
      "micklwl": 1
    }
  },
  {
    "path": "src/classrepo/commands/attendance/ReplaceAttendanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.commands.attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Utils.isValidDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " *  Replaces the already marked attendance for the given date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class ReplaceAttendanceCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"replaceAtten\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Replaces the pre-existing attendance of a student. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Parameters: INDEX d/DATE att/ISPRESENT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"1 d/29-09-2018 att/1 \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tTo input today\u0027s date, input d/0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance replaced for: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_NO_DUPLICATE_ATTENDANCE \u003d \"Attendance has yet to be taken.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Please use `attendance` command to add attendance\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private boolean isPresent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ReplaceAttendanceCommand(int targetIndex, String date, boolean isPresent) throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        setTargetIndex(targetIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!isValidDate(date) \u0026\u0026 !\"0\".equals(date)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ReplaceAttendanceCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Person person \u003d addressBook.findPerson(getTargetPerson());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            boolean isDuplicateDate \u003d person.replaceAttendanceMethod(date, isPresent, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (!isDuplicateDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                return new CommandResult(MESSAGE_NO_DUPLICATE_ATTENDANCE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return Category.ATTENDANCE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 84
    }
  },
  {
    "path": "src/classrepo/commands/attendance/UpdateAttendanceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.commands.attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Utils.isValidDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " *  Marks the date where the student is present."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class UpdateAttendanceCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Updates the attendance of a student. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Parameters: INDEX d/DATE att/ISPRESENT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"1 d/29-09-2018 att/1 \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tTo input today\u0027s date, input d/0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance updated for: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE \u003d \"Attendance has already been taken.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Please use `replaceAtten` command to overwrite current attendance.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private boolean isPresent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public UpdateAttendanceCommand(int targetIndex, String date, boolean isPresent) throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        setTargetIndex(targetIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!isValidDate(date) \u0026\u0026 !\"0\".equals(date)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.isPresent \u003d isPresent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public UpdateAttendanceCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Person person \u003d addressBook.findPerson(getTargetPerson());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            boolean isDuplicateDate \u003d person.updateAttendanceMethod(date, isPresent, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (isDuplicateDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                return new CommandResult(MESSAGE_DUPLICATE_ATTENDANCE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return Category.ATTENDANCE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 84
    }
  },
  {
    "path": "src/classrepo/commands/attendance/ViewAttendanceDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.commands.attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Utils.isValidDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " *  Lists all the people who were present on a particular date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class ViewAttendanceDateCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewAttenDate\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Views the attendance of the date. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Parameters: d/DATE \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"d/28-10-2018\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tTo input today\u0027s date, input d/0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance for the given date, \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ViewAttendanceDateCommand(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!isValidDate(date) \u0026\u0026 !\"0\".equals(date)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ViewAttendanceDateCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            String outputDate \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            String present \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            String absent \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (\"0\".equals(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                outputDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final List\u003cName\u003e listOfPresent \u003d addressBook.getPresentPeople(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final List\u003cName\u003e listOfAbsent \u003d addressBook.getAbsentPeople(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            for (Name n: listOfPresent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                present +\u003d (n + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            for (Name n: listOfAbsent) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                absent +\u003d (n + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + outputDate + \":\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    + \"Present\\n\" + present + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    + \"Absent\\n\" + absent + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return Category.ATTENDANCE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 85
    }
  },
  {
    "path": "src/classrepo/commands/attendance/ViewAttendancePersonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.commands.attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " *  Lists all the dates where the person\u0027s attendance has been taken."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class ViewAttendancePersonCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewAttenPerson\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Views the attendance of a student. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"Parameters: INDEX \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" \" + \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance for student, \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ViewAttendancePersonCommand(int targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        setTargetIndex(targetIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public ViewAttendancePersonCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Person person \u003d addressBook.findPerson(getTargetPerson());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final String output \u003d person.viewAttendanceMethod();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + person.getName() + \":\\n\" + output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return Category.ATTENDANCE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 61
    }
  },
  {
    "path": "src/classrepo/commands/commandformat/KeywordsFormatCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** The abstract class for commands with the format of KEYWORD ... KEYWORD */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public abstract class KeywordsFormatCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Function called by Parser to determine if number of arguments provided is correct*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract int getNumRequiredArg ();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Passes the Strings into attributes of the command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *  Command object can assume the number of arguments is correct during setUp as Parser should have checked it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract void setUp(String[] arguments);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 14
    }
  },
  {
    "path": "src/classrepo/commands/commandformat/indexformat/IndexFormatCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandformat.indexformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.ui.Gui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** The abstract class for commands with the format of KEYWORD ... KEYWORD */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public abstract class IndexFormatCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private HashMap\u003cObjectTargeted, Integer\u003e targetMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Extracts the the target (immutable) person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected ReadOnlyPerson getTargetReadOnlyPerson() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return relevantPersons.get(targetMap.get(ObjectTargeted.PERSON) - Gui.DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Extracts the the target (mutable) person in the last shown list from the given arguments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniquePersonList.PersonNotFoundException if the target person cannot be found in the address book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected Person getTargetPerson() throws IndexOutOfBoundsException, UniquePersonList.PersonNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addressBook.findPerson(getTargetReadOnlyPerson());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Extracts the the target assessment in the last shown list from the given arguments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentIndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected Assessment getTargetAssessment() throws AssessmentIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return relevantAssessments.get(targetMap.get(ObjectTargeted.ASSESSMENT) - Gui.DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IndexOutOfBoundsException iob) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new AssessmentIndexOutOfBoundsException(iob.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Extracts the the target statistics in the last shown list from the given arguments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected AssignmentStatistics getTargetStatistic() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return relevantStatistics.get(targetMap.get(ObjectTargeted.STATISTIC) - Gui.DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Extracts the target (mutable) exam in the last shown exam list from the given arguments."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws ExamIndexOutOfBoundsException if the target exam index is out of bounds of the last viewed exam listing"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.ExamNotFoundException if the target exam cannot be found in the exam book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected Exam getTargetExam() throws ExamIndexOutOfBoundsException, UniqueExamList.ExamNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examBook.findExam(getTargetReadOnlyExam());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Extracts the the target (immutable) exam in the last shown exam list from the given arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws ExamIndexOutOfBoundsException if the target exam index is out of bounds of the last viewed exam listing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected ReadOnlyExam getTargetReadOnlyExam() throws ExamIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return relevantExams.get(targetMap.get(ObjectTargeted.EXAM) - Gui.DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new ExamIndexOutOfBoundsException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setTargetIndex(int targetIndex, ObjectTargeted objectTargeted) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        targetMap.put(objectTargeted, targetIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public int getTargetIndex(ObjectTargeted objectTargeted) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return targetMap.get(objectTargeted);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 14,
      "0WN463": 74,
      "micklwl": 2
    }
  },
  {
    "path": "src/classrepo/commands/commandformat/indexformat/ObjectTargeted.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandformat.indexformat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Enum to describe which Object to return with a given index*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public enum ObjectTargeted { PERSON, EXAM, ASSESSMENT, STATISTIC }"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 3
    }
  },
  {
    "path": "src/classrepo/commands/commandresult/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandresult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String BLANK_MESSAGE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final PersonListFormat DEFAULT_LIST_FORMAT \u003d PersonListFormat.NAMES_ONLY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final ListType DEFAULT_LIST_TYPE \u003d ListType.PERSONS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The list of exams that was produced by the command */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends ReadOnlyExam\u003e relevantExams;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of assessments that was produced by the command */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends Assessment\u003e relevantAssessments;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of statistics that was produced by the command */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends AssignmentStatistics\u003e relevantStatistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The list of persons that was produced by the command */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e relevantPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The output message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String outputConsoleMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** The status message to be shown to the user. Contains a description of the execution result */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String statusConsoleMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private PersonListFormat personListFormat;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(statusConsoleMessage, MessageType.STATUS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String message, MessageType messageType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (messageType.equals(MessageType.STATUS)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            statusConsoleMessage \u003d message;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else if (messageType.equals(MessageType.OUTPUT)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            outputConsoleMessage \u003d message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                         String outputConsoleMessage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.outputConsoleMessage \u003d outputConsoleMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage, List\u003c?\u003e relevantList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // By default, assume list is list of ReadOnlyPerson, and shows all details."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(statusConsoleMessage, relevantList, DEFAULT_LIST_FORMAT, DEFAULT_LIST_TYPE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage, List\u003c?\u003e relevantList, ListType listType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(statusConsoleMessage, relevantList, DEFAULT_LIST_FORMAT, listType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage, List\u003c?\u003e relevantList, PersonListFormat personListFormat) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this(statusConsoleMessage, relevantList, personListFormat, DEFAULT_LIST_TYPE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult(String statusConsoleMessage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                         List\u003c?\u003e relevantList,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                         PersonListFormat personListFormat,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                         ListType listType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.statusConsoleMessage \u003d statusConsoleMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.personListFormat \u003d personListFormat;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case PERSONS: this.relevantPersons \u003d castListToReadOnlyPerson(relevantList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case EXAMS: this.relevantExams \u003d castListToExams(relevantList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ASSESSMENT: this.relevantAssessments \u003d castListToAssessments(relevantList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case STATISTICS: this.relevantStatistics \u003d castListToStatistics(relevantList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // all enums should be accounted for, asserts false if this statement is reached"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns list of persons relevant to the command command result, if any."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e getRelevantPersons() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(relevantPersons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns list of exams relevant to the command command result, if any."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e getRelevantExams() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(relevantExams);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns list of statistics relevant to the command command result, if any."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cList\u003c? extends AssignmentStatistics\u003e\u003e getRelevantStatistics() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(relevantStatistics);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns list of assessments relevant to the command command result, if any."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cList\u003c? extends Assessment\u003e\u003e getRelevantAssessments() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(relevantAssessments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean hasStatusMessage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(statusConsoleMessage).isPresent();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns a copy of the list as List ReadOnlyPerson */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e castListToReadOnlyPerson(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(element-\u003eelement instanceof ReadOnlyPerson)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .map(element-\u003e(ReadOnlyPerson) element)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns a copy of the list as List Exam */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends Exam\u003e castListToExams(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(element-\u003eelement instanceof Exam)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .map(element-\u003e(Exam) element)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns a copy of the list as List Assessment */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends Assessment\u003e castListToAssessments(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(element-\u003eelement instanceof Assessment)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .map(element-\u003e(Assessment) element)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns a copy of the list as List AssignmentStatistics */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003c? extends AssignmentStatistics\u003e castListToStatistics(List\u003c?\u003e list) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(element-\u003eelement instanceof AssignmentStatistics)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .map(element-\u003e(AssignmentStatistics) element)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Checks if there is any list attached to this Object */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean hasRelevantList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return getRelevantPersons().isPresent()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantExams().isPresent()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantAssessments().isPresent()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || getRelevantStatistics().isPresent();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns if this command results prints to output console*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean hasOutputMessage() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(outputConsoleMessage).isPresent() || hasRelevantList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Obtains the output message to be shown to the user. */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getOutputConsoleMessage() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(outputConsoleMessage).orElse(BLANK_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Obtains the status message to be shown to the user. */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getStatusConsoleMessage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(statusConsoleMessage).orElse(BLANK_MESSAGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public PersonListFormat getPersonListFormat() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return personListFormat;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 4,
      "0WN463": 185,
      "micklwl": 2
    }
  },
  {
    "path": "src/classrepo/commands/commandresult/ListType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandresult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Enum to indicate what is the Object type of the given list*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    PERSONS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    EXAMS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    STATISTICS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    ASSESSMENT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 9
    }
  },
  {
    "path": "src/classrepo/commands/commandresult/MessageType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.commandresult;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Enum to indicate on which console the message should be shown*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public enum MessageType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    OUTPUT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    STATUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 7
    }
  },
  {
    "path": "src/classrepo/commands/exams/AddExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Adds an exam to the exam book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AddExamCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addexam\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a exam to the exam book, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"with takers initialised as 0. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Exams can be marked private by prepending \u0027p\u0027 to the prefix of the exam name prefix.\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: [p]e/EXAM_NAME s/SUBJECT_NAME  d/EXAM_DATE st/EXAM_START_TIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"et/EXAM_END_TIME dt/EXAM_DETAILS\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \" e/Math Mid-Terms 2018S1 s/Mathematics d/01-12-2018 st/09:00 et/12:00 dt/At MPSH\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added new %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXAM \u003d \"This exam already exists in the exam book!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final Exam toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddExamCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddExamCommand(String examName,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          String examEndTime, String examDetails,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                          boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d new Exam(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, isPrivate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ReadOnlyExam getExam() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final List\u003cReadOnlyExam\u003e updatedList \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), updatedList, ListType.EXAMS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.DuplicateExamException dpe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EXAM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 13,
      "micklwl": 68
    }
  },
  {
    "path": "src/classrepo/commands/exams/ClearExamsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Clears the exam book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ClearExamsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearexams\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears exam book permanently.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exam book has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.clearAllExam();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cReadOnlyExam\u003e updatedList \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, updatedList, ListType.EXAMS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 6,
      "micklwl": 43
    }
  },
  {
    "path": "src/classrepo/commands/exams/DeleteExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList.ExamNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Deletes an exam identified using its last displayed index from the exam book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteExamCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteexam\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Deletes the exam identified by the index number in the last exams listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DELETE_EXAM_SUCCESS \u003d \"Deleted %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ReadOnlyExam target \u003d getTargetReadOnlyExam();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.removeExam(target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            addressBook.removeExam(target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final List\u003cReadOnlyExam\u003e updatedList \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_EXAM_SUCCESS, target), updatedList, ListType.EXAMS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamIndexOutOfBoundsException eie) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 8,
      "micklwl": 51
    }
  },
  {
    "path": "src/classrepo/commands/exams/DeregisterExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Deregisters a person identified using its last displayed index for an exam identified using its last displayed index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeregisterExamCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deregexam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Deregisters a person identified by the index number in the last person listing \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"for a exam identified by the index number in the last exam listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: PERSON_INDEX EXAM_INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DEREGISTER_EXAM_SUCCESS \u003d \"Exam has been deregistered from person: %1$s!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Viewing exams of person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAM_NOT_REGISTERED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"The person is not registered under the targeted exam!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public DeregisterExamCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Sets the indexes required for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public DeregisterExamCommand(int targetVisibleIndex, int targetExamIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetVisibleIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setTargetIndex(targetExamIndex, ObjectTargeted.EXAM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Person personToEdit \u003d getTargetPerson();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam exam \u003d getTargetExam();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (!personToEdit.isExamPresent(exam)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(MESSAGE_EXAM_NOT_REGISTERED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                personToEdit.removeExam(exam);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam originalExam \u003d new Exam(exam);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                exam.setTakers(exam.getTakers() - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook.updateExam(originalExam, exam);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DEREGISTER_EXAM_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        personToEdit.getAsTextShowOnlyName()), personToEdit.getAsTextShowAllExam());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamIndexOutOfBoundsException eie) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 11,
      "micklwl": 79
    }
  },
  {
    "path": "src/classrepo/commands/exams/EditExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.parser.ExamField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Edits an exam identified using its last displayed index in the exam book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class EditExamCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editexam\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Edits the exam identified by the index number in the last exam listing. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Each exam field is optional but order must be followed.\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: INDEX [p/PRIVATE_STATUS] [e/EXAM_NAME] [s/SUBJECT_NAME] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"[d/EXAM_DATE] [st/EXAM_START_TIME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"[et/EXAM_END_TIME] [dt/EXAM_DETAILS]\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"PRIVATE_STATUS is denoted by \\\"y\\\" or \\\"n\\\".\\n\\t\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 e/Math Mid Terms 2018 d/07-06-2018\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EDIT_EXAM_SUCCESS \u003d \"Edited %1$s\\n to %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_NO_ARGS_FOUND \u003d \"No arguments found!\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXAM \u003d \"This exam already exists in the exam book!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_PRIVATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"PRIVATE_STATUS is denoted by \\\"y\\\" or \\\"n\\\" only.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static final String PRIVATE_WORD \u003d \"y\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static final String PUBLIC_WORD \u003d \"n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Map\u003cExamField, String\u003e changedDetails;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public EditExamCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor for edit exam Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param targetExamIndex is the index number of the exam to have its details changed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param changedDetails contains the details to be changed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there are no details to be changed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public EditExamCommand(int targetExamIndex, Map\u003cExamField, String\u003e changedDetails) throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (changedDetails.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NO_ARGS_FOUND + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setTargetIndex(targetExamIndex, ObjectTargeted.EXAM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.changedDetails \u003d changedDetails;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ReadOnlyExam target \u003d getTargetReadOnlyExam();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Exam initial \u003d new Exam(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Exam editedExam \u003d createEditedExam(initial, changedDetails);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.editExam(target, editedExam);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            addressBook.updateExam(initial, editedExam);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final List\u003cReadOnlyExam\u003e updatedList \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_EXAM_SUCCESS, target,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        editedExam), updatedList, ListType.EXAMS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamIndexOutOfBoundsException eie) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.DuplicateExamException dee) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_EXAM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(ive.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates a new exam using the details provided to the initial exam."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam is the exam to have its details changed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param changedDetails contains the details to be changed, not empty"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the edited exam"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there are any errors in the fields"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Exam createEditedExam(Exam exam, Map\u003cExamField, String\u003echangedDetails) throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examName \u003d exam.getExamName();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectName \u003d exam.getSubjectName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examDate \u003d exam.getExamDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examStartTime \u003d exam.getExamStartTime();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examEndTime \u003d exam.getExamEndTime();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examDetails \u003d exam.getExamDetails();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        int takers \u003d exam.getTakers();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isPrivate \u003d exam.isPrivate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Map.Entry\u003cExamField, String\u003e entry : changedDetails.entrySet()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            ExamField attribute \u003d entry.getKey();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String newValue \u003d entry.getValue();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (ExamField.examName.equals(attribute)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examName \u003d newValue.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.subjectName.equals(attribute)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                subjectName \u003d newValue.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.examDate.equals(attribute)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examDate \u003d newValue.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.examStartTime.equals(attribute)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examStartTime \u003d newValue.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.examEndTime.equals(attribute)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examEndTime \u003d newValue.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.examDetails.equals(attribute)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examDetails \u003d newValue.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else if (ExamField.isPrivate.equals(attribute)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (isPrivateValid(newValue.trim())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    isPrivate \u003d PRIVATE_WORD.equals(newValue.trim());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_PRIVATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, takers, isPrivate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the string to edit private status is valid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static boolean isPrivateValid(String value) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (value !\u003d null \u0026\u0026 !PRIVATE_WORD.equals(value) \u0026\u0026 !PUBLIC_WORD.equals(value)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 12,
      "micklwl": 148
    }
  },
  {
    "path": "src/classrepo/commands/exams/ListExamsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Lists all exams in the exam book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ListExamsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listexams\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Displays all exams in the exam book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cReadOnlyExam\u003e allExams \u003d examBook.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(getMessageForExamListShownSummary(allExams), allExams, ListType.EXAMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 6,
      "micklwl": 30
    }
  },
  {
    "path": "src/classrepo/commands/exams/RegisterExamCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Registers a person identified using its last displayed index for a exam identified using its last displayed index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class RegisterExamCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"regexam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Registers a person identified by the index number in the last person listing \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"for a exam identified by the index number in the last exam listing.\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: PERSON_INDEX EXAM_INDEX\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_REGISTER_EXAM_SUCCESS \u003d \"Exam has been registered to person: %1$s!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Viewing exams of person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAM_ALREADY_REGISTERED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"The person is already registered under the targeted exam!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public RegisterExamCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Sets the indexes required for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public RegisterExamCommand(int targetVisibleIndex, int targetExamIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetVisibleIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setTargetIndex(targetExamIndex, ObjectTargeted.EXAM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Person personToEdit \u003d getTargetPerson();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam exam \u003d getTargetExam();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (!personToEdit.isExamPresent(exam)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam originalExam \u003d new Exam(exam);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                exam.setTakers(exam.getTakers() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                personToEdit.addExam(exam);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook.updateExam(originalExam, exam);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_REGISTER_EXAM_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        personToEdit.getAsTextShowOnlyName()), personToEdit.getAsTextShowAllExam());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(MESSAGE_EXAM_ALREADY_REGISTERED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ExamIndexOutOfBoundsException eie) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.EXAM;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 11,
      "micklwl": 79
    }
  },
  {
    "path": "src/classrepo/commands/exams/ViewExamsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.exams;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Shows the exams of the person identified using the last displayed index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Users of insufficient privilege level can only check their own non-private exams, eg. a logged in BasicUser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * cannot check any exam of others."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Users of high privilege level can check the exams of any person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewExamsCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewexams\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Shows the exams of the person identified by the index number \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"used in the last person listing. Basic users can only view their own non-private exams.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_VIEW_EXAMS_PERSON_SUCCESS \u003d \"Viewing exams of Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            //check privilege level"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (privilege.getUser().equals(new BasicUser())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                final Optional\u003cReadOnlyPerson\u003e myPerson \u003d privilege.getMyReadOnlyPerson();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                //check if the user is logged in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (myPerson.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    // check if the user is targeting himself"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    if (target.equals(myPerson.get())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        return new CommandResult(String.format(MESSAGE_VIEW_EXAMS_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                target.getAsTextShowOnlyName()), target.getAsTextShowExam());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        return new CommandResult(Messages.MESSAGE_WRONG_TARGET);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    return new CommandResult(Messages.MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_VIEW_EXAMS_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        target.getAsTextShowOnlyName()), target.getAsTextShowAllExam());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Command.Category getCategory() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Command.Category.EXAM;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 12,
      "micklwl": 59
    }
  },
  {
    "path": "src/classrepo/commands/fees/EditFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.fees;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Fees;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Edits the fees of an existing person in the addressbook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class EditFeesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editfees\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Edits the fees of an existing person \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"in the address book. Fees are automatically marked as private.\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Parameters: INDEX FEES DUEDATE\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3264.90 22-12-2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fees updated: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Fees fees;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Use a constructor to update the fees values in AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public EditFeesCommand(int index, String fees, String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(index, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!Utils.isValidDate(date) \u0026\u0026 !\"0\".equals(date)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (\"0.00\".equals(fees)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_FEES_VALUE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        fees \u003d fees.replaceFirst (\"^0*\", \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d new Fees(fees, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public EditFeesCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Does nothing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Person person \u003d getTargetPerson();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                person.setFees(fees);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, person.getAsTextShowFee()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } catch (UniquePersonList.PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if the command can potentially change the data to be stored"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Command.Category getCategory() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Command.Category.FEES;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 19,
      "micklwl": 3,
      "lucdx": 62
    }
  },
  {
    "path": "src/classrepo/commands/fees/ListDueFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.fees;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Displays the names and fees of all people who have fees due with respect to today\u0027s date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class ListDueFeesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listdue\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Displays all the names and fees of people with fees due with respect to today\u0027s date.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String date \u003d java.time.LocalDate.now().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return new CommandResult(getMessageForFeesListShownSummary(addressBook.listdueFeesPerson(date)),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                addressBook.listdueFeesPerson(date), PersonListFormat.FEES_DUE_DETAILS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.FEES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 4,
      "micklwl": 2,
      "lucdx": 27
    }
  },
  {
    "path": "src/classrepo/commands/fees/ListFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.fees;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Lists the fees alongside the name for all persons in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class ListFeesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listfees\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Displays all names and fees in the address book.\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return new CommandResult(getMessageForFeesListShownSummary(addressBook.listFeesPerson()),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                addressBook.listFeesPerson(), PersonListFormat.FEES_DETAILS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.FEES;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 4,
      "micklwl": 1,
      "lucdx": 26
    }
  },
  {
    "path": "src/classrepo/commands/fees/PaidFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.fees;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Fees;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Removes the due fees from a respective person"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class PaidFeesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paidfees\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Removes the existing fees of a person \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"in the address book.\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fees paid: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_NO_FEES \u003d \"%1s does not have any due Fees.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Person person \u003d getTargetPerson();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                if (person.getFees().isEdited()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    person.setFees(new Fees());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    Set\u003cTag\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    temp \u003d person.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    for (Tag t : temp) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        if (\"feesdue\".equals(t.tagName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                            temp.remove(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    person.setTags(temp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_SUCCESS, person.getAsTextShowFee()), allPersons,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                            PersonListFormat.ALL_PUBLIC_DETAILS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    return new CommandResult(String.format(MESSAGE_NO_FEES, person.getAsTextShowOnlyName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if the command can potentially change the data to be stored"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Category.FEES;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 10,
      "lucdx": 67
    }
  },
  {
    "path": "src/classrepo/commands/fees/ViewFeesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.fees;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Shows the fees owed with respect to the person identified in the last displayed index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * It\u0027s a private detail which is showed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewFeesCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewfees\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Shows the fees of the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_VIEWFEE_PERSON_SUCCESS \u003d \"Viewing person: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public ViewFeesCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ViewFeesCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setTargetIndex(targetVisibleIndex, ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            addressBook.findPerson(target);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEWFEE_PERSON_SUCCESS, target.getName()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    target.getAsTextShowFee());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.FEES;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 10,
      "micklwl": 6,
      "lucdx": 44
    }
  },
  {
    "path": "src/classrepo/commands/general/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Exits the program.\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 10,
      "-": 16
    }
  },
  {
    "path": "src/classrepo/commands/general/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows program usage instructions.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String attachedErrorMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public HelpCommand(String attachedErrorMessage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.attachedErrorMessage \u003d attachedErrorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Creates the help manual to the user based on what commands they can access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String makeHelpManual() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cCommand\u003e allowedCommands \u003d privilege.getAllowedCommands();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        HashSet\u003cCategory\u003e seenCategories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Command command: allowedCommands) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Category category \u003d command.getCategory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!seenCategories.contains(category)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                builder.append(\u0027\\n\u0027).append(category.toString()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                seenCategories.add(category);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            builder.append(command.getCommandUsageMessage()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Removes the extra newline character added at the start"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        builder.deleteCharAt(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        attachedErrorMessage \u003d Optional.ofNullable(attachedErrorMessage).orElse(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(attachedErrorMessage, makeHelpManual());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 39,
      "micklwl": 4,
      "-": 15
    }
  },
  {
    "path": "src/classrepo/commands/person/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Adds a person to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Contact details can be marked private by prepending \u0027p\u0027 to the prefix.\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: NAME [p]p/PHONE [p]e/EMAIL [p]a/ADDRESS [t/TAG]...\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" John Doe p/98765432 e/johnd@gmail.com a/311, Clementi Ave 2, #02-25 t/friends t/owesMoney\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AddCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience constructor using raw values."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if any of the raw values are invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(String name,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                      String phone, boolean isPhonePrivate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                      String email, boolean isEmailPrivate,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                      String address, boolean isAddressPrivate,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                      Set\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d new Person("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(phone, isPhonePrivate),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(email, isEmailPrivate),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(address, isAddressPrivate),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyPerson getPerson() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e updatedList \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), updatedList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (UniquePersonList.DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 28,
      "micklwl": 9,
      "-": 60
    }
  },
  {
    "path": "src/classrepo/commands/person/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Clears address book permanently.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETING_SELF \u003d \"Clearing the address book\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \" will delete the currently logged in account.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Logout and raise privilege to Admin using master password to execute this command. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Raise privilege using master password to execute this command instead.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            checkIsLoggedIn();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.clearTakers();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e updatedList \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, updatedList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Privilege.SelfModifyingException sme) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_DELETING_SELF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void checkIsLoggedIn() throws Privilege.SelfModifyingException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (privilege.getMyPerson().isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new Privilege.SelfModifyingException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 38,
      "micklwl": 9,
      "-": 17
    }
  },
  {
    "path": "src/classrepo/commands/person/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Deletes a person identified using its last displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class DeleteCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Deletes the person identified by the index number used in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_DELETING_SELF \u003d \"You cannot delete the account your are logged-in as!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.checkTargetIsSelf(target);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.removePerson(target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final List\u003cReadOnlyPerson\u003e updatedList \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            Set\u003cExam\u003e examSet \u003d target.getExams();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            for (Exam e: examSet) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam updatedExam \u003d new Exam(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                updatedExam.setTakers(updatedExam.getTakers() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examBook.updateExam(e, updatedExam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook.updateExam(e, updatedExam);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, target), updatedList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Privilege.SelfModifyingException ste) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_DELETING_SELF);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (UniqueExamList.ExamNotFoundException enfe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamMutating() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 32,
      "micklwl": 18,
      "-": 26
    }
  },
  {
    "path": "src/classrepo/commands/person/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.keywords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns copy of keywords in this command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e personsFound \u003d getPersonsWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(personsFound), personsFound);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieve all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cReadOnlyPerson\u003e getPersonsWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cReadOnlyPerson\u003e matchedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(person.getName().getWordsInName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                matchedPersons.add(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return matchedPersons;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 25,
      "micklwl": 1,
      "-": 53
    }
  },
  {
    "path": "src/classrepo/commands/person/ListAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ListAllCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listall\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Displays all persons (showing all non-private details) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(allPersons), allPersons,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                PersonListFormat.ALL_PUBLIC_DETAILS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 21,
      "micklwl": 1,
      "-": 16
    }
  },
  {
    "path": "src/classrepo/commands/person/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Displays all persons (only names) in the address book as a list with index numbers.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e allPersons \u003d addressBook.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(allPersons), allPersons);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 14,
      "micklwl": 1,
      "-": 20
    }
  },
  {
    "path": "src/classrepo/commands/person/ViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows all details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewAllCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of the person \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"identified by the index number in the last shown person listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing person: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getName()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    target.getAsTextShowAll());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 18,
      "micklwl": 1,
      "-": 27
    }
  },
  {
    "path": "src/classrepo/commands/person/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Shows details of the person identified using the last displayed index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Private contact details, exams are not shown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewCommand extends IndexFormatCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows the non-private details excluding exams \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"of the person identified by the index number in the last person listing.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing person: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final ReadOnlyPerson target \u003d getTargetReadOnlyPerson();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBook.containsPerson(target)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, target.getName()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    target.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 17,
      "micklwl": 4,
      "-": 25
    }
  },
  {
    "path": "src/classrepo/commands/person/ViewSelfCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Shows all details of the logged in person."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Private contact details are shown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewSelfCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewself\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows all details of yourself.\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_VIEW_PERSON_DETAILS \u003d \"Viewing self: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cReadOnlyPerson\u003e myPerson \u003d privilege.getMyReadOnlyPerson();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return myPerson.map(a -\u003e new CommandResult(String.format(MESSAGE_VIEW_PERSON_DETAILS, a.getName()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                a.getAsTextShowAll()))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .orElse(new CommandResult(Messages.MESSAGE_NOT_LOGGED_IN));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Category.PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 39,
      "micklwl": 2
    }
  },
  {
    "path": "src/classrepo/commands/privilege/EditPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author 0wn643"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.privilege;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.KeywordsFormatCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Changes the master password to a new one."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Checks that the old password given is correct."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class EditPasswordCommand extends KeywordsFormatCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpw\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Changes master password to a new specified one.\\n\\t \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: OLD_PASSWORD NEW_PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" old_password sudo1234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Password changed to %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SAME_AS_OLD_PASSWORD \u003d \"New password entered is the same as old password\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int REQUIRED_ARGUMENTS \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String newPassword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String oldPassword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp(String[] arguments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assert(arguments.length \u003d\u003d REQUIRED_ARGUMENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.oldPassword \u003d arguments[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.newPassword \u003d arguments[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public int getNumRequiredArg () {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return REQUIRED_ARGUMENTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (oldPassword.equals(newPassword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(MESSAGE_SAME_AS_OLD_PASSWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.setMasterPassword(newPassword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, newPassword));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Logic.WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void validatePassword() throws Logic.WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!oldPassword.equals(addressBook.getMasterPassword())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new Logic.WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "0WN463": 69,
      "micklwl": 7
    }
  },
  {
    "path": "src/classrepo/commands/privilege/RaisePrivilegeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author 0wn643"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.privilege;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.KeywordsFormatCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic.WrongPasswordEnteredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Raises the current privilege to Admin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Checks if the password supplied is correct"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class RaisePrivilegeCommand extends KeywordsFormatCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"raise\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Raises your privilege level to Admin, requires master password.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: PASSWORD\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" default_password\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_PASSWORD \u003d \"Wrong password entered\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Privilege changed to %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_LOGGED_IN \u003d \"You are logged in as %1$s.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Logout to execute this command.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int REQUIRED_ARGUMENTS \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void validatePassword() throws WrongPasswordEnteredException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!password.equals(addressBook.getMasterPassword())) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new WrongPasswordEnteredException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (privilege.getMyPerson().isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOGGED_IN, privilege.getMyPerson().get().getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            validatePassword();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, privilege.getLevelAsString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (WrongPasswordEnteredException wpe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new CommandResult(MESSAGE_WRONG_PASSWORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp(String[] arguments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assert(arguments.length \u003d\u003d REQUIRED_ARGUMENTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.password \u003d arguments[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public int getNumRequiredArg() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return REQUIRED_ARGUMENTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "0WN463": 64,
      "micklwl": 5
    }
  },
  {
    "path": "src/classrepo/commands/privilege/SetPermanentAdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.privilege;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Set/Unset the Privilege of AddressBook to be permanently Admin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class SetPermanentAdminCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"perm\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Sets/unset the Privilege of this application to be permanently Admin.\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Parameters: STATUS\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"STATUS can be either \\\"true\\\" or \\\"false\\\" \\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Admin set to%s permanent\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final boolean isPerm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Constructor used for Privileges"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Command constructed has no functionality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public SetPermanentAdminCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPerm \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public SetPermanentAdminCommand(boolean isPerm) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.isPerm \u003d isPerm;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setPermAdmin(isPerm);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String modifierWord \u003d isPerm ? \"\" : \" not\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, modifierWord));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isMutating() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 57
    }
  },
  {
    "path": "src/classrepo/commands/privilege/ViewPrivilegeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.commands.privilege;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.MessageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Shows current privilege level to the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class ViewPrivilegeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewpri\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":\\n\" + \"Shows your current privilege level.\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PRIVILEGE_FORMAT \u003d \"Your privilege is %1$s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_LOGGED_IN \u003d \"You are logged in as: %s.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"You are not logged in.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String feedbackToUser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cPerson\u003e optMyPerson \u003d privilege.getMyPerson();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (optMyPerson.isPresent()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            feedbackToUser \u003d String.format(MESSAGE_LOGGED_IN, optMyPerson.get().getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            feedbackToUser \u003d MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        feedbackToUser +\u003d String.format(MESSAGE_PRIVILEGE_FORMAT, privilege.getLevelAsString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new CommandResult(feedbackToUser, MessageType.OUTPUT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Category.PRIVILEGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getCommandUsageMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 44,
      "micklwl": 1
    }
  },
  {
    "path": "src/classrepo/common/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_COMMAND_NOT_FOUND \u003d \"Command not recognised! Displaying commands available.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid. \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Run the list/find command to generate a list of person.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_ADDRESSBOOK \u003d \"Person could not be found in address book!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_STATISTIC_NOT_IN_STATISTICSBOOK \u003d \"Statistic could not be found in statistics \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"book!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_INVALID_STATISTICS_DISPLAYED_INDEX \u003d \"The statistics index provided is invalid. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Run the liststatistics command to generate a list of statistics.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE \u003d \"Launch command format: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"java Main [STORAGE_FILE_PATH]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USING_STORAGE_FILE \u003d \"Using storage file : %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PRIVILEGE \u003d \"Insufficient Privilege.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"Requires privilege level of %s, but current level is %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_NOT_LOGGED_IN \u003d \"Unable to process command as user is not logged in.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WRONG_NUMBER_ARGUMENTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Wrong number of arguments, expected %d, actual %d.\\n%s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_FEES_LISTED_OVERVIEW \u003d \"%1$d fees listed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_USING_EXAMS_FILE \u003d \"Using exams file : %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAMS_LISTED_OVERVIEW \u003d \"%1$d exams listed!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_USING_STATISTICS_FILE \u003d \"Using statistics file : %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_STATISTICS_LISTED_OVERVIEW \u003d \"%1$d statistics listed!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_INVALID_GRADES \u003d \"Invalid command format! - Value of grades is out of bounds!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_EXAM_NOT_IN_EXAMBOOK \u003d \"Exam could not be found in exam book!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_INVALID_EXAM_DISPLAYED_INDEX \u003d \"The exam index provided is invalid. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Run the examslist command to generate a list of exams.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX \u003d \"The assessment index provided is invalid. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            + \"Run the listassess command to generate a list of assessments.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENT_NOT_IN_ADDRESSBOOK \u003d \"Assessment could not be found in address book!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENTS_LISTED_OVERVIEW \u003d \"%1$d assessments listed!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date format should be in DD-MM-YYYY and be valid dates.\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_FEES_VALUE_CONSTRAINTS \u003d \"Fees must be positive and not be 0.00.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_NO_NON_PRIVATE_EXAMS \u003d \"%1$s has no non-private exams.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_NO_EXAMS \u003d \"%1$s has no exams.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_WRONG_TARGET \u003d \"You cannot check the exams of others.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_WELCOME_ASCII_ART \u003d \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"   _____ _               _____                   __      ____ _  _   \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"  / ____| |             |  __ \\\\                  \\\\ \\\\    / /_ | || |  \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \" | |    | | __ _ ___ ___| |__) |___ _ __   ___    \\\\ \\\\  / / | | || |_ \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \" | |    | |/ _` / __/ __|  _  // _ \\\\ \u0027_ \\\\ / _ \\\\    \\\\ \\\\/ /  | |__   _|\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \" | |____| | (_| \\\\__ \\\\__ \\\\ | \\\\ \\\\  __/ |_) | (_) |    \\\\  /   | |_ | |  \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"  \\\\_____|_|\\\\__,_|___/___/_|  \\\\_\\\\___| .__/ \\\\___/      \\\\/    |_(_)|_|  \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"                                   | |                               \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"                                   |_|                               \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 11,
      "0WN463": 18,
      "micklwl": 12,
      "lucdx": 3,
      "-": 10
    }
  },
  {
    "path": "src/classrepo/common/Pair.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Generic class that is based of C++ version of Pairs*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Pair\u003cF, S\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private F first;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private S second;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Pair(F first, S second) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public F getFirst() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public S getSecond() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 19
    }
  },
  {
    "path": "src/classrepo/common/Utils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd-MM-yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether any of the given items are null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNull(Object... items) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            if (item \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if every element in a collection are unique by {@link Object#equals(Object)}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final List\u003cObject\u003e testSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Object item: items) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (objectIsInList(testSet, item)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            testSet.add(item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Checks if an object is exists in the list*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static boolean objectIsInList (List\u003cObject\u003e list, Object object) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (!list.stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(p -\u003e (p \u003d\u003d null \u0026\u0026 object \u003d\u003d null)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        || (p !\u003d null \u0026\u0026 p.equals(object)))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Solution below adapted from https://stackoverflow.com/a/30578421"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidDate(String value) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isValid;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String parsedDate \u003d LocalDate.parse(value, formatter).format(formatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isValid \u003d value.equals(parsedDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Custom comparator for Date string in Fees in the form of DD-MM-YYYY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Allows for sorting of Person\u0027s list according to YYYYMMDD of Fees section."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static class FeesComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        public int compare(Person p1, Person p2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            String person1 \u003d convertToValidDateStringUser(p1.getFees().duedate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            String person2 \u003d convertToValidDateStringUser(p2.getFees().duedate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return person1.compareTo"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    (person2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Date Converter to use for comparisons during Fees command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Such as sorting and if dates have passed relative to User\u0027s current date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static String convertToValidDateStringUser (String value) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 6, 10);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 3, 5);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 0, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Date Converter for system date to String for comparison"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static String convertToValidDateStringSystem (String value) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 0, 4);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 5, 7);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        result.append(value, 8, 10);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 17,
      "micklwl": 20,
      "lucdx": 39,
      "-": 31
    }
  },
  {
    "path": "src/classrepo/data/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList.AssessmentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList.DuplicateAssessmentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList.PersonNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the entire address book. Contains the data of the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String DEFAULT_MASTER_PASSWORD \u003d \"default_pw\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList allPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final UniqueAssessmentsList allAssessments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String masterPassword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isPermAdmin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments \u003d new UniqueAssessmentsList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        masterPassword \u003d DEFAULT_MASTER_PASSWORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an address book with the given data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons external changes to this will not affect this address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param masterPassword contains the master password to raise Privilege to Admin level"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AddressBook(UniquePersonList persons, UniqueAssessmentsList assessments, String masterPassword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allPersons \u003d new UniquePersonList(persons);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments \u003d new UniqueAssessmentsList(assessments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.masterPassword \u003d Optional.ofNullable(masterPassword)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .orElse(DEFAULT_MASTER_PASSWORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setMasterPassword(String masterPassword) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.masterPassword \u003d masterPassword;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static AddressBook empty() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.add(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds an assessment to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if an equivalent assessment already exists."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessment(Assessment toAdd) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments.add(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if an equivalent person exists in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsPerson(ReadOnlyPerson key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.contains(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.remove(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent assessment from the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such Assessment could be found."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeAssessment(Assessment toRemove) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        allAssessments.remove(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPersonByUsername(String username) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.findPersonByUsername(username);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Boolean containsPersonWithUsername(String username) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.containsPersonWithUsername(username);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Finds and returns the given person in the AddressBook"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException if no such Person could be found."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPerson(ReadOnlyPerson person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allPersons.find(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Updates a particular exam to its new value"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the original exam"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param newExam the new exam to be updated to"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void updateExam(Exam exam, Exam newExam) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        allPersons.updateExam(exam, newExam);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes a particular exam from all persons"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the exam"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeExam(ReadOnlyExam exam) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        allPersons.removeExam(exam);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes all exams from all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clearAllExam() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        allPersons.clearAllExam();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Loops through the list to get fees"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e listFeesPerson() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return allPersons.listFees();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Loops through the list to get overdue fees"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e listdueFeesPerson(String date) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return allPersons.listdueFees(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons from the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        allPersons.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Defensively copied UniquePersonList of all persons in the address book at the time of the call."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList getAllPersons() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UniquePersonList(allPersons);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Defensively copied UniqueAssessmentList of all assessments in the address book at the time of the call."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList getAllAssessments() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new UniqueAssessmentsList(allAssessments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getMasterPassword() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return masterPassword;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isPermAdmin() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return isPermAdmin;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPermAdmin(boolean permAdmin) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPermAdmin \u003d permAdmin;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public List getPresentPeople(String date) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return allPersons.listOfPresentPeople(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public List getAbsentPeople(String date) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return allPersons.listOfAbsentPeople(date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.allPersons.equals(((AddressBook) other).allPersons));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return allPersons.hashCode();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 30,
      "0WN463": 59,
      "micklwl": 25,
      "lucdx": 14,
      "meisbokai": 8,
      "-": 73
    }
  },
  {
    "path": "src/classrepo/data/ExamBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents the entire exam book. Contains the data of the exam book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final UniqueExamList examList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates an empty exam book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList \u003d new UniqueExamList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs an exam book with the given data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examList external changes to this will not affect this exam book"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook(UniqueExamList examList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examList \u003d new UniqueExamList(examList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static ExamBook empty() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds a exam to the exam book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.DuplicateExamException if an exam with equivalent base data already exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addExam(Exam toAdd) throws UniqueExamList.DuplicateExamException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the equivalent exam from the exam book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.ExamNotFoundException if no such Exam could be found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void removeExam(ReadOnlyExam toRemove) throws UniqueExamList.ExamNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.remove(toRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams from the exam book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Defensively copied UniqueExamList of all exams in the exam book at the time of the call."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList getAllExam() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new UniqueExamList(examList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Edits an exam in the ExamBook, potentially changing its index number when listing again"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.ExamNotFoundException if no such exam could be found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.DuplicateExamException if the new exam already exists in the exam book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExam(ReadOnlyExam target, Exam editedExam)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throws UniqueExamList.ExamNotFoundException, UniqueExamList.DuplicateExamException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examList.contains(target)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examList.add(editedExam);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examList.remove(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new UniqueExamList.ExamNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Finds and returns the given exam in the ExamBook"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.ExamNotFoundException if no such Exam could be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Exam findExam(ReadOnlyExam exam) throws UniqueExamList.ExamNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList.find(exam);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if an equivalent exam exists in the exam book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean contains(ReadOnlyExam exam) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList.containsFully(exam);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Updates a particular exam to its new value at the same index number"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the original exam"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param updatedExam the new exam to be updated to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueExamList.ExamNotFoundException if no such Exam could be found"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void updateExam(Exam exam, Exam updatedExam) throws UniqueExamList.ExamNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.updateExam(exam, updatedExam);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears number of takers for all exams"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clearTakers() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examList.clearTakers();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof ExamBook // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.examList.equals(((ExamBook) other).examList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 3,
      "0WN463": 16,
      "micklwl": 107
    }
  },
  {
    "path": "src/classrepo/data/StatisticsBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents the entire statistics book. Contains the data of the statistics book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class StatisticsBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final UniqueStatisticsList statisticsList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Creates an empty statistics book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList \u003d new UniqueStatisticsList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a statistics book with the given data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param statisticsList external changes to this will not affect this statistic book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook(UniqueStatisticsList statisticsList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsList \u003d new UniqueStatisticsList(statisticsList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static StatisticsBook empty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds a statistic to the statistics book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueStatisticsList.DuplicateStatisticsException if an equivalent statistic already exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addStatistic(AssignmentStatistics toAdd) throws UniqueStatisticsList.DuplicateStatisticsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.add(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if an equivalent statistic exists in the statistics book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean containsStatistic(AssignmentStatistics key) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.contains(key);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent statistic from the statistic book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws UniqueStatisticsList.StatisticsNotFoundException if no such statistic could be found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void removeStatistic(AssignmentStatistics toRemove) throws UniqueStatisticsList.StatisticsNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.remove(toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Defensively copied UniqueStatisticsList of all statistics in the statistics book at the time of the call."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList getAllStatistics() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new UniqueStatisticsList(statisticsList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof StatisticsBook // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.statisticsList.equals(((StatisticsBook) other).statisticsList));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all statistics from the statistics book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 76,
      "0WN463": 7
    }
  },
  {
    "path": "src/classrepo/data/account/Account.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents an account in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Account implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final Privilege privilege;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Account(String username, String password, String privilege) throws IllegalValueException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d username.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.username \u003d trimmedName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.password \u003d trimmedPassword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d Privilege.getPrivilegeFromString(privilege);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege getPrivilege() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return privilege;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPrivilegePerson(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                || (other instanceof Account // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \u0026\u0026 this.username.equals(((Account) other).username)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // We only print the privilege levels as we do not want any users to see others username/password"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return privilege.getLevelAsString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 51
    }
  },
  {
    "path": "src/classrepo/data/exception/DuplicateDataException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals an error caused by duplicate data where there should be none."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class DuplicateDataException extends IllegalValueException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicateDataException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "-": 9
    }
  },
  {
    "path": "src/classrepo/data/exception/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "-": 12
    }
  },
  {
    "path": "src/classrepo/data/person/Assessment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList.DuplicateGradesException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents an assessment conducted in the school, stored in the addressbook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"CG2271 Midterms\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_ASSESSMENT_CONSTRAINTS \u003d \"Assessment name can contain alpha-numeric characters\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String ASSESSMENT_VALIDATION_REGEX \u003d \"^.*$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Map\u003cPerson, Grades\u003e grade;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given results."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if given results string is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment(String examName) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidAssessment(examName)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ASSESSMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.grade \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if a given string is a valid assessment."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidAssessment(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return test.matches(ASSESSMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns the grades for a specfic person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Grades getGrade(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return this.grade.get(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds the grades given to a specific person"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addGrade(Person person, Grades grades) throws DuplicateGradesException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        grade.put(person, grades);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes all the grades for the assessment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeAllGrades() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        grade.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the grades for a specfic person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeGrades(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        grade.remove(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns the entire map of grades for all students for this assessment"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Map\u003cPerson, Grades\u003e getAllGrades() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns the name of the assessment"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(examName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Formats the assessment as text to show all."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getAsTextShowAll() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableAssessment(examName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof Assessment // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.examName.equals(((Assessment) other).examName)); // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 107,
      "0WN463": 4
    }
  },
  {
    "path": "src/classrepo/data/person/AssignmentStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents a statistic in the statistics book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AssignmentStatistics implements Printable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"Math Midterms\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final double AVERAGE_SCORE_EXAMPLE \u003d 80.5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final int TOTAL_EXAM_TAKERS_EXAMPLE \u003d 84; //Number of students who attended test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final double MAX_SCORE_EXAMPLE \u003d 87; //maximum score"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final double MIN_SCORE_EXAMPLE \u003d 60; //minimum score"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double averageScore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private int totalExamTakers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double maxScore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double minScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given statistics."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics(String examName, double averageScore, int totalExamTakers, double maxScore,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                double minScore) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.averageScore \u003d averageScore;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.totalExamTakers \u003d totalExamTakers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.minScore \u003d minScore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName + \" Average Score: \" + averageScore + \" Total Exam Takers: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + totalExamTakers + \" Max Score: \" + maxScore + \" Min Score: \" + minScore;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof AssignmentStatistics // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.examName.equals(((AssignmentStatistics) other).examName)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(averageScore, totalExamTakers, maxScore, minScore);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \"Exam: \" + examName + \" || Average: \" + averageScore + \" || Attendees: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + totalExamTakers + \" || Max: \" + maxScore + \" || Min: \" + minScore;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Formats the assessment as text to show all."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getAsTextShowAll() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String stringChain \u003d getPrintableString(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public double getAverageScore() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return averageScore;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int getTotalExamTakers() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return totalExamTakers;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public double getMaxScore() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return maxScore;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public double getMinScore() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return minScore;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 93,
      "0WN463": 1
    }
  },
  {
    "path": "src/classrepo/data/person/Attendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " * Represents a person\u0027s attendance in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class Attendance implements Printable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Represents a map for each person, showing which every attendance for each date*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private Map\u003cString, Boolean\u003e attendancePersonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Method to add attendance*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean addAttendance(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String inputDate \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (\"0\".equals(date)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            inputDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // return true if duplicate date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (attendancePersonMap.containsKey(inputDate) \u0026\u0026 overWrite) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            attendancePersonMap.put(inputDate, isPresent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } else if (attendancePersonMap.containsKey(inputDate) \u0026\u0026 !overWrite) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } else if (!attendancePersonMap.containsKey(inputDate) \u0026\u0026 overWrite) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            attendancePersonMap.put(inputDate, isPresent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Method to reiterate person\u0027s attendance */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String viewAttendance() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String output \u003d \"Date \\t\\t Attendance\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String attendance \u003d \"Absent\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        for (Map.Entry entry : attendancePersonMap.entrySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (entry.getValue().equals(true)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                attendance \u003d \"Present\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            output +\u003d entry.getKey() + \"\\t\\t\" + attendance + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (\"Date \\t\\t Attendance\\n\".equals(output)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            output +\u003d \"NIL\\t\\t\\t NIL\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Method to get attendance of a particular date **/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Boolean viewAttendanceDate(String date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String lookForDate \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (\"0\".equals(date)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            lookForDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Boolean isPresent \u003d attendancePersonMap.get(lookForDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (null \u003d\u003d isPresent) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return isPresent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Accessor Method **/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Map\u003cString, Boolean\u003e getAttendancePersonMap() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return this.attendancePersonMap;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return \"{}\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                \u0026\u0026 this.attendancePersonMap.equals(((Attendance) other).attendancePersonMap)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "meisbokai": 90
    }
  },
  {
    "path": "src/classrepo/data/person/Exam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Utils.isValidDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents an exam in the exam book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class Exam implements ReadOnlyExam {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_NAME_EXAMPLE \u003d \"Midterms\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String SUBJECT_NAME_EXAMPLE \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_DATE_EXAMPLE \u003d \"01-12-2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_START_TIME_EXAMPLE \u003d \"09:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_END_TIME_EXAMPLE \u003d \"10:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String EXAM_DETAILS_EXAMPLE \u003d \"Held in MPSH\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Time should be in 24 hours format HH:MM and valid.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String MESSAGE_TIME_INTERVAL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"Time interval is inaccurate.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static final String TIME_VALIDATION_REGEX \u003d \"(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static final String TIME_PATTERN \u003d \"HH:mm\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examStartTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examEndTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDetails;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private int takers \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Validates a fresh given exam."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if given exam date or time string is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if time interval is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam(String examName, String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String examEndTime, String examDetails, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examName \u003d examName.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.subjectName \u003d subjectName.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedDate \u003d examDate.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDate \u003d trimmedDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedStartTime \u003d examStartTime.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String trimmedEndTime \u003d examEndTime.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidTime(trimmedStartTime) || !isValidTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidTimeInterval(trimmedStartTime, trimmedEndTime)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_INTERVAL_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examStartTime \u003d trimmedStartTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examEndTime \u003d trimmedEndTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examDetails \u003d examDetails.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Validates a given exam."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if given exam date or time string is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if time interval is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam(String examName, String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String examEndTime, String examDetails, int takers, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, isPrivate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.takers \u003d takers;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Copy constructor"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam(ReadOnlyExam original) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examName \u003d original.getExamName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        subjectName \u003d original.getSubjectName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDate \u003d original.getExamDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examStartTime \u003d original.getExamStartTime();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examEndTime \u003d original.getExamEndTime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDetails \u003d original.getExamDetails();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        takers \u003d original.getTakers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        isPrivate \u003d original.isPrivate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given string is a valid time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidTime(String value) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return value.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if a given time interval is valid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static boolean isValidTimeInterval(String examStart, String examEnd) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isValid;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(TIME_PATTERN);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(examStart, formatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(examEnd, formatter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isValid \u003d startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof ReadOnlyExam // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyExam) other)); // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Objects.hash(examName, subjectName, examDate, examStartTime, examEndTime,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examDetails, takers, isPrivate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getSubjectName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return subjectName;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamStartTime() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examStartTime;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamEndTime() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examEndTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamDetails() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examDetails;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int getTakers() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return takers;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setTakers(int takers) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.takers \u003d takers;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * To check if an exam is fully equal to another exam"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equalsFully(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof ReadOnlyExam // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.isFullyEqual((ReadOnlyExam) other)); // state check"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 4,
      "micklwl": 187
    }
  },
  {
    "path": "src/classrepo/data/person/Fees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents a person\u0027s fees due in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class Fees implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String EXAMPLE \u003d \"$3560.98\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String MESSAGE_FEES_CONSTRAINTS \u003d \"Person\u0027s fees should be positive and have 2 decimal places.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String FEES_VALIDATION_REGEX \u003d \"[0-9]+([,.][0-9]{1,2})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public final String duedate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private boolean isEdited \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given fees."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @throws IllegalValueException if given fees string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees(String fees, String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!isValidFees(fees)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            throw new IllegalValueException(MESSAGE_FEES_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!isValidDate(date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.value \u003d fees;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.duedate \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Initialises all fees of everyone to 0."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.value \u003d \"0.00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.duedate \u003d \"00-00-0000\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if a given string is a valid person fee."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static boolean isValidFees(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return test.matches(FEES_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isEdited() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return isEdited; }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Changes the value of isEdited, whenever a fee is set accordingly."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param val"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void getEdited(boolean val) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        isEdited \u003d val;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (isPrivate()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return \"{private Fees: \" + value + \" / \" + duedate + \"} \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return \"Fees: \" + value + \" \" + duedate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 3,
      "lucdx": 83
    }
  },
  {
    "path": "src/classrepo/data/person/Grades.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * Represents the grades or marks of a person"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class Grades implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String GRADE_EXAMPLE \u003d \"27\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String MESSAGE_GRADES_CONSTRAINTS \u003d \"Person\u0027s grades can only be a positive value (\u003e\u003d 0).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Validates given grades."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Grades(double grade) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidGrades(grade)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GRADES_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.value \u003d grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if a given value is a valid grade."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static boolean isValidGrades(Double test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return (test \u003e\u003d 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \" Grade: \" + value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof Grades // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d (((Grades) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return \"Grade: \" + value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 61,
      "0WN463": 2
    }
  },
  {
    "path": "src/classrepo/data/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Fees fees;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final Set\u003cExam\u003e exams \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final Set\u003cAssessment\u003e assessments \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d new Fees();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Assumption: Every field must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cExam\u003e exams) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.fees \u003d new Fees();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.exams.addAll(exams);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this(source.getName(), source.getPhone(), source.getEmail(), source.getAddress(), source.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Only update the assessment when called in AddAssessmentCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.assessments.add(assessment);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Only update the fees when called in EditFeesCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param fees"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void setFees(Fees fees) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        this.fees \u003d fees;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (this.fees.duedate.equals(\"00-00-0000\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            this.fees.getEdited(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            this.fees.getEdited(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in {@code replacement}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        tags.addAll(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Only adds the exam when called in RegisterExamCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam to add into person"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExam(Exam exam) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exams.add(exam);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the exam is already registered"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isExamPresent(ReadOnlyExam exam) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isPresent \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (exams.contains(exam)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isPresent \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the specified exam"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam to remove from person"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeExam(ReadOnlyExam exam) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exams.remove(exam);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clearExams() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exams.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setAccount(Account account) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeAccount() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        account \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Set\u003cAssessment\u003e getAssessments() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new HashSet\u003c\u003e(assessments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if the assessment is already added"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAssessmentPresent(Assessment assessment) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        boolean assessmentPresent \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (assessments.contains(assessment)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assessmentPresent \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return assessmentPresent;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the specified assessment"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessment to remove from person"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void removeAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assessments.remove(assessment);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees getFees() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return fees; }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Set\u003cExam\u003e getExams() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new HashSet\u003c\u003e(exams);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cAccount\u003e getAccount() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(account);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Objects.hash(name, phone, email, address, fees, tags);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsTextShowAll();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Has a boolean to check if the date is a duplicate **/"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean updateAttendanceMethod(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        boolean duplicateDate \u003d attendance.addAttendance(date, isPresent, overWrite);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return duplicateDate;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Method to allow user to view the attendance of a person **/"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public String viewAttendanceMethod() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return attendance.viewAttendance();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Replaces the attendance if there is already a duplicate **/"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean replaceAttendanceMethod(String date, Boolean isPresent, Boolean overWrite) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        boolean duplicateDate \u003d attendance.addAttendance(date, isPresent, overWrite);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return duplicateDate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Method to get the attendance of a particular date **/"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Boolean viewAttendanceDateMethod(String date) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return attendance.viewAttendanceDate(date);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Setter for attendance **/"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 32,
      "0WN463": 16,
      "micklwl": 70,
      "lucdx": 18,
      "meisbokai": 32,
      "-": 75
    }
  },
  {
    "path": "src/classrepo/data/person/Printable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * A interface for Printable objects in the Addressbook."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public interface Printable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String getPrintableString(boolean showPrivate);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 7
    }
  },
  {
    "path": "src/classrepo/data/person/ReadOnlyExam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * A read-only immutable interface for an Exam in the exam book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public interface ReadOnlyExam {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamName();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getSubjectName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamStartTime();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamEndTime();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    String getExamDetails();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    int getTakers();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    boolean isPrivate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Formats the exam as text to show all."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableExam(getExamName(), getSubjectName(), getExamDate(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                getExamStartTime(), getExamEndTime(), getExamDetails(), getTakers(), isPrivate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Does not include takers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyExam other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getSubjectName().equalsIgnoreCase(this.getSubjectName()) // state checks here onwards"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamName().equalsIgnoreCase(this.getExamName())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDate().equalsIgnoreCase(this.getExamDate())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamStartTime().equalsIgnoreCase(this.getExamStartTime())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamEndTime().equalsIgnoreCase(this.getExamEndTime())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDetails().equalsIgnoreCase(this.getExamDetails())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 (other.isPrivate() \u003d\u003d this.isPrivate()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if the values inside this object is fully the same as those of the other"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Includes details and takers"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default boolean isFullyEqual(ReadOnlyExam other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getSubjectName().equalsIgnoreCase(this.getSubjectName()) // state checks here onwards"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamName().equalsIgnoreCase(this.getExamName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDate().equalsIgnoreCase(this.getExamDate())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamStartTime().equalsIgnoreCase(this.getExamStartTime())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamEndTime().equalsIgnoreCase(this.getExamEndTime())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getExamDetails().equalsIgnoreCase(this.getExamDetails())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 other.getTakers() \u003d\u003d this.getTakers()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 (other.isPrivate() \u003d\u003d this.isPrivate()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "micklwl": 62
    }
  },
  {
    "path": "src/classrepo/data/person/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    Optional\u003cAccount\u003e getAccount();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    Fees getFees();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    Attendance getAttendance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    Set\u003cExam\u003e getExams();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    Set\u003cAssessment\u003e getAssessments();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The returned {@code Set} is a deep copy of the internal {@code Set},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * changes on the returned list will not affect the person\u0027s internal tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    default boolean hasAccount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return getAccount().isPresent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns true if the values inside this object is same as those of the other"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * (Note: interfaces cannot override .equals)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Formats the person as text, showing only Name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    default String getAsTextShowOnlyName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextShowAll() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getPhone(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getEmail(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getAddress());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        getAttendance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (getFees().isEdited()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            builder.append(Formatter.getPrintableString(true, getFees()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(\"Tags: \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam exam : getExams()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (exam.isPrivate()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                builder.append(\"{\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            builder.append(exam);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (exam.isPrivate()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                builder.append(\"}\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment assessment : getAssessments()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            builder.append(\"Assessment: \").append(assessment).append(\" \").append(assessment.getGrade(this));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        getAccount().ifPresent(a -\u003e builder.append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(\"User Type: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(a.getPrintableString(true)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsTextHidePrivate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getPhone(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                getEmail(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getAddress(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getFees());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        getAttendance();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        builder.append(stringChain)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(\"Tags: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        getAccount().ifPresent(a -\u003e builder.append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(\"User Type:\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .append(a.getPrintableString(true)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Formats a person as text, showing only non-private contact details."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    default String getAsTextShowAccount() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder(getName().getPrintableString(true));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        getAccount().ifPresent(a -\u003e builder.append(\" User Type: \").append(a.getPrintableString(true)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Formats the person as text, showing name and fees and status due."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    default String getAsTextShowDueFee() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getName(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getFees());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(\"Due!\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Formats the person as text, showing name and fees."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    default String getAsTextShowFee() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                getName());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (getFees().isEdited()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            builder.append(Formatter.getPrintableString(true, getFees()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            builder.append(\"No Fees owed!\\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Formats the person as text, showing name and assessments + grades."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    default String getAsTextShowAssess() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String stringChain \u003d Formatter.getPrintableString(true, getName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        builder.append(stringChain);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment assessment : getAssessments()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (assessment.getGrade(this) \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            builder.append(\"Assessment: \").append(assessment).append(\" \").append(assessment.getGrade(this))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Formats the person as text, showing name and non-private exams."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default String getAsTextShowExam() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam exam : getExams()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (exam.isPrivate()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            builder.append(exam).append(\"\\n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (builder.toString().isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            builder.append(String.format(Messages.MESSAGE_NO_NON_PRIVATE_EXAMS, getName()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Formats the person as text, showing name and all exams."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    default String getAsTextShowAllExam() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (getExams().isEmpty()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            builder.append(String.format(Messages.MESSAGE_NO_EXAMS, getName()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            for (Exam exam : getExams()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                builder.append(exam).append(\"\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 26,
      "0WN463": 52,
      "micklwl": 45,
      "lucdx": 39,
      "meisbokai": 3,
      "-": 51
    }
  },
  {
    "path": "src/classrepo/data/person/UniqueAssessmentsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * A list of assessments. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class UniqueAssessmentsList implements Iterable\u003cAssessment\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003cAssessment\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class DuplicateAssessmentException extends DuplicateDataException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        protected DuplicateAssessmentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(\"Operation would result in duplicate assessments\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class DuplicateGradesException extends DuplicateDataException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        protected DuplicateGradesException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(\"Operation would result in duplicate assessments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation targeting a specified assessment in the list would fail because"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * there is no such matching assessment in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class AssessmentNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs empty assessment list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs an assessment list with the given assessments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(Assessment... assessments) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssessment\u003e initialTags \u003d Arrays.asList(assessments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessments a collection of assessments"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if the {@code assessment} contains duplicate assessments"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(Collection\u003cAssessment\u003e assessments) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(assessments)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(assessments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueAssessmentsList(UniqueAssessmentsList source) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link Assessment}s."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e immutableListView() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if the list contains an equivalent assessment as the given argument."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean contains(Assessment toCheck) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds an assessment to the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateAssessmentException if the assessment to add is a duplicate of an existing assessment in the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void add(Assessment toAdd) throws DuplicateAssessmentException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Finds the equivalent assessment from the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such assessment could be found in the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment find(Assessment assessment) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment p: internalList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (p.equals(assessment)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent assessment from the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException if no such assessment could be found in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void remove(Assessment toRemove) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final boolean assessmentFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!assessmentFoundAndDeleted) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all assessments in list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Finds and returns the assessment which has the given name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param examName"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return The assessment which matches the name. This should be guaranteed to be unique."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws AssessmentNotFoundException"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment findAssessmentByName(String examName) throws AssessmentNotFoundException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment p: internalList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (p.getExamName().equals(examName)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Iterator\u003cAssessment\u003e iterator() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof UniqueAssessmentsList // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                (UniqueAssessmentsList) other).internalList));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 174,
      "0WN463": 3
    }
  },
  {
    "path": "src/classrepo/data/person/UniqueExamList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * A list of all exams sorted by the subject names. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * @see Exam#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class UniqueExamList implements Iterable\u003cExam\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final List\u003cExam\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class DuplicateExamException extends DuplicateDataException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        protected DuplicateExamException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            super(\"Operation would result in duplicate exams\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that an operation targeting a specified exam in the list would fail because"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * there is no such matching exam in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class ExamNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs empty exam list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exams a collection of exams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws DuplicateExamException if the {@code exams} contains duplicate exams"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList(Collection\u003cExam\u003e exams) throws DuplicateExamException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!Utils.elementsAreUnique(exams)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new DuplicateExamException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.addAll(exams);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public UniqueExamList(UniqueExamList source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the list contains an equivalent base exam as the given argument."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean contains(ReadOnlyExam toCheck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks if the list contains an fully equivalent exam as the given argument."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean containsFully(ReadOnlyExam toCheck) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam e: internalList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (e.equalsFully(toCheck)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds a exam to the list. Performs a sort to ensure list is sorted by subject name."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws DuplicateExamException if the exam is a duplicate of an existing base exam in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void add(Exam toAdd) throws DuplicateExamException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new DuplicateExamException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the equivalent exam from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such exam could be found in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void remove(ReadOnlyExam toRemove) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final boolean examFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!examFoundAndDeleted) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyExam}s."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cReadOnlyExam\u003e immutableListView() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams in list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Finds the equivalent base exam from the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if no such exam could be found in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam find(ReadOnlyExam exam) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam p: internalList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (p.equals(exam)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Replaces an exam and adds in a new exam with updated details at the same index"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the original exam."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param updatedExam the new exam with updated details."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws ExamNotFoundException if the original base exam could not be found in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void updateExam(Exam exam, Exam updatedExam) throws ExamNotFoundException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isExamPresent \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (internalList.contains(exam)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            isExamPresent \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            int index \u003d internalList.indexOf(exam);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            internalList.remove(exam);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            internalList.add(index, updatedExam);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isExamPresent) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new ExamNotFoundException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clear number of takers for all exams"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clearTakers() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam e: internalList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.setTakers(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Iterator\u003cExam\u003e iterator() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof UniqueExamList // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                (UniqueExamList) other).internalList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Sorts all exams in list by their subject names."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        internalList.sort((Exam name1, Exam name2)-\u003ename1.getSubjectName().compareToIgnoreCase(name2.getSubjectName()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 3,
      "micklwl": 183
    }
  },
  {
    "path": "src/classrepo/data/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final List\u003cPerson\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicatePersonException extends DuplicateDataException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicatePersonException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation targeting a specified person in the list would fail because"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * there is no such matching person in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class PersonNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param persons a collection of persons"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the {@code persons} contains duplicate persons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(Collection\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Utils.elementsAreUnique(persons)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(persons);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniquePersonList(UniquePersonList source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link ReadOnlyPerson}s."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e immutableListView() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(ReadOnlyPerson toCheck) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Finds the equivalent person from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person find(ReadOnlyPerson readOnlyPerson) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(p -\u003e p.equals(readOnlyPerson))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .orElseThrow(PersonNotFoundException:: new);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personFoundAndDeleted) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Loops through list and appends data to string person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e listdueFees(String date) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (internalList.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e copy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            if (p.getFees().isEdited()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String p1 \u003d Utils.convertToValidDateStringUser(p.getFees().duedate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String currentDate \u003d Utils.convertToValidDateStringSystem(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                if (p1.compareTo(currentDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    copy.add(p);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        Set\u003cTag\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        temp \u003d p.getTags();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        temp.add(new Tag(\"feesdue\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        p.setTags(temp);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    Set\u003cTag\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    temp \u003d p.getTags();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    for (Tag t : temp) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        if (\"feesdue\".equals(t.tagName)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                            temp.remove(t);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    p.setTags(temp);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        copy.sort(new Utils.FeesComparator());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Collections.unmodifiableList(copy);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Loops through list and appends data to string person."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e listFees() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (internalList.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e copy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            if (p.getFees().isEdited()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                copy.add(p);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        copy.sort(new Utils.FeesComparator());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Collections.unmodifiableList(copy);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears all persons in list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Finds and returns the Person who has the given username in its Account"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param username to be matched to a person."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return The Person who matches the username. This should be guaranteed to be unique."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws PersonNotFoundException Person cannot be found with the given username in internalList"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person findPersonByUsername(String username) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.getAccount().filter(acc -\u003e acc.getUsername().equals(username)).isPresent()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**Checks if UniquePersonList holds a Person who has given username in its Account"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param username of the person to be associated with."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return true if such a Person exists. False otherwise"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Boolean containsPersonWithUsername(String username) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            findPersonByUsername(username);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (PersonNotFoundException pne) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Iterates through the UniquePersonList to check the attendance of each person"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @param date of which list of present people should generate"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @return A list of present people"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public List listOfPresentPeople (String date) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List \u003cName\u003e listOfPresent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Boolean isPresent \u003d p.viewAttendanceDateMethod(date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (isPresent) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                listOfPresent.add(p.getName());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return listOfPresent;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** Iterates through the UniquePersonList to check the attendance of each person"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @param date of which list of present people should generate"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @return A list of absent/no attendance(default absent) people"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public List listOfAbsentPeople (String date) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List \u003cName\u003e listOfAbsent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Boolean isPresent \u003d p.viewAttendanceDateMethod(date);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (!isPresent) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                listOfAbsent.add(p.getName());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return listOfAbsent;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks an exam to its new values for all persons"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the original exam"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param newExam the new exam with updated details"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void updateExam(Exam exam, Exam newExam) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (p.isExamPresent(exam)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p.removeExam(exam);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p.addExam(newExam);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes an exam for all persons"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param exam the exam to be removed"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void removeExam(ReadOnlyExam exam) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (p.isExamPresent(exam)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p.removeExam(exam);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Clears all exams for all persons"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void clearAllExam() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Person p: internalList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            p.clearExams();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                (UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 52,
      "micklwl": 52,
      "lucdx": 57,
      "meisbokai": 31,
      "-": 97
    }
  },
  {
    "path": "src/classrepo/data/person/UniqueStatisticsList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * A list of statistics. Does not allow null elements or duplicates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see AssignmentStatistics#equals(Object)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * @see Utils#elementsAreUnique(Collection)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class UniqueStatisticsList implements Iterable\u003cAssignmentStatistics\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final List\u003cAssignmentStatistics\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class DuplicateStatisticsException extends DuplicateDataException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        protected DuplicateStatisticsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            super(\"Operation would result in duplicate assignment statistics\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Signals that an operation targeting a specified result in the list would fail because"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * there is no such matching result in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static class StatisticsNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs empty statistics list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a statistics list with the given statistics."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(AssignmentStatistics... statistics) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssignmentStatistics\u003e initialTags \u003d Arrays.asList(statistics);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(initialTags)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(initialTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param statistics a collection of statistics"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateStatisticsException if the {@code statistics} contains duplicate statistics"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(Collection\u003cAssignmentStatistics\u003e statistics) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!Utils.elementsAreUnique(statistics)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(statistics);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public UniqueStatisticsList(UniqueStatisticsList source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable java List view with elements cast as immutable {@link AssignmentStatistics}s."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssignmentStatistics\u003e immutableListView() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Checks if the list contains an equivalent statistic as the given argument."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean contains(AssignmentStatistics toCheck) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds a statistic to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws DuplicateStatisticsException if the statistic to add is a duplicate of an existing statistic in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void add(AssignmentStatistics toAdd) throws DuplicateStatisticsException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new DuplicateStatisticsException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Removes the equivalent statistic from the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StatisticsNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void remove(AssignmentStatistics toRemove) throws StatisticsNotFoundException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final boolean statisticsFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!statisticsFoundAndDeleted) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new StatisticsNotFoundException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Clears all statistics in list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Iterator\u003cAssignmentStatistics\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                || (other instanceof UniqueStatisticsList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \u0026\u0026 this.internalList.equals(("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                (UniqueStatisticsList) other).internalList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 132,
      "0WN463": 3,
      "micklwl": 2
    }
  },
  {
    "path": "src/classrepo/data/person/details/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Address implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123, some street\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d \"Person address cannot contain $\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"^((?!\\\\$).)*$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 11,
      "micklwl": 4,
      "-": 51
    }
  },
  {
    "path": "src/classrepo/data/person/details/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Email implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"valid@e.mail\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Email\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.value \u003d trimmedEmail;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a given string is a valid person email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 12,
      "micklwl": 4,
      "-": 52
    }
  },
  {
    "path": "src/classrepo/data/person/details/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Name implements Printable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"John Doe\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given name string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.fullName \u003d trimmedName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a listing of every word in the name, in order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getWordsInName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.asList(fullName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 12,
      "-": 57
    }
  },
  {
    "path": "src/classrepo/data/person/details/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.person.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Phone implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EXAMPLE \u003d \"123456789\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d \"Person phone numbers should only contain numbers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String FIELD_NAME \u003d \"Phone\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone, boolean isPrivate) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isPrivate \u003d isPrivate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.value \u003d trimmedPhone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a given string is a valid person phone number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrintableString(boolean showPrivate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Formatter.getPrintableField(showPrivate, isPrivate, FIELD_NAME, value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 12,
      "micklwl": 4,
      "-": 51
    }
  },
  {
    "path": "src/classrepo/data/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given tag name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given tag name string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.tagName \u003d trimmedName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 5,
      "-": 47
    }
  },
  {
    "path": "src/classrepo/formatter/Formatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Printable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Used for formatting text for display. e.g. for adding text decorations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LINE_PREFIX \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"%1$d. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final IndexListFormat DEFAULT_INDEX_LIST_FORMAT \u003d IndexListFormat.SINGLE_SPACED;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Enum to described how an index list should be formatted. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private enum IndexListFormat { SINGLE_SPACED, DOUBLE_SPACED }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Formats the given strings for displaying to the user. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String format(String... messages) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            sb.append(LINE_PREFIX)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    .append(m.replace(\"\\n\", LS + LINE_PREFIX))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    .append(LS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Formats the given list of persons for displaying to the user. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String format(List\u003c? extends ReadOnlyPerson\u003e persons, PersonListFormat personListFormat) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e formattedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        IndexListFormat indexListFormat \u003d DEFAULT_INDEX_LIST_FORMAT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            switch (personListFormat) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            case ALL_PUBLIC_DETAILS: formattedPersons.add(person.getAsTextHidePrivate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                indexListFormat \u003d IndexListFormat.DOUBLE_SPACED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            case ACCOUNT_DETAILS: formattedPersons.add(person.getAsTextShowAccount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            case NAMES_ONLY: formattedPersons.add(person.getAsTextShowOnlyName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            case FEES_DETAILS: formattedPersons.add(person.getAsTextShowFee());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            case FEES_DUE_DETAILS: formattedPersons.add(person.getAsTextShowDueFee());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                // all enums should be accounted for, asserts false if this statement is reached"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return format(asIndexedList(formattedPersons, indexListFormat));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Formats a list of strings as an indexed list, using DEFAULT_INDEX_LIST_FORMAT."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #asIndexedList(List, IndexListFormat)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return asIndexedList(listItems, DEFAULT_INDEX_LIST_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Formats a list of strings as an indexed list. */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static String asIndexedList(List\u003cString\u003e listItems, IndexListFormat indexListFormat) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int firstIndex \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int displayIndex \u003d firstIndex + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            builder.append(getIndexedListItem(displayIndex, listItem));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (indexListFormat \u003d\u003d IndexListFormat.SINGLE_SPACED) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                builder.append(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } else if (indexListFormat \u003d\u003d IndexListFormat.DOUBLE_SPACED) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                builder.append(\"\\n\").append(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats a string as an indexed list item."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param visibleIndex index for this listing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String getPrintableString(boolean showPrivate, Printable... printables) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder stringChain \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Printable i: printables) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!i.getPrintableString(showPrivate).isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                stringChain.append(i.getPrintableString(showPrivate)).append(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return stringChain.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String getPrintableField(boolean showPrivate, boolean isPrivate, String fieldLabel, String value) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isPrivate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (showPrivate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return String.format(\"{private %s: %s}\", fieldLabel, value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return String.format(\"%s: %s\", fieldLabel, value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Formats the given list of exams for displaying to the admin user. */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String formatExam(List\u003c? extends ReadOnlyExam\u003e exams) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cString\u003e formattedExams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (ReadOnlyExam exam : exams) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            formattedExams.add(exam.getAsTextShowAll());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return format(asIndexedList(formattedExams));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Formats the given list of assessments for displaying to the user. */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static String formatAssessments(List\u003c? extends Assessment\u003e assessments) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cString\u003e formattedAssessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment assessment : assessments) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            formattedAssessments.add(assessment.getAsTextShowAll());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return format(asIndexedList(formattedAssessments));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Formats the given list of statistics for displaying to the user. */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static String formatStatistics(List\u003c? extends AssignmentStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cString\u003e formattedStatistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (AssignmentStatistics stats : statistics) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            formattedStatistics.add(stats.getAsTextShowAll());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return format(asIndexedList(formattedStatistics));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Formats a string for an exam to be printed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static String getPrintableExam(String examName, String subjectName, String examDate, String examStartTime,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                          String examEndTime, String examDetails, int takers, boolean isPrivate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examFormat \u003d \"%1$sExam: %2$s || Subject: %3$s || Date: %4$s || Starts: %5$s || \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Ends: %6$s || Details: %7$s || %9$s: %8$d\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String takerWord;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (takers \u003d\u003d 1) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            takerWord \u003d \"Taker\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            takerWord \u003d \"Takers\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isPrivate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return String.format(examFormat, \"private \", examName, subjectName, examDate,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    examStartTime, examEndTime, examDetails, takers, takerWord);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return String.format(examFormat, \"\", examName, subjectName, examDate,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examStartTime, examEndTime, examDetails, takers, takerWord);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Formats a string for an assessment to be printed"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static String getPrintableAssessment(String examName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 26,
      "0WN463": 79,
      "micklwl": 31,
      "lucdx": 4,
      "-": 48
    }
  },
  {
    "path": "src/classrepo/formatter/PersonListFormat.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Enum to indicate how a given List should be formatted*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public enum PersonListFormat {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    ALL_PUBLIC_DETAILS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    ACCOUNT_DETAILS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    NAMES_ONLY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    FEES_DETAILS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    FEES_DUE_DETAILS"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 7,
      "lucdx": 3
    }
  },
  {
    "path": "src/classrepo/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.StorageFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.StorageFile.InvalidInitialisationException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.StorageFile.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the main Logic of the AddressBook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook examBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of persons shown to the user most recently.  */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003c? extends ReadOnlyPerson\u003e lastShownList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of assessments shown to the user most recently.  */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003c? extends Assessment\u003e lastShownAssessmentList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of statistics shown to the user most recently.  */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003c? extends AssignmentStatistics\u003e lastShownStatisticsList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** The list of exams shown to the user most recently.  */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003c? extends ReadOnlyExam\u003e lastShownExamList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that an operation requiring password authentication failed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class WrongPasswordEnteredException extends Exception {}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Logic() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(initializeStorage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(storage.load());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setExamBook(storage.loadExam());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setStatisticsBook(storage.loadStatistics());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.syncAddressBookExamBook(addressBook, examBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        initPrivilege();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    Logic(Storage storageFile, AddressBook addressBook, ExamBook examBook, StatisticsBook statisticsBook, Privilege"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            privilege) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this(storageFile, addressBook, examBook, statisticsBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setPrivilege(privilege);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    Logic(Storage storageFile, AddressBook addressBook, ExamBook examBook, StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setStorage(storageFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBook(addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setExamBook(examBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setStatisticsBook(statisticsBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Sets privilege as Admin if addressBook isPermAdmin, else remains at Basic*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void initPrivilege() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!Optional.ofNullable(privilege).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege \u003d new Privilege();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (addressBook.isPermAdmin()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setStorage(Storage storage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setAddressBook(AddressBook addressBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setPrivilege(Privilege privilege) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.privilege \u003d privilege;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setExamBook(ExamBook examBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        this.examBook \u003d examBook;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setStatisticsBook(StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the StorageFile object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws InvalidInitialisationException if the JAXB set up has error"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private StorageFile initializeStorage()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throws InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            InvalidInitialisationException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new StorageFile();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getPath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getStorageFilePathExam() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return storage.getPathExam();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getStorageFilePathStatistics() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return storage.getPathStatistics();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable view of the current last shown person list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReadOnlyPerson\u003e getLastShownList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableList(lastShownList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void setLastShownList(List\u003c? extends ReadOnlyPerson\u003e newList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        lastShownList \u003d newList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable view of the current last shown assessment list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e getLastShownAssessmentList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Collections.unmodifiableList(lastShownAssessmentList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    protected void setLastShownAssessmentList (List\u003c? extends Assessment\u003e newList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        lastShownAssessmentList \u003d newList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Unmodifiable view of the current last shown exam list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cReadOnlyExam\u003e getLastShownExamList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Collections.unmodifiableList(lastShownExamList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    protected void setLastShownExamList(List\u003c? extends ReadOnlyExam\u003e newList) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        lastShownExamList \u003d newList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user command, executes it, and returns the result."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String userCommandText) throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d execute(command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        recordResult(result);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command, updates storage if the command can potentially mutate data,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * and returns the result."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception if there was any problem during command execution."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult execute(Command command) throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final CommandResult result;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        command.setData(addressBook, lastShownList, lastShownExamList, lastShownAssessmentList, privilege, examBook,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                statisticsBook, lastShownStatisticsList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Checking instanceof IncorrectCommand to prevent overwriting the message of an incorrect command"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (privilege.isAllowedCommand(command) || (command instanceof IncorrectCommand)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            result \u003d command.execute();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            result \u003d new IncorrectCommand (String.format(Messages.MESSAGE_INSUFFICIENT_PRIVILEGE,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    privilege.getRequiredPrivilegeAsString(command),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    privilege.getLevelAsString())).execute();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (command.isMutating()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(addressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            storage.saveStatistics(statisticsBook);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (command.isExamMutating()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            storage.saveExam(examBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Updates the {@link #lastShownList} if the result contains a list of Persons."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *  Updates the {@link #lastShownExamList} if the result contains a list of Exams."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *  Updates the {@link #lastShownAssessmentList} if the result contains a list of Assessments."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *  Updates the {@link #lastShownStatisticsList} if the result contains a list of Statistics."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordResult(CommandResult result) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e optPersonList \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optPersonList.ifPresent(a -\u003e lastShownList \u003d a);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e optExamList \u003d result.getRelevantExams();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optExamList.ifPresent(a -\u003e lastShownExamList \u003d a);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends Assessment\u003e\u003e optAssessmentList \u003d result.getRelevantAssessments();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optAssessmentList.ifPresent(a -\u003e lastShownAssessmentList \u003d a);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends AssignmentStatistics\u003e\u003e optStatisticsList \u003d result.getRelevantStatistics();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optStatisticsList.ifPresent(a -\u003e lastShownStatisticsList \u003d a);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 41,
      "0WN463": 82,
      "micklwl": 33,
      "-": 68
    }
  },
  {
    "path": "src/classrepo/parser/ExamField.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Enum used to indicate which exam field a string belongs to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public enum ExamField {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    examName,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    subjectName,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    examDate,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    examStartTime,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    examEndTime,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    examDetails,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    isPrivate"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 1,
      "micklwl": 13
    }
  },
  {
    "path": "src/classrepo/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.ASSESSMENT_DATA_ARGS_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.ATTENDANCE_ARGS_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.ATTENDANCE_VIEW_DATE_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.BOOLEAN_ARGS_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.EDIT_EXAM_INDEX_ARGS_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.EXAM_DATA_ARGS_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.FEES_DATA_ARGS_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.KEYWORDS_ARGS_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.PERSON_DATA_ARGS_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.parser.RegexPattern.PERSON_INDEX_ARGS_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.AddAccountCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.DeleteAccountCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.ListAccountCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LoginCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LogoutCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddAssessmentCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddAssignmentStatistics;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddGradesCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteGradesCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteStatisticsCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ListAssessmentCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ListStatisticsCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ViewGradesCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ViewAttendanceDateCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ViewAttendancePersonCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.KeywordsFormatCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.IndexFormatCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.AddExamCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ClearExamsCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.DeleteExamCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.DeregisterExamCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.EditExamCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ListExamsCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.RegisterExamCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ViewExamsCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.EditFeesCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ListDueFeesCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ListFeesCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.PaidFeesCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ViewFeesCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.AddCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.FindCommand;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListAllCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewAllCommand;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewSelfCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.EditPasswordCommand;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareAdd(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case EditFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareFees(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case PaidFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new PaidFeesCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new DeleteCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ClearCommand());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return prepareFind(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ListCommand());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ListAllCommand());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new ViewCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new ViewAllCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ExitCommand());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ViewPrivilegeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new ViewPrivilegeCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ViewSelfCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ViewSelfCommand());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case RaisePrivilegeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareKeywordsCommand(arguments, new RaisePrivilegeCommand());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case SetPermanentAdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSetPermAdmin(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case EditPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareKeywordsCommand(arguments, new EditPasswordCommand());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case AddExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareAddExam(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case AddGradesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareAddGrades(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case ViewGradesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new ViewGradesCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case AddAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareAddAccount(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new DeleteAccountCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case ListAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new ListAccountCommand());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareKeywordsCommand(arguments, new LoginCommand());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new LogoutCommand());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case ViewFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareViewFees(arguments);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case AddAssignmentStatistics.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new AddAssignmentStatistics(), ObjectTargeted.ASSESSMENT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case ListStatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareVoidCommand(arguments, new ListStatisticsCommand());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        case UpdateAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareUpdateAttendance(arguments);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        case ReplaceAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return prepareReplaceAttendance(arguments);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        case ViewAttendancePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareViewAttendance(arguments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        case ViewAttendanceDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return prepareViewDateAttendance(arguments);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case ListExamsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareVoidCommand(arguments, new ListExamsCommand());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case ListFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareVoidCommand(arguments, new ListFeesCommand());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        case ListDueFeesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return prepareVoidCommand(arguments, new ListDueFeesCommand());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case DeleteExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new DeleteExamCommand(), ObjectTargeted.EXAM);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case ClearExamsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareVoidCommand(arguments, new ClearExamsCommand());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case EditExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareEditExam(arguments);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case RegisterExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareRegisterExam(arguments);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case DeregisterExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return prepareDeregisterExam(arguments);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        case ViewExamsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new ViewExamsCommand(), ObjectTargeted.PERSON);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case AddAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareAddAssessment(arguments);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case DeleteAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new DeleteAssessmentCommand(), ObjectTargeted.ASSESSMENT);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case ListAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareVoidCommand(arguments, new ListAssessmentCommand());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case DeleteStatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareSingleIndexCommand(arguments, new DeleteStatisticsCommand(), ObjectTargeted.STATISTIC);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        case DeleteGradesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return prepareDeleteGrades(arguments);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return prepareVoidCommand(arguments, new HelpCommand());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // Do not call prepareVoidCommand as we should show the help message if commandWord is not recognised"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new HelpCommand(Messages.MESSAGE_COMMAND_NOT_FOUND);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the Add person command."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareAdd(String args) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"name\"),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"phone\"),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPhonePrivate\")),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"email\"),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isEmailPrivate\")),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                    matcher.group(\"address\"),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isAddressPrivate\")),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagsFromArgs(matcher.group(\"tagArguments\"))"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the private prefix of a contact detail in the add command\u0027s arguments string is present."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isPrivatePrefixPresent(String matchedPrefix) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"p\".equals(matchedPrefix);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the new person\u0027s tags from the add command\u0027s tag arguments string."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Merges duplicate tag strings."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static Set\u003cString\u003e getTagsFromArgs(String tagArguments) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagArguments.isEmpty()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.emptySet();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // replace first delimiter prefix, then split"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        final Collection\u003cString\u003e tagStrings \u003d Arrays.asList(tagArguments.replaceFirst(\" t/\", \"\").split(\" t/\"));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(tagStrings);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the EditFees command"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Command prepareFees(String args) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        final Matcher matcher \u003d FEES_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFeesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(matcher.group(\"index\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new EditFeesCommand("
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    matcher.group(\"fees\"),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                    matcher.group(\"date\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            );"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFeesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments for commands which are in the form of COMMAND_WORD INDEX."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareSingleIndexCommand(String args,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                              IndexFormatCommand command,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                              ObjectTargeted objectTargeted) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            command.setTargetIndex(targetIndex, objectTargeted);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    command.getCommandUsageMessage()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the ViewFees command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Command prepareViewFees(String args) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new ViewFeesCommand(targetIndex);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFeesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the Find person command."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the SetPermAdmin command."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareSetPermAdmin(String args) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d BOOLEAN_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String booleanString \u003d matcher.group(\"boolean\").toLowerCase();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final boolean isPerm \u003d parseStringToBoolean(booleanString);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new SetPermanentAdminCommand(isPerm);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses string into boolean, using \"true\" \u003d true and \"false\" \u003d false."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws IllegalValueException if string is neither \"true\" nor \"false\"."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean parseStringToBoolean (String string) throws IllegalValueException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!\"true\".equals(string) \u0026\u0026 !\"false\".equals(string)) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return \"true\".equals(string);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the ChangePassword command."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareVoidCommand(String args, Command command) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final boolean hasNoArguments \u003d args.trim().isEmpty();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (hasNoArguments) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    command.getCommandUsageMessage()));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the Keywords command."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareKeywordsCommand(String args, KeywordsFormatCommand command) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String usageMessage \u003d command.getCommandUsageMessage();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    usageMessage));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int numRequiredArg \u003d command.getNumRequiredArg();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (keywords.length \u003d\u003d numRequiredArg) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            command.setUp(keywords);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    numRequiredArg, keywords.length, usageMessage));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Parses arguments in the context of the AddAccount command."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareAddAccount(String args) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(keywords[0]);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final int requiredArgs \u003d 4;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (keywords.length !\u003d requiredArgs) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                final String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                throw new IllegalValueException(message);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new AddAccountCommand(targetIndex, keywords[1], keywords[2], keywords[3]);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the AddGrades command."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareAddGrades(String args) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String[] arr \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final int requiredArgs \u003d 3;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (arr.length !\u003d requiredArgs) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS , 3, arr.length,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int targetPersonIndex \u003d parseArgsAsDisplayedIndex(arr[0]);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int targetAssessmentIndex \u003d parseArgsAsDisplayedIndex(arr[1]);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final double targetGrades \u003d Double.parseDouble(arr[2]);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new AddGradesCommand(targetPersonIndex, targetAssessmentIndex, targetGrades);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the AddExam command."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareAddExam(String args) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d EXAM_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new AddExamCommand("
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examName\"),"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"subjectName\"),"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examDate\"),"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examStartTime\"),"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examEndTime\"),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    matcher.group(\"examDetails\"),"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    isPrivatePrefixPresent(matcher.group(\"isPrivate\"))"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the UpdateAttendance command."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareUpdateAttendance(String args) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d ATTENDANCE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final Integer isPresent \u003d parseInt(matcher.group(\"isPresent\"));"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final boolean isPresentBool \u003d isPresent.equals(1);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (!\"0\".equals(matcher.group(\"date\"))) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                dateFormat.parse(matcher.group(\"date\").trim());"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new UpdateAttendanceCommand("
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    isPresentBool);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    UpdateAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_CONSTRAINTS"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + UpdateAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the ReplaceAttendance command."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private Command prepareReplaceAttendance(String args) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        final Matcher matcher \u003d ATTENDANCE_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    ReplaceAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final Integer isPresent \u003d parseInt(matcher.group(\"isPresent\"));"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final boolean isPresentBool \u003d isPresent.equals(1);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (!\"0\".equals(matcher.group(\"date\"))) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                dateFormat.parse(matcher.group(\"date\").trim());"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new ReplaceAttendanceCommand("
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    targetIndex,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    matcher.group(\"date\"),"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    isPresentBool);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    ReplaceAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_CONSTRAINTS + ReplaceAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the ViewAttendance by person command."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Command prepareViewAttendance(String args) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Matcher matcher \u003d PERSON_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    ViewAttendancePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new ViewAttendancePersonCommand(targetIndex);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    ViewAttendancePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the ViewAttendance by date command."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private Command prepareViewDateAttendance(String args) {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        final Matcher matcher \u003d ATTENDANCE_VIEW_DATE_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                    ViewAttendanceDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new ViewAttendanceDateCommand(matcher.group(\"date\"));"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (NumberFormatException nfe) { //do the most specific catch on top"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            return new IncorrectCommand(nfe.getMessage());"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DATE_CONSTRAINTS"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + ViewAttendanceDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the DeleteGrades command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareDeleteGrades(String args) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    DeleteGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String[] arr \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final int requiredArgs \u003d 2;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (arr.length !\u003d requiredArgs) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS , 2, arr.length,"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    DeleteGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(arr[0]);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final int targetAssessmentIndex \u003d parseArgsAsDisplayedIndex(arr[1]);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new DeleteGradesCommand(targetIndex, targetAssessmentIndex);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    DeleteGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the EditExam command."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareEditExam(String args) {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d EDIT_EXAM_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Map\u003cExamField, String\u003e changedDetails \u003d storeNewDetails(matcher);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetIndex \u003d parseInt(matcher.group(\"targetIndex\").trim());"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new EditExamCommand(targetIndex, changedDetails);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ive.getMessage()));"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the RegisterExam command."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareRegisterExam(String args) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    RegisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String[] arr \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (arr.length !\u003d RegisterExamCommand.REQUIRED_ARGUMENTS) {"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    RegisterExamCommand.REQUIRED_ARGUMENTS,"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    arr.length, RegisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(arr[0]);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetExamIndex \u003d parseArgsAsDisplayedIndex(arr[1]);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new RegisterExamCommand(targetIndex, targetExamIndex);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    RegisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the DeregisterExam command."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Command prepareDeregisterExam(String args) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    DeregisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String[] arr \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (arr.length !\u003d DeregisterExamCommand.REQUIRED_ARGUMENTS) {"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS,"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    DeregisterExamCommand.REQUIRED_ARGUMENTS,"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    arr.length, DeregisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(arr[0]);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final int targetExamIndex \u003d parseArgsAsDisplayedIndex(arr[1]);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new DeregisterExamCommand(targetIndex, targetExamIndex);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    DeregisterExamCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Parses arguments in the context of the AddAssessment command."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Command prepareAddAssessment (String args) {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Matcher matcher \u003d ASSESSMENT_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    AddAssessmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new AddAssessmentCommand("
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                    matcher.group(\"examName\")"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            );"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new IncorrectCommand(ive.getMessage());"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Stores the new values of exam to be edited to."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Map\u003cExamField, String\u003e storeNewDetails(Matcher matcher) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Map\u003cExamField, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e examName \u003d Optional.ofNullable(matcher.group(\"examName\"));"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examName.isPresent()) {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.examName, examName.get());"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e subjectName \u003d Optional.ofNullable(matcher.group(\"subjectName\"));"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (subjectName.isPresent()) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.subjectName, subjectName.get());"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e examDate \u003d Optional.ofNullable(matcher.group(\"examDate\"));"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examDate.isPresent()) {"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.examDate, examDate.get());"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e examStartTime \u003d Optional.ofNullable(matcher.group(\"examStartTime\"));"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examStartTime.isPresent()) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.examStartTime, examStartTime.get());"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e examEndTime \u003d Optional.ofNullable(matcher.group(\"examEndTime\"));"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examEndTime.isPresent()) {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.examEndTime, examEndTime.get());"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e examDetails \u003d Optional.ofNullable(matcher.group(\"examDetails\"));"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (examDetails.isPresent()) {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.examDetails, examDetails.get());"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Optional\u003cString\u003e isPrivate \u003d Optional.ofNullable(matcher.group(\"isPrivate\"));"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isPrivate.isPresent()) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            result.put(ExamField.isPrivate, isPrivate.get());"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 118,
      "0WN463": 254,
      "micklwl": 185,
      "lucdx": 50,
      "meisbokai": 86,
      "-": 143
    }
  },
  {
    "path": "src/classrepo/parser/RegexPattern.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * RegexPatterns used by Parser to parse commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class RegexPattern {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern PERSON_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern BOOLEAN_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cboolean\u003e.+)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern PERSON_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003cname\u003e[^/]+)\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cisPhonePrivate\u003ep?)p/(?\u003cphone\u003e[^/]+)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cisEmailPrivate\u003ep?)e/(?\u003cemail\u003e[^/]+)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cisAddressPrivate\u003ep?)a/(?\u003caddress\u003e[^/]+)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \"(?\u003ctagArguments\u003e(?: t/[^/]+)*)\"); // variable number of tags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern EXAM_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003cisPrivate\u003ep?)e/(?\u003cexamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" s/(?\u003csubjectName\u003e[^/]+)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" d/(?\u003cexamDate\u003e[^/]+)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" st/(?\u003cexamStartTime\u003e[^/]+)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" et/(?\u003cexamEndTime\u003e[^/]+)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" dt/(?\u003cexamDetails\u003e[^/]+)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern FEES_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e[^/]+)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cfees\u003e[^/]+)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cdate\u003e[^/]+)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern STATISTICS_DATA_ARGS_FORMAT \u003d //\u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003csubjectName\u003e[^/]+)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" (?\u003cisExamPrivate\u003ep?)e/(?\u003cexamName\u003e[^/]+)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" ts/(?\u003ctopScorer\u003e[^/]+)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" av/(?\u003caverageScore\u003e[^/]+)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" te/(?\u003ctotalExamTakers\u003e[^/]+)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" ab/(?\u003cnumberAbsent\u003e[^/]+)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" tp/(?\u003ctotalPass\u003e[^/]+)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" mm/(?\u003cmaxMin\u003e[^/]+)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern ATTENDANCE_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" d/(?\u003cdate\u003e[^/]+)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    + \" att/(?\u003cisPresent\u003e[0-1])\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern ATTENDANCE_VIEW_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"d/(?\u003cdate\u003e[^/]+)\"); // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern EDIT_EXAM_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e[^/]+)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(p/(?\u003cisPrivate\u003e[^/]+))?\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(e/(?\u003cexamName\u003e[^/]+))?\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(s/(?\u003csubjectName\u003e[^/]+))?\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(d/(?\u003cexamDate\u003e[^/]+))?\" // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(st/(?\u003cexamStartTime\u003e[^/]+))?\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(et/(?\u003cexamEndTime\u003e[^/]+))?\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            + \"(dt/(?\u003cexamDetails\u003e[^/]+))?\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern ASSESSMENT_DATA_ARGS_FORMAT \u003d //\u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Pattern.compile(\"(?\u003cexamName\u003e[^/]+)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 71
    }
  },
  {
    "path": "src/classrepo/privilege/Privilege.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.TutorUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Represents the privilege level of the user */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class Privilege {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static final String PRIVILEGE_CONSTRAINTS \u003d \"Privilege should be \\\"Basic\\\", \\\"Tutor\\\" or \\\"Admin\\\"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Enums for the different privilege levels*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private enum PrivilegeLevels {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        BASIC(new BasicUser()),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TUTOR(new TutorUser()),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ADMIN(new AdminUser());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private final User userType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        PrivilegeLevels(User userType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            this.userType \u003d userType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public User getUserType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return userType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Person myPerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.BASIC.getUserType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Privilege(User user) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that an operation would have changed the properties of the currently logged in user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class SelfModifyingException extends Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public SelfModifyingException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super(\"Operation would result in errors due effects on logged in user\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static Privilege getPrivilegeFromString (String userType) throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (PrivilegeLevels p : PrivilegeLevels.values()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.toString().equals(userType.toUpperCase())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return new Privilege(p.getUserType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        throw new IllegalValueException(PRIVILEGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Copies all the information of another privilege into this object, effectively cloning it."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void copyPrivilege(Privilege privilege) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.user \u003d privilege.getUser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.myPerson \u003d privilege.getMyPerson().orElse(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raiseToTutor() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.TUTOR.getUserType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raiseToAdmin() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.ADMIN.getUserType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cPerson\u003e getMyPerson() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(myPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Optional\u003cReadOnlyPerson\u003e getMyReadOnlyPerson() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Optional.ofNullable(myPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setMyPerson(Person myPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.myPerson \u003d myPerson;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Resets the privilege to base (No myPerson assigned, Basic User)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void resetPrivilege() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearMyPerson();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        raiseToBasic();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isBase() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (user.equals(PrivilegeLevels.BASIC.getUserType()) \u0026\u0026 myPerson \u003d\u003d null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void clearMyPerson() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        myPerson \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void raiseToBasic() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        user \u003d PrivilegeLevels.BASIC.getUserType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getLevelAsString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cCommand\u003e getAllowedCommands() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.getAllowedCommands();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return user.isAllowedCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Checks if the target is the currently logged in user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws SelfModifyingException if the above is true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void checkTargetIsSelf(ReadOnlyPerson person) throws SelfModifyingException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isTargetSelf(person)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new SelfModifyingException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isTargetSelf(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return person.equals(myPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getRequiredPrivilegeAsString(Command command) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String requiredPrivilege \u003d \"PRIVILEGE NOT FOUND\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (PrivilegeLevels p : PrivilegeLevels.values()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (p.getUserType().isAllowedCommand(command)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                requiredPrivilege \u003d p.getUserType().getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return requiredPrivilege;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 145,
      "micklwl": 5
    }
  },
  {
    "path": "src/classrepo/privilege/user/AdminUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.AddAccountCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.DeleteAccountCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.AddExamCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ClearExamsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.DeleteExamCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.EditExamCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.EditFeesCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.PaidFeesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.EditPasswordCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Admin access"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AdminUser extends TutorUser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommand \u003d Arrays.asList("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddCommand(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeleteCommand(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new EditPasswordCommand(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new ClearExamsCommand(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            new EditFeesCommand(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            new PaidFeesCommand(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new SetPermanentAdminCommand(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddAccountCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new DeleteAccountCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new AddExamCommand(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new DeleteExamCommand(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new EditExamCommand()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdminUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setCurrentLevel(PrivilegeLevel.Admin);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Overrides the check with always be true to allow compatibility with \"new\" commands that were"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * unaccounted for (ie commands made by teammates)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 1,
      "0WN463": 49,
      "micklwl": 5,
      "lucdx": 1
    }
  },
  {
    "path": "src/classrepo/privilege/user/BasicUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.Main;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.ListAccountCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LoginCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LogoutCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ListAssessmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ListStatisticsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ViewExamsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewSelfCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Basic access"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class BasicUser implements User {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommands \u003d Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewCommand(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListAccountCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new RaisePrivilegeCommand(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewPrivilegeCommand(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new FindCommand(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new HelpCommand(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new LoginCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new LogoutCommand(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ExitCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            new ViewSelfCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            new ViewExamsCommand(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            new ListStatisticsCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            new ListAssessmentCommand()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003cCommand\u003e allowedCommands;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private PrivilegeLevel currentLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public BasicUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        currentLevel \u003d PrivilegeLevel.Basic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.addAll(newAllowedCommands);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void addAllowedCommands(List\u003cCommand\u003e newAllowedCommands) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.addAll(newAllowedCommands);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assert allowedCommandContainsNoDuplicate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Returns if allowedCommand contains no duplicate"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *  If false, logs the duplicated command into the logger"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected boolean allowedCommandContainsNoDuplicate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cCommand\u003e commandSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cCommand\u003e duplicatedCommands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Command allowCommand: allowedCommands) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // Java Set.add method returns true if element not already in set"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!commandSet.add(allowCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                duplicatedCommands.add(allowCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (duplicatedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            for (Command duplicatedCommand: duplicatedCommands) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Main.LOGGER.log(Level.WARNING, String.format(\"Duplicated %s for different User\", duplicatedCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void setCurrentLevel(PrivilegeLevel currentLevel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        this.currentLevel \u003d currentLevel;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrivilegeLevelAsString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return currentLevel.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public PrivilegeLevel getPrivilegeLevel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return currentLevel;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cCommand\u003e getAllowedCommands() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return allowedCommands;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    protected void sortCommands() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        allowedCommands.sort(new SortByCategory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Checks if this privilege level has access to the given command*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAllowedCommand(Command command) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Command allowedCommand: allowedCommands) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (command.getClass().equals(allowedCommand.getClass())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Comparator used to sort the commands in allowedCommands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    class SortByCategory implements Comparator\u003cCommand\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         * Compare commands based on category, if they are the same, compare name of the command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public int compare(Command a, Command b) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String categoryA \u003d a.getCategory().toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String categoryB \u003d b.getCategory().toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (!categoryA.equals(categoryB)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return categoryA.compareTo(categoryB);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                return a.toString().compareTo(b.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || (other instanceof BasicUser // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \u0026\u0026 this.currentLevel.equals(((BasicUser) other).currentLevel)); // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 4,
      "0WN463": 128,
      "micklwl": 8
    }
  },
  {
    "path": "src/classrepo/privilege/user/TutorUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddAssessmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddAssignmentStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddGradesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteGradesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteStatisticsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ViewGradesCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ViewAttendanceDateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.attendance.ViewAttendancePersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.DeregisterExamCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ListExamsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.RegisterExamCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ListDueFeesCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ListFeesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.fees.ViewFeesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListAllCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewAllCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Represents a user with Tutor access"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class TutorUser extends BasicUser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static List\u003cCommand\u003e newAllowedCommand \u003d Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewAllCommand(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListAllCommand(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListExamsCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new RegisterExamCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeregisterExamCommand(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new UpdateAttendanceCommand(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ReplaceAttendanceCommand(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewAttendancePersonCommand(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewAttendanceDateCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListFeesCommand(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ListDueFeesCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddAssessmentCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeleteAssessmentCommand(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddGradesCommand(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewGradesCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeleteGradesCommand(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new ViewFeesCommand(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new AddAssignmentStatistics(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new DeleteStatisticsCommand()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TutorUser() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setCurrentLevel(PrivilegeLevel.Tutor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        sortCommands();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 59
    }
  },
  {
    "path": "src/classrepo/privilege/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": " This interface describes who the current user is"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public interface User {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Enum to describe privilege levels. Used only as String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    enum PrivilegeLevel { Basic, Tutor, Admin }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    String getPrivilegeLevelAsString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    PrivilegeLevel getPrivilegeLevel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    List\u003cCommand\u003e getAllowedCommands();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    boolean isAllowedCommand (Command command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 20
    }
  },
  {
    "path": "src/classrepo/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " *  This is the abstract class in charge of Storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " *  Used to apply DI"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract void save(AddressBook addressBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract void saveStatistics(StatisticsBook statisticsBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract AddressBook load() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract StatisticsBook loadStatistics() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public abstract String getPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public abstract String getPathStatistics();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract void saveExam(ExamBook examBook) throws StorageOperationException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract ExamBook loadExam() throws StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract String getPathExam();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public abstract void syncAddressBookExamBook(AddressBook addressBook, ExamBook examBook)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws StorageOperationException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 5,
      "0WN463": 24,
      "micklwl": 10
    }
  },
  {
    "path": "src/classrepo/storage/StorageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.jaxb.AdaptedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.jaxb.AdaptedExamBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.jaxb.AdaptedStatisticsBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * Represents the file used to store all the data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class StorageFile extends Storage {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"addressbook.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Default exam file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static final String DEFAULT_EXAMS_FILEPATH \u003d \"exams.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Default statistics file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static final String DEFAULT_STATISTICS_FILEPATH \u003d \"statistics.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public final Path pathExam;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public final Path pathStatistics;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private final JAXBContext jaxbContext;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private final JAXBContext jaxbContext2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private final JAXBContext jaxbContext3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Note: Note the use of nested classes below."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * More info https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath constraints."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Signals that there is some jaxb initialisation error."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static class InvalidInitialisationException extends IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        public InvalidInitialisationException(String message) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            InvalidInitialisationException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH, DEFAULT_EXAMS_FILEPATH, DEFAULT_STATISTICS_FILEPATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StorageFile(String filePath, String filePathExam, String filePathStatistics)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws InvalidStorageFilePathException,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            InvalidInitialisationException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            jaxbContext \u003d JAXBContext.newInstance(AdaptedAddressBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            jaxbContext2 \u003d JAXBContext.newInstance(AdaptedExamBook.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            jaxbContext3 \u003d JAXBContext.newInstance(AdaptedStatisticsBook.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new InvalidInitialisationException(\"jaxb initialisation error\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        pathExam \u003d Paths.get(filePathExam);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (!isValidPath(pathExam)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Exam file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        pathStatistics \u003d Paths.get(filePathStatistics);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isValidPath(pathStatistics)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Statistics file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The file path is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(AddressBook addressBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(path.toFile()))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook toSave \u003d new AdaptedAddressBook(addressBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext.createMarshaller();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error converting address book into storage format\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook load() throws StorageOperationException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            final AdaptedAddressBook loaded \u003d (AdaptedAddressBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new StorageOperationException(\"File data missing some elements\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddressBook empty \u003d new AddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            save(empty);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new StorageOperationException(\"Error parsing file data format\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new StorageOperationException(ive.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPathExam() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathExam.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPathStatistics() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathStatistics.toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam(ExamBook examBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(pathExam.toFile()))) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AdaptedExamBook toSave \u003d new AdaptedExamBook(examBook);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext2.createMarshaller();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to exam file: \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + pathExam + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error converting exam book into storage format\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook loadExam() throws StorageOperationException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(pathExam.toFile()))) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext2.createUnmarshaller();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AdaptedExamBook loaded \u003d (AdaptedExamBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new StorageOperationException(\"Exam file data missing some elements\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "             */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final ExamBook empty \u003d new ExamBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            saveExam(empty);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to exam file: \" + pathExam);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error parsing exam file data format\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(ive.getMessage());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Saves all data to this storage file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void saveStatistics(StatisticsBook statisticsBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        /* Note: Note the \u0027try with resource\u0027 statement below."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "         * More info: https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try (final Writer fileWriter \u003d new BufferedWriter(new FileWriter(pathStatistics.toFile()))) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AdaptedStatisticsBook toSave \u003d new AdaptedStatisticsBook(statisticsBook);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Marshaller marshaller \u003d jaxbContext3.createMarshaller();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            marshaller.marshal(toSave, fileWriter);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to statistics file: \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    + pathStatistics + \" error: \" + ioe.getMessage());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new StorageOperationException(\"Error converting statistics book into storage format\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Loads data from this storage file."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook loadStatistics() throws StorageOperationException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try (final Reader fileReader \u003d new BufferedReader(new FileReader(pathStatistics.toFile()))) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Unmarshaller unmarshaller \u003d jaxbContext3.createUnmarshaller();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AdaptedStatisticsBook loaded \u003d (AdaptedStatisticsBook) unmarshaller.unmarshal(fileReader);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // manual check for missing elements"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (loaded.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new StorageOperationException(\"Statistics file data missing some elements\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return loaded.toModelType();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            /* Note: Here, we are using an exception to create the file if it is missing. However, we should minimize"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             * using exceptions to facilitate normal paths of execution. If we consider the missing file as a \u0027normal\u0027"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             * situation (i.e. not truly exceptional) we should not use an exception to handle it."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "             */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // create empty file if not found"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final StatisticsBook empty \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            saveStatistics(empty);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return empty;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error writing to statistics file: \" + pathStatistics);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (JAXBException jaxbe) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(\"Error parsing statistics file data format\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new StorageOperationException(ive.getMessage());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Checks the exams of each person to see if they exist in the ExamBook and"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * checks if the takers for all exams in ExamBook are all accounted for in the AddressBook"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws StorageOperationException if exam data of a person was modified"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void syncAddressBookExamBook(AddressBook addressBook, ExamBook examBook) throws StorageOperationException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Person p : addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            for (Exam e : p.getExams()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (!examBook.contains(e)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    throw new StorageOperationException(\"A person has an exam not in ExamBook!\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam e: examBook.getAllExam()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            int totalCount \u003d e.getTakers();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            int currentCount \u003d 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            for (Person p: addressBook.getAllPersons()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                if (p.isExamPresent(e)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    currentCount++;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (totalCount !\u003d currentCount) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                throw new StorageOperationException(\"An exam has inaccurate number of takers compared to AddressBook!\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 66,
      "0WN463": 31,
      "micklwl": 126,
      "-": 109
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedAccount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "@XmlRootElement(name \u003d \"account\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AdaptedAccount {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String privilege;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdaptedAccount() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        username \u003d source.getUsername();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d source.getPrivilege().getLevelAsString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return Utils.isAnyNull(username, password, privilege);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Account(username, password, privilege);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 59
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueAssessmentsList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted address book data holder class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"AddressBook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cAdaptedAssessment\u003e assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement(name \u003d \"password\", defaultValue \u003d \"default_pw\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean isPermAdmin;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAddressBook"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedAddressBook(AddressBook source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getAllPersons().forEach(person -\u003e persons.add(new AdaptedPerson(person)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        password \u003d source.getMasterPassword();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        isPermAdmin \u003d source.isPermAdmin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        source.getAllAssessments().forEach(assessment -\u003e assessments.add(new AdaptedAssessment(assessment,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                source.getAllPersons())));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return persons.stream().anyMatch(AdaptedPerson::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedAddressBook} object into the corresponding(@code AddressBook} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final HashSet\u003cString\u003e usernameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Person modelPerson \u003d person.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            personList.add(modelPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            checkDuplicateUsername(usernameSet, modelPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e assessmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (AdaptedAssessment assess : assessments) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assessmentList.add(assess.toModelType(personList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String masterPassword \u003d password;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook ab \u003d new AddressBook(new UniquePersonList(personList),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new UniqueAssessmentsList(assessmentList),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                masterPassword);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab.setPermAdmin(isPermAdmin);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Checks if the given Person have an account with an existing username*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void checkDuplicateUsername(HashSet\u003cString\u003e usernameSet, Person modelPerson) throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (modelPerson.hasAccount()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (usernameSet.contains(modelPerson.getAccount().get().getUsername())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                throw new IllegalValueException(\"Data contains duplicate username\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            usernameSet.add(modelPerson.getAccount().get().getUsername());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 11,
      "0WN463": 42,
      "micklwl": 1,
      "-": 48
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedAssessment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted assessment data holder class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AdaptedAssessment {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cInteger\u003e personIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cDouble\u003e grades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedAssessment() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts a given Assessment into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedAssessment"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedAssessment(Assessment source, UniquePersonList allPersons) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        examName \u003d source.getExamName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Map\u003cPerson, Grades\u003e allVals \u003d source.getAllGrades();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Map.Entry\u003cPerson, Grades\u003e entry : allVals.entrySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Person person \u003d entry.getKey();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            int index \u003d allPersons.immutableListView().indexOf(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            personIndex.add(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Grades grade \u003d entry.getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double gradeVal \u003d grade.getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            grades.add(gradeVal);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Utils.isAnyNull(examName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly adapted assessment object into the Assessment object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assessment"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment toModelType(List\u003cPerson\u003e personList) throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String examName \u003d this.examName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assess \u003d new Assessment(examName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (int i \u003d 0; i \u003c personIndex.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Person personToInsert \u003d personList.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            personToInsert.addAssessment(assess);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            double gradeVal \u003d grades.get(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Grades gradeToInsert \u003d new Grades(gradeVal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assess.addGrade(personToInsert, gradeToInsert);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return assess;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 79,
      "0WN463": 7
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedAttendance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " * JAXB-friendly adapted attendance data holder class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "@XmlRootElement(name \u003d \"attendance\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class AdaptedAttendance {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private List\u003cString\u003e attendanceDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private List\u003cString\u003e attendanceIsPresent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public AdaptedAttendance() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Converts a given attendance into this class for JAXB use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public AdaptedAttendance(Attendance source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        for (Map.Entry entry: source.getAttendancePersonMap().entrySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (entry.getValue().equals(true)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                attendanceIsPresent.add(\"Present\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            } else if (entry.getValue().equals(false)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                attendanceIsPresent.add(\"Absent\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        attendanceDate \u003d new ArrayList\u003c\u003e(source.getAttendancePersonMap().keySet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return Utils.isAnyNull(attendanceDate, attendanceIsPresent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Converts this jaxb-friendly adapted attendance object into the Attendance object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        final Attendance attendance \u003d new Attendance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        for (int i \u003d 0; i \u003c attendanceDate.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            String date \u003d attendanceDate.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            String isPresentString \u003d attendanceIsPresent.get(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            final boolean isPresent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (\"Present\".equals(isPresentString)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                isPresent \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            } else if (\"Absent\".equals(isPresentString)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                isPresent \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                throw new IllegalValueException(\"NIL attendance, please report this to the developers\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            attendance.addAttendance(date, isPresent, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0WN463": 4,
      "meisbokai": 79
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedExam.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * JAXB-friendly adapted exam data holder class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AdaptedExam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Boolean isPrivate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String subjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examStartTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examEndTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String examDetails;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private int takers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExam() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts a given Exam into this class for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedExam"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExam(Exam source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        isPrivate \u003d source.isPrivate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        subjectName \u003d source.getSubjectName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examName \u003d source.getExamName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDate \u003d source.getExamDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examStartTime \u003d source.getExamStartTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examEndTime \u003d source.getExamEndTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examDetails \u003d source.getExamDetails();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        takers \u003d source.getTakers();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Utils.isAnyNull(subjectName, examName, examDate, examStartTime, examEndTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examDetails, takers, isPrivate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts this jaxb-friendly adapted exam object into the Exam object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exam"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String subjectName \u003d this.subjectName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examName \u003d this.examName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examDate \u003d this.examDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examStartTime \u003d this.examStartTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examEndTime \u003d this.examEndTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examDetails \u003d this.examDetails;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final int takers \u003d this.takers;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final boolean isPrivate \u003d this.isPrivate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam(examName, subjectName, examDate, examStartTime, examEndTime, examDetails, takers, isPrivate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 4,
      "micklwl": 85
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedExamBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueExamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * JAXB-friendly adapted exam book data holder class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "@XmlRootElement(name \u003d \"ExamBook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class AdaptedExamBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cAdaptedExam\u003e examsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExamBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts a given AddressBook into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedExamBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public AdaptedExamBook(ExamBook source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        source.getAllExam().forEach(exam -\u003e examsList.add(new AdaptedExam(exam)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examsList.stream().anyMatch(AdaptedExam::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedExamBook} object into the corresponding(@code ExamBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exam"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final List\u003cExam\u003e examTempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (AdaptedExam exam : examsList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examTempList.add(exam.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook(new UniqueExamList(examTempList));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 5,
      "micklwl": 57
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedFees.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Fees;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted fees data holder class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "@XmlRootElement(name \u003d \"fees\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class AdaptedFees {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private String duedate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private boolean isPrivate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public AdaptedFees() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts given fees into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedFees"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public AdaptedFees(Fees source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        value \u003d source.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        duedate \u003d source.duedate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        isPrivate \u003d source.isPrivate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return Utils.isAnyNull(value, duedate, isPrivate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly adapted object into the Fees object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted fees"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public Fees toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return new Fees(value, duedate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 5,
      "0WN463": 4,
      "lucdx": 51
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted person data holder class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedPerson {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private AdaptedContactDetail address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private AdaptedAttendance attendance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cAdaptedExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AdaptedAccount account;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private AdaptedFees fees;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * JAXB-friendly adapted contact detail data holder class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static class AdaptedContactDetail {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        @XmlValue"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private String value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        @XmlAttribute(required \u003d true)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private boolean isPrivate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson() {}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedPerson"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.isPrivate \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.value \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        email.isPrivate \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        email.value \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new AdaptedContactDetail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        address.isPrivate \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        address.value \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        fees \u003d new AdaptedFees(source.getFees());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        attendance \u003d new AdaptedAttendance(source.getAttendance());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam exam : source.getExams()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            exams.add(new AdaptedExam(exam));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new AdaptedTag(tag));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (source.getAccount().isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            account \u003d new AdaptedAccount(source.getAccount().get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tag.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (AdaptedExam exam : exams) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            if (exam.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (account !\u003d null \u0026\u0026 account.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        if (fees !\u003d null \u0026\u0026 fees.isAnyRequiredFieldMissing()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // second call only happens if phone/email/address are all not null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return Utils.isAnyNull(name, phone, email, address, fees)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || Utils.isAnyNull(phone.value, email.value, address.value)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                || Utils.isAnyNull(phone.isPrivate, email.isPrivate, address.isPrivate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the Person object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            for (AdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Set\u003cExam\u003e examList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            for (AdaptedExam exam : exams) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examList.add(exam.toModelType());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            final Phone phone \u003d new Phone(this.phone.value, this.phone.isPrivate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            final Email email \u003d new Email(this.email.value, this.email.isPrivate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            final Address address \u003d new Address(this.address.value, this.address.isPrivate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            final Person person \u003d new Person(name, phone, email, address, tags, examList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucdx"
        },
        "content": "            person.setFees(this.fees.toModelType());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            Optional\u003cAdaptedAttendance\u003e optAttendance \u003d Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            if (optAttendance.isPresent()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                final Attendance attendance \u003d this.attendance.toModelType();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                person.setAttendance(attendance);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Optional\u003cAdaptedAccount\u003e optAccount \u003d Optional.ofNullable(account);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (optAccount.isPresent()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                final Account account \u003d this.account.toModelType();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                account.setPrivilegePerson(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                person.setAccount(account);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw new IllegalValueException(String.format(\"Error processing %s: %s\", name, ive.getMessage()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 3,
      "0WN463": 57,
      "micklwl": 20,
      "lucdx": 11,
      "meisbokai": 13,
      "-": 83
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted statistics data holder class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AdaptedStatistics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String examName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double averageScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private int totalExamTakers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double maxScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement (required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private double minScore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatistics() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts a given statistic into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedStatistics"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatistics(AssignmentStatistics source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        examName \u003d source.getExamName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        averageScore \u003d source.getAverageScore();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        totalExamTakers \u003d source.getTotalExamTakers();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        maxScore \u003d source.getMaxScore();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        minScore \u003d source.getMinScore();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return Utils.isAnyNull(examName, averageScore, totalExamTakers, maxScore, minScore);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly adapted statistics object into the Assignment Statistics object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted statistics"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String examName \u003d this.examName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final double averageScore \u003d this.averageScore;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final int totalExamTakers \u003d this.totalExamTakers;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final double maxScore \u003d this.maxScore;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final double minScore \u003d this.minScore;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new AssignmentStatistics(examName, averageScore, totalExamTakers, maxScore, minScore);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 67,
      "0WN463": 4
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedStatisticsBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.UniqueStatisticsList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * JAXB-friendly adapted statistics book data holder class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "@XmlRootElement(name \u003d \"StatisticsBook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AdaptedStatisticsBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private List\u003cAdaptedStatistics\u003e statisticsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatisticsBook() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts a given StatisticsBook into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedStatisticsBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AdaptedStatisticsBook(StatisticsBook source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        source.getAllStatistics().forEach(statistics -\u003e statisticsList.add(new AdaptedStatistics(statistics)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsList.stream().anyMatch(AdaptedStatistics::isAnyRequiredFieldMissing);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Converts this jaxb-friendly {@code AdaptedStatisticsBook} object into the corresponding(@code StatisticsBook}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted statistics"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final List\u003cAssignmentStatistics\u003e statisticsTempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (AdaptedStatistics exam : statisticsList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsTempList.add(exam.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook(new UniqueStatisticsList(statisticsTempList));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 60,
      "0WN463": 5
    }
  },
  {
    "path": "src/classrepo/storage/jaxb/AdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage.jaxb;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Utils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted tag data holder class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AdaptedTag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * No-arg constructor for JAXB use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created AdaptedTag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if any required field is missing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * JAXB does not enforce (required \u003d true) without a given XML schema."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Since we do most of our validation using the data class constructors, the only extra logic we need"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * is to ensure that every xml element in the document is present. JAXB sets missing elements as null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * so we check for that."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyRequiredFieldMissing() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Utils.isAnyNull(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the Tag object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 5,
      "-": 47
    }
  },
  {
    "path": "src/classrepo/ui/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-family: \u0027Segoe UI Semibold\u0027;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: yellow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: derive(#1d1d1d,20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: black;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "#asciiArt {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": " -fx-display: inline-block;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": " -fx-font-family: \"Lucida Console\", Monaco, monospace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": " -fx-letter-spacing: -0.2em;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": " -fx-line-height: 0.8em;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": " -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "#statusConsole {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-control-inner-background: grey;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 16,
      "-": 15
    }
  },
  {
    "path": "src/classrepo/ui/Gui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The GUI of the App"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int INITIAL_WINDOW_WIDTH \u003d 800;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final int INITIAL_WINDOW_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String version;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Gui(Logic logic, String version) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.version \u003d version;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Create the startup the window **/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        MainWindow mainWindow;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow \u003d createMainWindow(stage, mainApp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        mainWindow.displayWelcomeMessage(version, logic.getStorageFilePath(), logic.getStorageFilePathExam(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getStorageFilePathStatistics());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Create the GUI window **/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow createMainWindow(Stage stage, Stoppable mainApp) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Note: When calling getResource(), use \u0027/\u0027, instead of File.separator or \u0027\\\\\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More info: http://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_name_context"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loader.setLocation(Main.class.getResource(\"ui/mainwindow.fxml\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(version);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(new Scene(loader.load(), INITIAL_WINDOW_WIDTH, INITIAL_WINDOW_HEIGHT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpIcon(stage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        MainWindow mainWindow \u003d loader.getController();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setLogic(logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.setMainApp(mainApp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Create the application icon **/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpIcon(Stage stage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final InputStream input \u003d getClass().getResourceAsStream(\"images/Icon.png\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Image image \u003d new Image(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        stage.getIcons().add(image);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 2,
      "0WN463": 20,
      "micklwl": 1,
      "-": 43
    }
  },
  {
    "path": "src/classrepo/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_USING_EXAMS_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_USING_STATISTICS_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_USING_STORAGE_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WELCOME_ASCII_ART;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.Main;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Main Window of the GUI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stoppable mainApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextField commandInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextArea outputConsole;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextArea asciiArt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private TextArea statusConsole;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogic(Logic logic) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMainApp(Stoppable mainApp) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainApp \u003d mainApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true of the result given is the result of an exit command */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExitCommand(CommandResult result) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return result.getStatusConsoleMessage().equals(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the command input box */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clearCommandInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandInput.setText(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears the output display area */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void clearOutputConsole() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        outputConsole.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Clears the status display area */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void clearStatusConsole() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        statusConsole.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Displays the result of a command execution to the user. */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        clearOutputConsole();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        closeAsciiArt();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyPerson\u003e\u003e optResultPersons \u003d result.getRelevantPersons();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optResultPersons.ifPresent((p) -\u003e display(p, result.getPersonListFormat()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends ReadOnlyExam\u003e\u003e optResultExams \u003d result.getRelevantExams();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optResultExams.ifPresent(this::displayExams);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends Assessment\u003e\u003e optResultAssessment \u003d result.getRelevantAssessments();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optResultAssessment.ifPresent(this::displayAssessments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Optional\u003cList\u003c? extends AssignmentStatistics\u003e\u003e optStatisticsList \u003d result.getRelevantStatistics();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        optStatisticsList.ifPresent(this::displayStatistics);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(result.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Displays the welcome message**/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void displayWelcomeMessage(String version, String storageFilePath, String examsFilePath,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                      String statisticsFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String storageFileInfo \u003d String.format(MESSAGE_USING_STORAGE_FILE, storageFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examsFileInfo \u003d String.format(MESSAGE_USING_EXAMS_FILE, examsFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String statisticsFileInfo \u003d String.format(MESSAGE_USING_STATISTICS_FILE, statisticsFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        displayAscii(MESSAGE_WELCOME_ASCII_ART);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(version, MESSAGE_PROGRAM_LAUNCH_ARGS_USAGE, storageFileInfo, examsFileInfo,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                statisticsFileInfo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of persons in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void display(List\u003c? extends ReadOnlyPerson\u003e persons, PersonListFormat personListFormat) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(Formatter.format(persons, personListFormat));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the given messages on the output display area, after formatting appropriately."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void display(String... messages) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        outputConsole.setText(outputConsole.getText() + Formatter.format(messages));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Displays the given messages on the ASCII art area."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void displayAscii(String messages) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        asciiArt.setText(messages);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Displays the list of exams in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void displayExams(List\u003c? extends ReadOnlyExam\u003e exams) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(Formatter.formatExam(exams));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Displays the given messages on the status display area, after formatting appropriately."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void displayStatus(String message) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearStatusConsole();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        statusConsole.setText(message);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Displays the given messages from the result of a command on the respective display areas,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * after formatting appropriately."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void handleDisplay(CommandResult result) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearStatusConsole();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        clearCommandInput();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (result.hasStatusMessage()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            displayStatus(result.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (result.hasOutputMessage()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            displayResult(result);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Displays the list of assessments in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private void displayAssessments(List\u003c? extends Assessment\u003e assessments) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        display(Formatter.formatAssessments(assessments));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Displays the list of assessments in the output display area, formatted as an indexed list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private void displayStatistics(List\u003c? extends AssignmentStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        display(Formatter.formatStatistics(statistics));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Removes the AsciiArt."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void closeAsciiArt() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        asciiArt.setText(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        asciiArt.setManaged(false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Reads the user command on the CLI **/"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    void onCommand(ActionEvent event) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            String userCommandText \u003d commandInput.getText();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            CommandResult result \u003d logic.execute(userCommandText);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            handleDisplay(result);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            if (isExitCommand(result)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                clearOutputConsole();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                exitApp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            displayStatus(e.getMessage() + \"\\nExiting App...\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Main.LOGGER.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            // If this error occurs, data between the app and storage is likely to be desynced,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // so we force close the app to ensure synchronisation."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final int delayTime \u003d 3000;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            exitApp(delayTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Exits the app after a set delay*/"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void exitApp() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int defaultDelayTime \u003d 500;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        exitApp(defaultDelayTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Exits the app after a given delay*/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void exitApp(int delay) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    mainApp.stop();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    throw new RuntimeException(e);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Timer timer \u003d new Timer(\"Timer\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        timer.schedule(task, delay);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 17,
      "0WN463": 134,
      "micklwl": 18,
      "-": 53
    }
  },
  {
    "path": "src/classrepo/ui/Stoppable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * An App that can be stopped by calling the stop() method."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Stoppable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    void stop() throws Exception;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "-": 6
    }
  },
  {
    "path": "src/classrepo/ui/mainwindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "\u003cVBox stylesheets\u003d\"@/classrepo/ui/DarkTheme.css\" alignment\u003d\"center\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "      fx:controller\u003d\"classrepo.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandInput\" onAction\u003d\"#onCommand\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cTextArea fx:id\u003d\"asciiArt\" editable\u003d\"false\" VBox.vgrow\u003d\"NEVER\" prefHeight\u003d\"160\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTextArea fx:id\u003d\"outputConsole\" editable\u003d\"false\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003cTextArea fx:id\u003d\"statusConsole\" editable\u003d\"false\" wrapText\u003d\"true\" VBox.vgrow\u003d\"NEVER\" prefHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "0WN463": 7,
      "-": 17
    }
  },
  {
    "path": "test/java/classrepo/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.ListType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.MessageType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Due to the lack of GUI testing, CommandResult is tested thoroughly to ensure correct message is displayed,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * as it is the Object that tells MainWindow how its details should be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithStatusMessage \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", MessageType.STATUS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithOutputMessage \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"output message\", MessageType.OUTPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithBothMessage \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", \"output message\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithPersonList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", new ArrayList\u003c\u003e(), ListType.PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithExamsList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", new ArrayList\u003c\u003e(), ListType.EXAMS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithAssessList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", new ArrayList\u003c\u003e(), ListType.ASSESSMENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private CommandResult commandResultWithStatsList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            new CommandResult(\"status message\", new ArrayList\u003c\u003e(), ListType.STATISTICS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void assertHasOutputMessageCorrect() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithBothMessage.hasOutputMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithOutputMessage.hasOutputMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithExamsList.hasOutputMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithPersonList.hasOutputMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithAssessList.hasOutputMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithStatsList.hasOutputMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(commandResultWithStatusMessage.hasOutputMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void assertHasStatusMessageCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithBothMessage.hasStatusMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithStatusMessage.hasStatusMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithExamsList.hasStatusMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithPersonList.hasStatusMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithAssessList.hasStatusMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithStatsList.hasStatusMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(commandResultWithOutputMessage.hasStatusMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void assertListConversionSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithPersonList.getRelevantPersons()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(a -\u003e a.equals(new ArrayList\u003cPerson\u003e())).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithExamsList.getRelevantExams()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(a -\u003e a.equals(new ArrayList\u003cExam\u003e())).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithAssessList.getRelevantAssessments()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(a -\u003e a.equals(new ArrayList\u003cAssessment\u003e())).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(commandResultWithStatsList.getRelevantStatistics()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                .filter(a -\u003e a.equals(new ArrayList\u003cAssignmentStatistics\u003e())).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 72
    }
  },
  {
    "path": "test/java/classrepo/FormatterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.Formatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.formatter.PersonListFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class FormatterTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private List\u003cPair\u003cList\u003cPerson\u003e, String\u003e\u003e inputToExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatStringChain() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(String.format(\" A%s B%\u003cs C%\u003cs\", NEWLINE),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Formatter.format(\"A\", \"B\", \"C\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(String.format(\" A%s B%\u003cs C%\u003cs D%\u003cs\", NEWLINE),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Formatter.format(\"A\", \"B\\nC\", \"D\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatPersonsAllDetailsFormat() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEmptyListShowsEmpty(PersonListFormat.ALL_PUBLIC_DETAILS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String personFormat \u003d \" %1$d. Person %1$d%4$s\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" Phone: %1$d%4$s\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" Email: %1$d@email%4$s\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" Address: House of %1$d%4$s\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" Tags: [tag%2$d][tag%3$d]%4$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat + \" %4$s %4$s\", 1, 1, 2, NEWLINE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all fields non-private"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, false , false),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat + \" %4$s\", 1, 1, 2, NEWLINE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat + \" %4$s\", 2, 2, 3, NEWLINE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat + \" %4$s %4$s\", 3, 4, 3, NEWLINE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, number 2 is is private"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String person2Format \u003d \" %1$d. Person %1$d%4$s\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" Tags: [tag%2$d][tag%3$d]%4$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, true , false),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat + \" %4$s\", 1, 1, 2, NEWLINE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(person2Format + \" %4$s\", 2, 2, 3, NEWLINE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat + \" %4$s %4$s\", 3, 4, 3, NEWLINE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFormatterBehaviour(PersonListFormat.ALL_PUBLIC_DETAILS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void formatPersonsOnlyDueFeesFormat() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertEmptyListShowsEmpty(PersonListFormat.FEES_DUE_DETAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e persons \u003d List.of(p1, p2, p3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String expected \u003d String.format(\" 1. Person 1%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                + \" 2. Person 2%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                + \" 3. Person 3%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s %1$s\", NEWLINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertEquals(expected, Formatter.format(persons, PersonListFormat.FEES_DUE_DETAILS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, false , false),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(\" 1. Person 1%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        + \" 2. Person 2%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        + \" 3. Person 3%1$s {private Fees: 0.00 / 00-00-0000} %1$s Due!%1$s %1$s %1$s\", NEWLINE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertFormatterBehaviour(PersonListFormat.FEES_DUE_DETAILS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void formatPersonListFeeFormat() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertEmptyListShowsEmpty(PersonListFormat.FEES_DETAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, false , false),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(\" 1. Person 1%1$s No Fees owed!%1$s %1$s\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        + \" 2. Person 2%1$s No Fees owed!%1$s %1$s\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                        + \" 3. Person 3%1$s No Fees owed!%1$s %1$s %1$s\", NEWLINE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertFormatterBehaviour(PersonListFormat.FEES_DETAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatPersonsOnlyNameFormat() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEmptyListShowsEmpty(PersonListFormat.NAMES_ONLY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String personFormat \u003d \" %d. Person %\u003cd%s\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat + \" %\u003cs\", 1, NEWLINE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all fields non-private"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, false , false),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat, 1, NEWLINE)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat, 2, NEWLINE)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat + \" %\u003cs\", 3, NEWLINE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all fields non-private*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addInputToExpectedOutput(helper.generatePersonList(false, true , false),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(personFormat, 1, NEWLINE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat, 2, NEWLINE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        + String.format(personFormat + \" %\u003cs\", 3, NEWLINE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFormatterBehaviour(PersonListFormat.NAMES_ONLY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void formatPersonsAccountFormat() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e persons \u003d List.of(p1, p2, p3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all without accounts"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expected \u003d String.format(\" 1. Person 1%s\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" 2. Person 2%\u003cs\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" 3. Person 3%\u003cs\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" %\u003cs\", NEWLINE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, Formatter.format(persons, PersonListFormat.ACCOUNT_DETAILS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"user1\", \"pw\", \"Basic\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p2.setAccount(new Account(\"user2\", \"pw\", \"Tutor\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p3.setAccount(new Account(\"user3\", \"pw\", \"Admin\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //List of 3 people, all with accounts"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected \u003d String.format(\" 1. Person 1 User Type: Basic%s\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" 2. Person 2 User Type: Tutor%\u003cs\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" 3. Person 3 User Type: Admin%\u003cs\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + \" %\u003cs\", NEWLINE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, Formatter.format(persons, PersonListFormat.ACCOUNT_DETAILS));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void formatAllExam() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e exams \u003d helper.generateExamList(false, true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String examFormat \u003d \" %1$d. %2$sExam: Exam %1$d || Subject: Subject %1$d || Date: 01-02-2018 || \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \"Starts: 10:00 || Ends: 12:00 || Details: Held in %1$d || Takers: 0\" + NEWLINE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expected \u003d String.format(examFormat, 1, \"\") + String.format(examFormat, 2, \"private \") + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expected, Formatter.formatExam(exams));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void formatExam() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, true, 2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expected \u003d \"private Exam: Exam 1 || Subject: Subject 1 || Date: 01-02-2018 || \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            + \"Starts: 10:00 || Ends: 12:00 || Details: Held in 1 || Takers: 2\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expected, Formatter.getPrintableExam(e1.getExamName(), e1.getSubjectName(), e1.getExamDate(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                e1.getExamStartTime(), e1.getExamEndTime(), e1.getExamDetails(), e1.getTakers(), e1.isPrivate()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, false, 0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected \u003d \"Exam: Exam 2 || Subject: Subject 2 || Date: 01-02-2018 || \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \"Starts: 10:00 || Ends: 12:00 || Details: Held in 2 || Takers: 0\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expected, Formatter.getPrintableExam(e2.getExamName(), e2.getSubjectName(), e2.getExamDate(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                e2.getExamStartTime(), e2.getExamEndTime(), e2.getExamDetails(), e2.getTakers(), e2.isPrivate()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void formatAssessment() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expected \u003d \"1\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expected, Formatter.getPrintableAssessment(a1.getExamName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void formatListAssessments() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment1 \u003d new Assessment(Integer.toString(1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment2 \u003d new Assessment(Integer.toString(2));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e assessmentList \u003d helper.generateAssessmentsList(assessment1, assessment2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String assessmentFormat \u003d \" %1$d. %1$d\" + NEWLINE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expected \u003d String.format(assessmentFormat, 1) + String.format(assessmentFormat, 2) + \" \" + NEWLINE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expected, Formatter.formatAssessments(assessmentList));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void assertEmptyListShowsEmpty(PersonListFormat personListFormat) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(\" \" + NEWLINE, Formatter.format(Collections.emptyList(), personListFormat));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void addInputToExpectedOutput(List\u003cPerson\u003e input, String output) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutput.add(new Pair\u003c\u003e(input, output));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Asserts formatter turns input list in inputToExpectedOutput to its expected output"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Also tests for empty list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void assertFormatterBehaviour(PersonListFormat personListFormat) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEmptyListShowsEmpty(personListFormat);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Pair\u003cList\u003cPerson\u003e, String\u003e inputToOutput: inputToExpectedOutput) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String actual \u003d Formatter.format(inputToOutput.getFirst(), personListFormat);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String expected \u003d inputToOutput.getSecond();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 19,
      "0WN463": 134,
      "micklwl": 26,
      "lucdx": 34
    }
  },
  {
    "path": "test/java/classrepo/TestDataHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.ui.Gui.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Fees;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * A utility class to generate test data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class TestDataHelper {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Test person for testing**/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Person makeAdam() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Name name \u003d new Name(\"Adam Brown\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Phone privatePhone \u003d new Phone(\"111111\", true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Email email \u003d new Email(\"adam@gmail.com\", false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Address privateAddress \u003d new Address(\"111, alpha street\", true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person(name, privatePhone, email, privateAddress, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Test exam for testing**/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Exam makeMathExam() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examName \u003d \"Math Mid-Terms 2018\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectName \u003d \"Mathematics\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String date \u003d \"06-06-2018\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTime \u003d \"09:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTime \u003d \"12:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String details \u003d \"Held in MPSH\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        boolean isPrivate \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam(examName, subjectName, date, startTime, endTime, details, isPrivate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /** Test fees for testing**/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Fees makeFees (int seed) throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String value \u003d seed + \".45\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String dueDate \u003d \"01-0\" + seed + \"-2018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return new Fees(value, dueDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Test statistics for testing**/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public AssignmentStatistics stat() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examName \u003d \"Spanish Quiz\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        double averageScore \u003d 100;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        int totalExamTakers \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        double maxScore \u003d 100;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        double minScore \u003d 100;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new AssignmentStatistics(examName, averageScore, totalExamTakers, maxScore, minScore);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Test assessment for testing**/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public final Assessment makeAssess () throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String assessment \u003d \"CG2271 Midterm\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new Assessment(assessment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a valid person using the given seed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person generatePerson(int seed, boolean isAllFieldsPrivate) throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid person with a valid exam using the given seeds."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examSeed used to generate the exam data field values"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isExamPrivate determines if exam will be private"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param takers determines number of takers of exam"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Person generatePerson(int seed, boolean isAllFieldsPrivate, int examSeed,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                 boolean isExamPrivate, int takers) throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d new Person("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d generateExam(examSeed, isExamPrivate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        e1.setTakers(takers);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.addExam(e1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return p1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Generates a valid person with a valid assessment and grades using the given seeds."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned person will have the same state."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Each unique seed will generate a unique Person object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param seed used to generate the person data field values"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param isAllFieldsPrivate determines if private-able fields (phone, email, address) will be private"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param assessmentSeed used to generate the assessment data field values"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param gradeSeed used to generate the grades data field values"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Person generatePerson(int seed, boolean isAllFieldsPrivate, int assessmentSeed, int gradeSeed) throws"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d new Person("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Name(\"Person \" + seed),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Phone(\"\" + Math.abs(seed), isAllFieldsPrivate),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Email(seed + \"@email\", isAllFieldsPrivate),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Address(\"House of \" + seed, isAllFieldsPrivate),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag\" + Math.abs(seed)), new Tag(\"tag\" + Math.abs(seed + 1))))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        );"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d generateAssessment(assessmentSeed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Grades grades \u003d new Grades(gradeSeed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        a1.addGrade(p1, grades);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return p1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid exam using the given seed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Takers is left as 0."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned exam will have the same state."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Each unique seed will generate a unique Exam object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param seed used to generate the exam data field values"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isExamPrivate determines if the exam will be private"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam generateExam(int seed, boolean isExamPrivate) throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new Exam((\"Exam \" + seed), (\"Subject \" + seed), \"01-02-2018\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"10:00\", \"12:00\", (\"Held in \" + seed), isExamPrivate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a valid exam using the given seed and sets the takers value."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned exam will have the same state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Each unique seed will generate a unique Exam object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param seed used to generate the exam data field values"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isExamPrivate determines if the exam will be private"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param takers used to determine the number of exam-takers"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public Exam generateExam(int seed, boolean isExamPrivate, int takers) throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam exam \u003d generateExam(seed, isExamPrivate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exam.setTakers(takers);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return exam;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Generates a valid assessment using the given seed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Running this function with the same parameter values guarantees the returned assessment will have the same state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Each unique seed will generate a unique Assessment object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param seed used to generate the assessment"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public Assessment generateAssessment(int seed) throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new Assessment(Integer.toString(seed));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**Generated the prefix for the field **/"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Phone phone) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (phone.isPrivate() ? \" pp/\" : \" p/\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Email email) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (email.isPrivate() ? \" pe/\" : \" e/\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPrefix (Address address) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (address.isPrivate() ? \" pa/\" : \" a/\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getExamNamePrefix (Boolean isPrivate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (isPrivate ? \" pe/\" : \"e/\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getSubjectNamePrefix() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" s/\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getDatePrefix() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" d/\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getStartTimePrefix() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" st/\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getEndTimePrefix() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" et/\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getDetailsPrefix() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return (\" dt/\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Generates the correct add command based on the person given */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String generateAddCommand(Person p) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String phoneField \u003d getPrefix(p.getPhone()) + p.getPhone();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String emailField \u003d getPrefix(p.getEmail()) + p.getEmail();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String addressField \u003d getPrefix(p.getAddress()) + p.getAddress();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(\"add\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(p.getName().toString());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(phoneField);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(emailField);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        cmd.add(addressField);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Set\u003cTag\u003e tags \u003d p.getTags();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Tag t: tags) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            cmd.add(\"t/\" + t.tagName);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Generates a standard correct edit fees command*/"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public String generateEditFeesCommand() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\"editfees\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\"2\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\"1.45\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        cmd.add(\"01-01-2018\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Generates the correct add exam command based on the exam given */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String generateAddExamCommand(Exam e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examNameField \u003d getExamNamePrefix(e.isPrivate()) + e.getExamName();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectNameField \u003d getSubjectNamePrefix() + e.getSubjectName();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String dateField \u003d getDatePrefix() + e.getExamDate();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTimeField \u003d getStartTimePrefix() + e.getExamStartTime();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTimeField \u003d getEndTimePrefix() + e.getExamEndTime();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String detailsField \u003d getDetailsPrefix() + e.getExamDetails();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(\"addexam\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(examNameField);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(subjectNameField);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(dateField);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(startTimeField);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(endTimeField);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        cmd.add(detailsField);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Generates the correct addstatistics command based on the person given */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String generateAddAssignmentStatistics() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(\"addstatistics\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(Integer.toString(1));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** Generates the correct addassess command based on the assessment given */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String generateAddAssessment(Assessment a) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StringJoiner cmd \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examName \u003d a.getExamName();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(\"addassess\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        cmd.add(examName);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return cmd.toString();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates an ExamBook based on the list of Exams given."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook generateExamBook(List\u003cExam\u003e exams) throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, exams);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examBook;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook generateExamBook(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return examBook;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds auto-generated Exam objects to the given ExamBook"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param examBook The ExamBook to which the Exams will be added"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if the generated exams should be set to"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addToExamBook(ExamBook examBook, Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addToExamBook(examBook, generateExamList(isPrivateStatuses));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Adds the given list of Exams to the given ExamBook"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addToExamBook(ExamBook examBook, List\u003cExam\u003e examsToAdd) throws Exception {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Exam p: examsToAdd) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(p);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Generates a StatisticsBook based on the list of Statistics given."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook generateStatisticsBook(List\u003cAssignmentStatistics\u003e statistics) throws Exception {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addToStatisticsBook(statisticsBook, statistics);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return statisticsBook;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds the given list of statistics to the given StatisticsBook"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addToStatisticsBook(StatisticsBook statisticsBook, List\u003cAssignmentStatistics\u003e statisticsToAdd)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (AssignmentStatistics s: statisticsToAdd) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            statisticsBook.addStatistic(s);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates an AddressBook with auto-generated persons."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook generateAddressBook(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, isPrivateStatuses);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates an AddressBook based on the list of Persons given."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook generateAddressBook(List\u003cPerson\u003e persons) throws Exception {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, persons);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Adds auto-generated Person objects to the given AddressBook"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param addressBook The AddressBook to which the Persons will be added"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of generated persons should be set to"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addToAddressBook(AddressBook addressBook, Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addToAddressBook(addressBook, generatePersonList(isPrivateStatuses));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Adds the given list of Persons to the given AddressBook"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void addToAddressBook(AddressBook addressBook, List\u003cPerson\u003e personsToAdd) throws Exception {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Person p: personsToAdd) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.addPerson(p);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Adds the given list of Assessments to the given AddressBook"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessmentsToAddressBook(AddressBook addressBook, List\u003cAssessment\u003e assessmentsToAdd)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        for (Assessment a: assessmentsToAdd) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            addressBook.addAssessment(a);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates a list of Persons based on the given Person objects."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cPerson\u003e generatePersonList(Person... persons) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(persons));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a list of Persons based on the flags."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if all contact details of respective persons should be set to"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public List\u003cPerson\u003e generatePersonList(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Boolean p: isPrivateStatuses) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            persons.add(generatePerson(i++, p));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a Person object with given name. Other fields will have some dummy values."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public Person generatePersonWithName(String name) throws Exception {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Name(name),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Phone(\"1\", false),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Email(\"1@email\", false),"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Address(\"House of 1\", false),"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.singleton(new Tag(\"tag\"))"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Creates a list of Exams based on the given Exam objects."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cExam\u003e generateExamList(Exam... exams) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(exams));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Generates a list of Exams based on the flags."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param isPrivateStatuses flags to indicate if the exams should be set to"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *                          private."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public List\u003cExam\u003e generateExamList(Boolean... isPrivateStatuses) throws Exception {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (Boolean p : isPrivateStatuses) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            exams.add(generateExam(i++, p));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return exams;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Creates a list of Assessments based on the given assessment objects."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public List\u003cAssessment\u003e generateAssessmentsList(Assessment... assessments) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(assessments));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Class used to wrap the return arrays for generateThreePersons"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static class ThreePersons {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cPerson\u003e expected;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cPerson\u003e actual;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public ThreePersons() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            actual \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public List\u003cPerson\u003e getExpected() {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return expected;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setExpected(List\u003cPerson\u003e expected) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // copies the list"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            for (Person person: expected) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                this.expected.add(new Person(person));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public List\u003cPerson\u003e getActual() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return actual;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setActual(List\u003cPerson\u003e actual) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            // copies the list"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            for (Person person: actual) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                this.actual.add(new Person(person));"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public Person getActualPerson(int index) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return actual.get(index - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public Person getExpectedPerson(int index) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            return expected.get(index - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public void setBothPersons(int index, Account account) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            actual.get(index - DISPLAYED_INDEX_OFFSET).setAccount(account);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            expected.get(index - DISPLAYED_INDEX_OFFSET).setAccount(account);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Generates a 3 Person object with given name. Returns the Lists wrapped in ThreePerson"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public ThreePersons generateThreePersons() throws Exception {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ThreePersons threePersons \u003d new ThreePersons();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final List\u003cPerson\u003e p \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(1, true));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(2, false));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p.add(generatePerson(3, false));"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setActual(p);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setExpected(p);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return threePersons;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 111,
      "0WN463": 226,
      "micklwl": 176,
      "lucdx": 13
    }
  },
  {
    "path": "test/java/classrepo/common/UtilsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UtilsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNull() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // Any non-empty list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(new Object(), new Object()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"test\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with just one null at the beginning"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull((Object) null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, \"\", new Object()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(null, new Object(), new Object()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with nulls in the middle"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), null, null, \"test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", null, new Object()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // non empty list with one null as the last element"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(\"\", new Object(), null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.isAnyNull(new Object(), new Object(), null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside the list are not considered"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e nullList \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.isAnyNull(nullList));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void elementsAreUnique() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // only one object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique((Object) null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // all objects unique"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(\"abc\", \"ab\", \"a\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAreUnique(1, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // some identical objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"abc\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(1, Integer.valueOf(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, 1, Integer.valueOf(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotUnique(null, \"a\", \"b\", null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAreUnique(Object... objects) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNotUnique(Object... objects) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Utils.elementsAreUnique(Arrays.asList(objects)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //invalid format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"0132-2018\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"notADate\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //non leap year"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"00-02-2018\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Utils.isValidDate(\"01-02-2018\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Utils.isValidDate(\"28-02-2018\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"29-02-2018\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Check months with 30 and 31 days"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Utils.isValidDate(\"30-09-2018\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"31-09-2018\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Utils.isValidDate(\"31-10-2018\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"32-10-2018\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //leap year"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Utils.isValidDate(\"29-02-2016\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Utils.isValidDate(\"30-02-2016\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "micklwl": 24,
      "-": 70
    }
  },
  {
    "path": "test/java/classrepo/logic/AccountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author 0WN643"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.commands.account.AddAccountCommand.MESSAGE_INVALID_PRIVILEGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.privilege.Privilege.PRIVILEGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.AddAccountCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.DeleteAccountCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LoginCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LogoutCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.TutorUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.User.PrivilegeLevel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This tests for Commands that affects or depends on Account"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StatisticsBook statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticsBook, privilege);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setData(stubFile, addressBook, logic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpThreePerson(AddressBook addressBook,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  AddressBook expected,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  Logic logic,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  TestDataHelper.ThreePersons threePersons) throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(expected, threePersons.getExpected());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons.getActual());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(threePersons.getActual());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_invalidArgument_invalidMessageShown() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_wrongNumberOfArguments_wrongNumberOfArgumentsMessageShown() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc user password TUTOR\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 password TUTOR\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username TUTOR\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username password\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 username password TUTOR TrailingArgument\"};"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_invalidIndex_invalidIndexMessageShown() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"addacc\", \"\", \"username password BASIC\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_targetPersonHasAccount_targetPersonHasAccountMessageShown() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"SomeAccount\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"SomeAccount\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc 1 user password Basic\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 1 user password TUTOR\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 1 user password admin\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_PERSON_HAS_ACCOUNT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getExpected(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_personMissing_personMissingMessageShown() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 2 user password basic\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_invalidPrivilegeValue_invalidPrivilegeValueMessageShown() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputPrivileges \u003d {\"SUPERMAN\", \"BasicUser\", \"Admins\"};"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String inputPrivilege : inputPrivileges) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String inputFormat \u003d \"addacc 2 user password %s\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String input \u003d String.format(inputFormat, inputPrivilege);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    String.format(MESSAGE_INVALID_PRIVILEGE, inputPrivilege, PRIVILEGE_CONSTRAINTS),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getExpected(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_duplicateUsername_duplicateUsernameMessageShown() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"takenUserName\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectP1.setAccount(new Account(\"takenUserName\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"addacc 2 takenUserName password TUTOR\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 2 takenUserName AnotherPassword Basic\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"addacc 3 takenUserName password admin\"};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(input,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddAccountCommand.MESSAGE_USERNAME_TAKEN,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expected,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    threePersons.getExpected(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAddAccount_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP1 \u003d threePersons.getExpectedPerson(1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account account1 \u003d new Account(\"user\", \"password\", \"Basic\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(account1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 1 user password BASIC\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 1\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(threePersons.getActualPerson(1).getAccount().get(), account1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account account2 \u003d new Account(\"user2\", \"password2\", \"Admin\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP2.setAccount(account2);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 2 user2 password2 admin\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 2\"),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(threePersons.getActualPerson(2).getAccount().get(), account2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP3 \u003d threePersons.getExpectedPerson(3);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account account3 \u003d new Account(\"user3\", \"password3\", \"Tutor\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP3.setAccount(new Account(\"user3\", \"password3\", \"Tutor\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"addacc 3 user3 password3 Tutor\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(AddAccountCommand.MESSAGE_ADD_ACCOUNT_PERSON_SUCCESS, \"Person 3\"),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(threePersons.getActualPerson(3).getAccount().get(), account3);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_invalidArgsFormat_invalidMessageShown() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc \", expectedMessage);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_invalidIndex_invalidIndexMessageShown() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"deleteacc\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_personMissing_personMissingMessageShown() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person expectedP2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(expectedP2);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc 2\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_targetHasNoAccount_noAccountMessageShown() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc 2\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteAccountCommand.MESSAGE_PERSON_ACCOUNT_ABSENT,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_deleteSelf_targetingSelfMessageShown() throws Exception {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account myAccount \u003d new Account(\"myself\", \"password\", \"admin\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, myAccount);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person self \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(self);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc 1\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteAccountCommand.MESSAGE_DELETING_SELF,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteAccount_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(3, new Account(\"user3\", \"pw3\", \"Admin\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p2.setAccount(new Account(\"user2\", \"pw2\", \"basic\"));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"deleteacc 2\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(DeleteAccountCommand.MESSAGE_DELETE_ACCOUNT_PERSON_SUCCESS, p2.getName()),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeListAccount_noPersonHasAccount_showsEmpty() throws Exception {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"listacc\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeListAccount_personsWithAccount_showsList() throws Exception {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account myAccount \u003d new Account(\"myself\", \"password\", \"admin\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, myAccount);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Account myAccount2 \u003d new Account(\"myself2\", \"password2\", \"admin\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(2, myAccount2);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cReadOnlyPerson\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedList.add(threePersons.getExpectedPerson(1));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedList.add(threePersons.getExpectedPerson(2));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"listacc\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogin_invalidArgument_invalidMessageShown() throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook expectedAddressbook \u003d new AddressBook();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedAddressbook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login\","
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressbook,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogin_invalidNumberOfArgument_invalidNumberOfArgumentMessageShown() throws Exception {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final AddressBook expectedAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedAddressBook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int requiredArguments \u003d 2;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int actualArguments \u003d 1;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 1;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login password\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 3;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username password extra_argument\","
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, LoginCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogin_noAccountWithUsername_noAccountMessageShown() throws Exception {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login otherUsername password\","
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login password password\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogin_wrongPassword_wrongPasswordMessageShown() throws Exception {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook expectedAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Person expectedP1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedP1.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expectedAddressBook.addPerson(expectedP1);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel initialPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username WrongPassword\","
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username username\","
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login username password12345\","
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                LoginCommand.MESSAGE_WRONG_PASSWORD,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final PrivilegeLevel finalPrivilege \u003d privilege.getUser().getPrivilegeLevel();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(initialPrivilege, finalPrivilege);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogin_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(1, new Account(\"tutorUser\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(2, new Account(\"B_user\", \"password2\", \"Basic\"));"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.setBothPersons(3, new Account(\"Sudo\", \"password\", \"Admin\"));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p1 \u003d threePersons.getActualPerson(1);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login tutorUser password\","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p1.getName(), \"Tutor\"),"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new TutorUser());"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login B_user password2\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p2.getName(), \"Basic\"),"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p3 \u003d threePersons.getActualPerson(3);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"login Sudo password\","
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(LoginCommand.MESSAGE_SUCCESS, p3.getName(), \"Admin\"),"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogout_notLoggedIn_notLoggedInMessageShown() throws Exception {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"logout\", MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeLogout_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"logout\", LogoutCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(privilege.isBase());"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    // This is tested here as it requires knowledge of Account"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeClear_loggedIn_selfTargetingMessageShown() throws Exception {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"clear\","
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                ClearCommand.MESSAGE_DELETING_SELF,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "0WN463": 563,
      "micklwl": 10
    }
  },
  {
    "path": "test/java/classrepo/logic/AssessmentCommandsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "//@@author Meg1456"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_GRADES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_STATISTICS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehaviorForExam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.AddAssessmentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.AddAssignmentStatistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.AddGradesCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.DeleteGradesCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.DeleteStatisticsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.ListAssessmentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.ListStatisticsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.commands.assessment.ViewGradesCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " * For testing of Assessment-related Commands"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Meg1456"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "public class AssessmentCommandsTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *  See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Privilege set to admin to allow all commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Privilege restrictions are tested separately under PrivilegeTest."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Privilege privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticsBook, privilege);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        setData(stubFile, addressBook, logic, examBook, statisticsBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssessment_validArgs_successful() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment toBeAdded \u003d helper.makeAssess();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(toBeAdded);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e dummyList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssessment(toBeAdded),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(AddAssessmentCommand.MESSAGE_SUCCESS, toBeAdded), expected, false,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                dummyList, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssessment_duplicateData_duplicateMessage() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment toBeAdded \u003d helper.makeAssess();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(toBeAdded);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e dummyList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(toBeAdded); // assessment already in internal address book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(helper.generateAddAssessment(toBeAdded),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddAssessmentCommand.MESSAGE_DUPLICATE_ASSESSMENT, expected, false, dummyList, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssessment_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addassess\", expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addassess \", expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteAssessment_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deleteassess \", expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deleteassess arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteAssessment_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"deleteassess\", MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeListAssessments_validArgs_successfulList() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Math final\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(assessment);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(assessment);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment2 \u003d new Assessment(\"CG2271 Midterm\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addAssessment(assessment2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(assessment2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003c? extends Assessment\u003e expectedList \u003d List.of(assessment, assessment2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"listassess\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                Command.getMessageForAssessmentListShownSummary(expectedList),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeListAssessment_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"listassess 1 2\", expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"listassess any other arg\", expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_validArgs_success() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1Expected \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessmentExpected \u003d helper.generateAssessmentsList(a1Expected);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false, 1, 100);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        helper.addAssessmentsToAddressBook(expectedBook, singleAssessmentExpected);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 1 100\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(AddGradesCommand.MESSAGE_ADD_GRADE_SUCCESS, p1Expected.getName(), a1Expected), \"\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_invalidParsedArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 1 not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 not_a_number 1\", expectedMessage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 not_a_number not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades not_a_number 1 1\", expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades not_a_number 1 not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades not_a_number not_a_number 1\", expectedMessage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades not_a_number not_a_number not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_noArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades\", expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades \", expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_invalidPersonIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addAssessment(a1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 5 1 100\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, \"\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_invalidAssessmentIndex_invalidAssessmentIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addAssessment(a1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addPerson(p1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 5 100\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX, \"\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_invalidGrades_invalidGradesMessage() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addAssessment(a1);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addPerson(p1);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 1 -20.45\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                MESSAGE_INVALID_GRADES, \"\","
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_personMissing_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedBook.addAssessment(a1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 1 100\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK, \"\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddGrades_invalidNumberOfArgs_invalidNumberMessage() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 3, 1,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehaviorForExam(\"addgrades 1\", expectedMessage);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 3, 2,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addgrades 1 1\", expectedMessage);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteGrades_noArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades\", expectedMessage);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades \", expectedMessage);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteGrades_invalidNumberOfArgs_invalidNumberMessage() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 1,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades 1\", expectedMessage);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 3,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades 1 1 1\", expectedMessage);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteGrades_invalidParsedArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades not_a_number 1\", expectedMessage);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades 1 not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletegrades not_a_number not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeViewGrades_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"viewgrades \", expectedMessage);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"viewgrades arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeViewGrades_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewgrades\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeViewGrades_validArgs_success() throws Exception {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Grades grade \u003d new Grades(100.00);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        a1.addGrade(p1, grade);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false, 1, 100);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        helper.addAssessmentsToAddressBook(expectedBook, singleAssessment);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"viewgrades 1\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(ViewGradesCommand.MESSAGE_VIEW_GRADES_DETAILS, p1Expected.getAsTextShowAssess()), \"\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeViewGrades_personMissing_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Grades grade \u003d new Grades(100.00);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment a1 \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        a1.addGrade(p1, grade);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d helper.generateAssessmentsList(a1);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(a1);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expectedBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        helper.addAssessmentsToAddressBook(expectedBook, singleAssessment);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"viewgrades 1\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK, \"\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                expectedBook, false, logic.getLastShownList(), false,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                logic.getLastShownAssessmentList(), false);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeAddAssignmentStatistics_validArgs_successful() throws Exception {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AssignmentStatistics toBeAdded \u003d helper.stat();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook expected \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        expected.addStatistic(toBeAdded);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Spanish Quiz\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addAssessment(assessment);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person person1 \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Grades grade \u003d new Grades(100);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assessment.addGrade(person1, grade);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        addressBook.addPerson(person1);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d List.of(assessment);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"addstatistics 1\", String.format(AddAssignmentStatistics.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                toBeAdded), expected, false);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteStatistics_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStatisticsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletestatistics \", expectedMessage);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"deletestatistics arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeDeleteStatistics_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"deletestatistics\", MESSAGE_INVALID_STATISTICS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void executeListStatistics_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListStatisticsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"liststatistics 1 2\", expectedMessage);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertCommandBehavior(\"liststatistics any other args\", expectedMessage);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //@@author micklwl"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddAssignmentStatistics_duplicateStatistics_duplicateStatsMessage() throws Exception {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AssignmentStatistics toBeAdded \u003d helper.stat();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        statisticsBook.addStatistic(toBeAdded);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StatisticsBook expected \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addStatistic(toBeAdded);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Spanish Quiz\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addAssessment(assessment);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person person1 \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Grades grade \u003d new Grades(100);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assessment.addGrade(person1, grade);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addPerson(person1);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d List.of(assessment);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"addstatistics 1\", AddAssignmentStatistics.MESSAGE_DUPLICATE_STATISTIC,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddAssignmentStatistics_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StatisticsBook expected \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Spanish Quiz\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addAssessment(assessment);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person person1 \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Grades grade \u003d new Grades(100);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assessment.addGrade(person1, grade);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addPerson(person1);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cAssessment\u003e singleAssessment \u003d List.of(assessment);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownAssessmentList(singleAssessment);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"addstatistics 2\", MESSAGE_INVALID_ASSESSMENT_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 434,
      "micklwl": 44
    }
  },
  {
    "path": "test/java/classrepo/logic/AttendanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "//@@author meisbokai"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.attendance.ReplaceAttendanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.attendance.UpdateAttendanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.attendance.ViewAttendanceDateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.commands.attendance.ViewAttendancePersonCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " * For testing of Attendance Commands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "meisbokai"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        StatisticsBook statisticBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Privilege set to admin to allow all commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Privilege restrictions are tested separately under PrivilegeTest."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Privilege privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticBook, privilege);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        setData(stubFile, addressBook, logic);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    /** This file contains the following test:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * UpdateAttendance"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid argument"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - success"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid date format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - no input date (d/0)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - duplicate date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid attendance (att/x, x !\u003d 0 | 1)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * ViewAttendancePerson"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid argument"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - success"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - NIL date entry"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * ReplaceAttendance"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid argument"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - Success"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid date format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - no input date (d/0)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - No existing attendance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid attendance (att/x, x !\u003d 0 | 1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * ViewAttendanceDate"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid argument"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      \u003d success"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - invalid date format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - no input date (d/0)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *      - checking date with no attendance"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     * Format for naming of test : featureUnderTest_testScenario_expectedBehavior()."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_invalidArgsFormat_invalidCommandFormatMessage() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-1996 att/ \", expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 2\", expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_invalidDateFormat_invalidDateMessage() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/123123-123 att/1 \","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_updateCorrectPerson_showCorrectUpdate() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersonsExpected \u003d helper.generatePersonList(p1Expected, p2, p3);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersonsExpected);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1Expected.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                UpdateAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertEquals(p1.getAttendance(), p1Expected.getAttendance());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_noInputDate_updateTodayDate() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersonsExpected \u003d helper.generatePersonList(p1Expected, p2, p3);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersonsExpected);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String currentDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1Expected.updateAttendanceMethod(currentDate, true, false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/0 att/1\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                UpdateAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertEquals(p1.getAttendance(), p1Expected.getAttendance());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_duplicateDate_showDuplicateAttendanceMessage() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                UpdateAttendanceCommand.MESSAGE_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_invalidPersonIndex_invalidPersonMessage() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 2 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeUpdateAttendance_invalidAttendance_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"attendance 1 d/0 att/2 \","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendance_personInvalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ViewAttendancePersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenPerson \", expectedMessage);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendancePerson_personSuccess_displayAttendancePerson() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1Expected.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personListExpected);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenPerson 1\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ViewAttendancePersonCommand.MESSAGE_SUCCESS + p1Expected.getName()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                        + \":\\n\" + p1Expected.viewAttendanceMethod(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personListExpected,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendancePerson_personNilAttendance_displayNilAttendanceMessage() throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenPerson 1\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ViewAttendancePersonCommand.MESSAGE_SUCCESS + p1Expected.getName()"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                        + \":\\n\" + p1Expected.viewAttendanceMethod(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendance_personInvalidPersonIndex_invalidPersonIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenPerson 2\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReplaceAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/29-09-1996 att/ \", expectedMessage"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        );"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_invalidDateFormat_invalidDateMessage() throws Exception {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/123123-123 att/1 \","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_success_correctReplacement() throws Exception {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ReplaceAttendanceCommand.MESSAGE_SUCCESS + p1.getName(),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_noAttendanceYet_noDuplicateAttendanceMessage() throws Exception {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ReplaceAttendanceCommand.MESSAGE_NO_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_noInputDate_replaceTodayAttendance() throws Exception {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e onePersons \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e onePersonsExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(onePersonsExpected);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String currentDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1Expected.updateAttendanceMethod(currentDate, false, false);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, onePersons);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(onePersons);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1.updateAttendanceMethod(currentDate, true, false);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/0 att/0\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                ReplaceAttendanceCommand.MESSAGE_SUCCESS + p1Expected.getName(),"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                onePersons,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertEquals(p1.getAttendance(), p1Expected.getAttendance());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_invalidPersonIndex_invalidPersonIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 2 d/29-09-2018 att/1\","
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeReplaceAttendance_invalidAttendance_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReplaceAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"replaceAtten 1 d/0 att/2 \","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendanceDate_dateInvalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAttendanceDateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate \", expectedMessage);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate d/\", expectedMessage);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendanceDate_dateSuccess_correctDatesDisplayed() throws Exception {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p2.updateAttendanceMethod(\"29-09-2018\", true, false);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p3.updateAttendanceMethod(\"29-09-2018\", false, false);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d ViewAttendanceDateCommand.MESSAGE_SUCCESS + \"29-09-2018:\\n\""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Present\\n\" + \"Person 1\\nPerson 2\\n\" + \"\\n\""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Absent\\n\" + \"Person 3\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate d/29-09-2018\","
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendanceDate_dateInvalidDateFormat_invalidDateMessage() throws Exception {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DATE_CONSTRAINTS + ViewAttendanceDateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personList);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate d/123123-123\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                personList,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendance_dateNoInputDate_viewTodayAttendance() throws Exception {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String currentDate \u003d new SimpleDateFormat(\"dd-MM-yyyy\").format(new Date());"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p1.updateAttendanceMethod(currentDate, true, false);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p2.updateAttendanceMethod(currentDate, true, false);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        p3.updateAttendanceMethod(currentDate, false, false);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d ViewAttendanceDateCommand.MESSAGE_SUCCESS + currentDate + \":\\n\""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Present\\n\" + \"Person 1\\nPerson 2\\n\" + \"\\n\""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Absent\\n\" + \"Person 3\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate d/0\","
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void executeViewAttendance_dateNoAttendanceTaken_noAttendanceShowAsAbsent() throws Exception {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Test if the default attendance is \"Absent\""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        String expectedMessage \u003d ViewAttendanceDateCommand.MESSAGE_SUCCESS + \"01-11-2018\" + \":\\n\""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Present\\n\" + \"\" + \"\\n\""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                + \"Absent\\n\" + \"Person 1\\nPerson 2\\nPerson 3\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertCommandBehavior(\"viewAttenDate d/01-11-2018\","
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                expectedBook,"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "meisbokai": 562
    }
  },
  {
    "path": "test/java/classrepo/logic/CommandAssertions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.MessageType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * This class holds the commonly used assertions of commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class CommandAssertions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static StorageStub storageStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static AddressBook addressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static ExamBook examBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static StatisticsBook statisticsBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void setData(StorageStub saveFile, AddressBook addressBook, Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.storageStub \u003d saveFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void setData(StorageStub saveFile, AddressBook addressBook, Logic logic, ExamBook examBook,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                               StatisticsBook statisticsBook) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setData(saveFile, addressBook, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.examBook \u003d examBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandAssertions.statisticsBook \u003d statisticsBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status message is correct."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Expected AddressBook is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list is empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Is not mutating"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand, String expectedStatusMessage) throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, \"\", AddressBook.empty(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false, Collections.emptyList(), false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status and output messages are correct."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: Expected AddressBook is empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Is not mutating"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedOutputMessage) throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, expectedOutputMessage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                AddressBook.empty(), false, Collections.emptyList(), false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result message are correct, and is in the correct console."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: Result message is printed on only one of the consoles"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Expected AddressBook is empty"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list is empty"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Is not mutating"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param messageType specify which console the given message is supposed to be written to"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedMessage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             MessageType messageType) throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (messageType.equals(MessageType.STATUS)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(inputCommand, expectedMessage, \"\", AddressBook.empty(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false, Collections.emptyList(), false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } else if (messageType.equals(MessageType.OUTPUT)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(inputCommand, \"\", expectedMessage, AddressBook.empty(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    false, Collections.emptyList(), false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status message is correct and AddressBook is in the expected state"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isMutating) throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, \"\", expectedAddressBook,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantPersonsExpected, lastShownList, isMutating);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result messages are correct and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code lastShownList} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      if command is expected to save after execution"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *      - the StorageFile.save() is called using the execution {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isMutating) throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the result messages contains the right data"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedOutputMessage, r.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isRelevantPersonsExpected) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm data is saved if is expected to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isMutating) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSaved());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Executes the command and confirms that the result message is correct and"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code lastShownList} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      if the command is mutating"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             boolean isRelevantAssessmentsExpected,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             List\u003c? extends Assessment\u003e lastShownAssessmentsList,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isMutating) throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expectedOutputMessage, r.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (isRelevantPersonsExpected) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (isRelevantAssessmentsExpected) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertEquals(lastShownAssessmentsList, logic.getLastShownAssessmentList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm data is saved if is expected to"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isMutating) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSaved());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the result messages are correct."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: Expected ExamBook is empty"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list is empty"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Is not mutating"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @see #assertCommandBehavior(String, String, ExamBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand, String expectedStatusMessage,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             ExamBook exambook, List\u003cReadOnlyExam\u003e lastShownList) throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, exambook,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false, lastShownList, false);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status message is correct and"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, ExamBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownList,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isExamMutating) throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedStatusMessage, \"\", expectedExamBook,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantExamsExpected, lastShownList, isExamMutating);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result messages are correct and"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumes the storage to be tested and the expectedOutputMessage to be empty"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, String, AddressBook, ExamBook,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *                                boolean, boolean, List, List, boolean, boolean)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownExamList) throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(inputCommand,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedStatusMessage,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedAddressBook,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedExamBook,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                isRelevantExamsExpected,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownExamList,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result messages are correct and"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * also confirms that the following three parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the internal exam book data are same as those in the {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the internal \u0027last shown list\u0027 matches the {@code lastShownList} \u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      if the command is exam-mutating"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      - the storage exam file content matches data in {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownList,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isExamMutating) throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedOutputMessage, r.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(r.getRelevantExams().isPresent(), isRelevantExamsExpected);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isRelevantExamsExpected) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantExams().get());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedExamBook, examBook);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(lastShownList, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm data is saved if is expected to"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isExamMutating) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSavedExams());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result messages are correct and"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * also confirms that the following two parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the internal statistics book data are same as those in the {@code expectedStatisticsBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *      if the command is mutating"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     *      - the storage file content matches data in {@code expectedStatisticsBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                                             StatisticsBook expectedStatisticsBook,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isMutating) throws Exception {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // If we need the storage to be tested"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Injects the storageStub object to check"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(expectedStatisticsBook, statisticsBook);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm data is saved if is expected to"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isMutating) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSaved());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Executes the command and confirms that the result messages are correct and"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * also confirms that the following six parts of the Logic object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the internal address book data are same as those in the {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the internal exam book data are same as those in the {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the internal \u0027last shown list\u0027 matches the {@code lastShownList} \u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the internal \u0027last shown exam list\u0027 matches the {@code lastShownExamList} \u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     if the command is mutating and exam-mutating"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the storage file content matches data in {@code expectedAddressBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *     - the storage exam file content matches data in {@code expectedExamBook} \u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehavior(String inputCommand,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedStatusMessage,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             String expectedOutputMessage,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             AddressBook expectedAddressBook,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             ExamBook expectedExamBook,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantPersonsExpected,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             boolean isRelevantExamsExpected,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             List\u003c? extends ReadOnlyPerson\u003e lastShownList,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                             List\u003c? extends ReadOnlyExam\u003e lastShownExamList,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isMutating,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                             boolean isExamMutating) throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Execute the command"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        CommandResult r \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the result contains the right data"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedStatusMessage, r.getStatusConsoleMessage());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedOutputMessage, r.getOutputConsoleMessage());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(r.getRelevantPersons().isPresent(), isRelevantPersonsExpected);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(r.getRelevantExams().isPresent(), isRelevantExamsExpected);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isRelevantPersonsExpected) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(lastShownList, r.getRelevantPersons().get());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (isRelevantExamsExpected) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(lastShownExamList, r.getRelevantExams().get());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //Confirm the state of data is as expected"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedExamBook, examBook);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(expectedAddressBook, addressBook);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm data is saved if is expected to"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isMutating) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSaved());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (isExamMutating) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertTrue(\"Command did not have expected saving behaviour\", storageStub.getHasSavedExams());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD INDEX"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: The person list used for testing contains 2 persons"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public static void assertInvalidIndexBehaviorForCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(commandWord, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD INDEX"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * @param commandWord to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public static void assertInvalidIndexBehaviorForCommand(String commandWord, String messageFormat) throws Exception {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] commands \u003d {commandWord + \" 0\", commandWord + \" -1\", commandWord + \" 3\"};"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviour(commands, messageFormat);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD PREFIX INDEX SUFFIX"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * PREFIX and SUFFIX can be empty"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commandWord of the command."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param prefix containing required information to enter before the INDEX."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param suffix containing required information to enter after the INDEX."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertInvalidIndexBehaviorForCommand(String commandWord, String prefix,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                                            String suffix) throws Exception {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] commands \u003d {String.format(\"%s %s 0 %s\", commandWord, prefix, suffix),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(\"%s %s -1 %s\", commandWord, prefix, suffix),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(\"%s %s 3 %s\", commandWord, prefix, suffix)};"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertInvalidIndexBehaviour(commands, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command array"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * targeting a single person in the last shown list, using visible index."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Expected AddressBook is empty"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list does not change"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Is not mutating"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param commands to test assuming it targets a single person in the last shown list based on visible index."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static void assertInvalidIndexBehaviour(String[] commands, String messageFormat) throws Exception {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(false, true);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String command: commands) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertCommandBehavior(command, messageFormat,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    AddressBook.empty(), false, lastShownList, false);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Executes the command and confirms that the status message is correct."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Expected ExamBook is empty"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list is empty"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *              Is not exam-mutating"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @see #assertCommandBehavior(String, String, ExamBook, boolean, List, boolean)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertCommandBehaviorForExam(String inputCommand, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedMessage, ExamBook.empty(),"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false, Collections.emptyList(), false);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Confirms the \u0027invalid argument index number behaviour\u0027 for the given command"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * targeting a single exam in the last shown list, using visible index."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Used for commands in the form of COMMAND_WORD INDEX"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Assumptions: No output console message"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Expected ExamBook is empty"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              No relevant persons expected"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *              Last shown list does not change"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     *              Is not exam-mutating"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * @param commandWord to test assuming it targets a single exam in the last shown list based on visible index."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public static void assertInvalidIndexBehaviorForExamCommand(String commandWord) throws Exception {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e lastShownList \u003d helper.generateExamList(false, true);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(lastShownList);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] commands \u003d {commandWord + \" 0\", commandWord + \" -1\", commandWord + \" 3\"};"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (String command: commands) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(command, MESSAGE_INVALID_EXAM_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    ExamBook.empty(), false, lastShownList, false);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 64,
      "0WN463": 267,
      "micklwl": 134
    }
  },
  {
    "path": "test/java/classrepo/logic/ExamCommandsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "micklwl"
        },
        "content": "//@@author micklwl"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_NOT_LOGGED_IN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_NO_EXAMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_NO_NON_PRIVATE_EXAMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_TARGET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehaviorForExam;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForExamCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.AddExamCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.ClearExamsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.DeleteExamCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.DeregisterExamCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.EditExamCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.RegisterExamCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.exams.ViewExamsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.data.person.ReadOnlyExam;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * For testing of Exams-related Commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamCommandsTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook examBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageStub stubFile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StatisticsBook statisticBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticBook, privilege);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setData(stubFile, addressBook, logic, examBook, statisticBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddExam_validData_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.makeMathExam();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(helper.generateAddExamCommand(toBeAdded),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(AddExamCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, true,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected.getAllExam().immutableListView(), true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddExam_duplicateData_duplicateMessage() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.makeMathExam();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.addExam(toBeAdded); // exam already in internal exam book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                helper.generateAddExamCommand(toBeAdded), AddExamCommand.MESSAGE_DUPLICATE_EXAM,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAddExam_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg \u003d \"d/32122018\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg2 \u003d \"d/not_a_number\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validDateArg \u003d \"d/\" + Exam.EXAM_DATE_EXAMPLE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg \u003d \"st/not__numbers\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg2 \u003d \"st/999999\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validStartTimeArg \u003d \"st/\" + Exam.EXAM_START_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg \u003d \"et/not__numbers\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg2 \u003d \"et/999999\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validEndTimeArg \u003d \"et/\" + Exam.EXAM_END_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeIntervalArg \u003d \"et/08:00\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // exam name, subject name and details can be any string, so no invalid strings"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String addExamCommandFormatString \u003d \"addexam e/\" + Exam.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" s/\" + Exam.SUBJECT_NAME_EXAMPLE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" %s %s %s dt/\" + Exam.EXAM_DETAILS_EXAMPLE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam toBeAdded \u003d helper.makeMathExam();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d new ExamBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addExam(toBeAdded);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, invalidDateArg,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, invalidDateArg2,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                invalidStartTimeArg, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                invalidStartTimeArg2, validEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeArg), expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeArg2), expectedMessage);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_INTERVAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(String.format(addExamCommandFormatString, validDateArg,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                validStartTimeArg, invalidEndTimeIntervalArg), expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeListExamsShowsAllExams() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(false, true);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003c? extends ReadOnlyExam\u003e expectedList \u003d expected.getAllExam().immutableListView();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // prepare exam book state"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, false, true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"listexams\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Command.getMessageForExamListShownSummary(expectedList),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, true, expectedList, false);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeClearExamsSuccess() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // generates the 3 test exam and execute the add exam command"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 3; ++i) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam testExam \u003d helper.generateExam(i, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            examBook.addExam(testExam);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            logic.execute(helper.generateAddExamCommand(testExam));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"clearexams\", ClearExamsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                ExamBook.empty(), true,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExamRemovesCorrectExam_validData_success() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam 2\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(DeleteExamCommand.MESSAGE_DELETE_EXAM_SUCCESS, e2),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, true,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected.getAllExam().immutableListView(), true);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExam_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deleteexam \", expectedMessage);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deleteexam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExam_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForExamCommand(\"deleteexam\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExam_missingInExamBook_examMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.removeExam(e2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam 2\", Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false, threeExams, false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_validData_success() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e4 \u003d helper.generateExam(4, false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.editExam(e2, e4);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 2 p/n e/Exam 4 s/Subject 4 d/01-02-2018 dt/Held in 4\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(EditExamCommand.MESSAGE_EDIT_EXAM_SUCCESS, e2, e4),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, true,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected.getAllExam().immutableListView(), true);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"editexam \", expectedMessage);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"editexam arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForExamCommand(\"editexam 4 s/Mathematics\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_invalidArgs_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e4 \u003d helper.generateExam(4, false);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.editExam(e2, e4);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String[] dateTestCommand \u003d {\"editexam 1 d/notADate\", \"editexam 1 d/07012018 st/09:00\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 1 d/32122018 st/09:00\"};"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (String string: dateTestCommand) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(string, expectedMessage, examBook, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String[] timeTestCommand \u003d {\"editexam 1 st/notATime\", \"editexam 1 st/07012018\", \"editexam 1 st/2366\","
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 1 et/notATime\", \"editexam 1 et/07012018\", \"editexam 1 et/2366\"};"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (String string: timeTestCommand) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(string, expectedMessage, examBook, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d Exam.MESSAGE_TIME_INTERVAL_CONSTRAINTS;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 st/09:00 et/08:00\", expectedMessage,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examBook, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d EditExamCommand.MESSAGE_DUPLICATE_EXAM;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, true);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(String.format(\"editexam 1 e/%s\", e1.getExamName()), expectedMessage,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examBook, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d EditExamCommand.MESSAGE_PRIVATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 1 p/ok\", expectedMessage,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                examBook, logic.getLastShownExamList());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_missingInExamBook_examMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.removeExam(e2);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.removeExam(e2);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 2 s/Mathematics\", Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false, threeExams, false);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_validArgsSingleTaker_success() throws Exception {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(true, true);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1Expected \u003d helper.generateExam(1, false, 1);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExamExpected \u003d helper.generateExamList(e1Expected);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(singleExamExpected);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false, 1, false , 1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 1 1\","
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(RegisterExamCommand.MESSAGE_REGISTER_EXAM_SUCCESS, p1Expected.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1Expected.getAsTextShowAllExam(),"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedBook, expectedExamBook, false, false,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList(), true, true);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_validArgsMultiTakers_success() throws Exception {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper, 2, 0, 0);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 2);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false, 1, false, 2);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExamsExpected \u003d setUpThreeExamsWithTakers(helper, 3, 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(threeExamsExpected);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false, 1 , false, 3);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2Expected \u003d helper.generatePerson(2, false, 1 , false, 3);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3Expected \u003d helper.generatePerson(3, false, 1, false, 3);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected, p2Expected, p3Expected);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 3 1\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(RegisterExamCommand.MESSAGE_REGISTER_EXAM_SUCCESS, p3Expected.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p3Expected.getAsTextShowAllExam(),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedBook, expectedExamBook, false, false,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList(), true, true);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_invalidParsedArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam not_a_number 2\", expectedMessage);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam 2 not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam not_a_number not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_validArgsSingleTakerAlreadyRegistered_registerDuplicateMessage() throws Exception {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper, 1, 0, 0);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1 , false, 1);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 1 1\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                RegisterExamCommand.MESSAGE_EXAM_ALREADY_REGISTERED,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_noArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam\", expectedMessage);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam \", expectedMessage);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_invalidNumberOfArgs_invalidNumberMessage() throws Exception {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 1,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                RegisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam 1\", expectedMessage);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 3,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                RegisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"regexam 1 1 1\", expectedMessage);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_invalidArgsForPersonIndex_invalidPersonIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(true, true);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 2 1\","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 2 2\","
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_invalidArgsForExamIndex_invalidExamIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(true, true);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 1 2\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_personMissingInAddressBook_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(true, false);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 1 1\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeRegisterExam_examMissingInExamBook_examMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(false, true);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"regexam 1 1\","
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_validArgsSingleTaker_success() throws Exception {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonRegistered(true, true);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1Expected \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExamExpected \u003d helper.generateExamList(e1Expected);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(singleExamExpected);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1Expected \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1Expected);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 1 1\","
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(DeregisterExamCommand.MESSAGE_DEREGISTER_EXAM_SUCCESS,"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        p1Expected.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1Expected.getAsTextShowAllExam(),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedBook, expectedExamBook, false, false,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList(), true, true);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_validArgsMultiTakers_success() throws Exception {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExam \u003d setUpThreeExamsWithTakers(helper, 0, 2 , 0);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, singleExam);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(singleExam);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personList \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExamExpected \u003d setUpThreeExamsWithTakers(helper, 0, 1, 0);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(singleExamExpected);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 2 , true, 1);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personListExpected \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedBook \u003d helper.generateAddressBook(personListExpected);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 2 2\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(DeregisterExamCommand.MESSAGE_DEREGISTER_EXAM_SUCCESS, p2.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p2.getAsTextShowAllExam(),"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedBook, expectedExamBook, false, false,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList(), true, true);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_validArgsSingleTakerNotRegistered_notRegisteredMessage() throws Exception {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonNotRegistered(true, true);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 1 1\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                DeregisterExamCommand.MESSAGE_EXAM_NOT_REGISTERED,"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_noArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeregisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam\", expectedMessage);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam \", expectedMessage);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_invalidNumberOfArgs_invalidNumberMessage() throws Exception {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 1,"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                DeregisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam 1\", expectedMessage);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 3,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                DeregisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam 1 1 1\", expectedMessage);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_invalidParsedArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeregisterExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam not_a_number 2\", expectedMessage);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam 2 not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehaviorForExam(\"deregexam not_a_number not_a_number\", expectedMessage);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_invalidArgsForPersonIndex_invalidPersonIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonRegistered(true, true);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 2 1\","
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 2 2\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_invalidArgsForExamIndex_invalidExamIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonRegistered(true, true);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 1 2\","
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_INVALID_EXAM_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_personMissingInAddressBook_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonRegistered(true, false);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 1 1\","
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeregisterExam_examMissingInExamBook_examMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpSingleExamPersonRegistered(false, true);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deregexam 1 1\","
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                addressBook, examBook, false, false,"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                logic.getLastShownList(), logic.getLastShownExamList());"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewExamsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams \", expectedMessage);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewexams\");"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_validArgsAsTutorAdmin_showsAllExamsSuccess() throws Exception {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 1);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false , 2);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false, 1, false, 2);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, false);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p2.addExam(e2);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 1\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p1.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1.getAsTextShowExam(), expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 2\","
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p2.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p2.getAsTextShowAllExam(), expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 3\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p3.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(MESSAGE_NO_EXAMS, p3.getName()), expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_validArgsAsStudent_hidesPrivateExamsSuccess() throws Exception {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, true, 1);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.setMyPerson(p1);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 1\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p1.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(MESSAGE_NO_NON_PRIVATE_EXAMS, p1.getName()), addressBook, false, lastShownList, false);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_missingPerson_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false, 2, false, 1);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 2\", MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_loggedInStudentWrongTarget_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 1);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.setMyPerson(p1);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 2\", MESSAGE_WRONG_TARGET, addressBook, false,"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                lastShownList, false);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_notLoggedIn_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 1);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 2\", MESSAGE_NOT_LOGGED_IN, addressBook, false,"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                lastShownList, false);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_loggedInStudentCorrectTarget_success() throws Exception {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 1);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setAccount(new Account(\"username\", \"password\", \"Basic\"));"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.setMyPerson(p1);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 1\","
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p1.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1.getAsTextShowExam(), expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewExams_loggedInTutor_success() throws Exception {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 1);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p2.setAccount(new Account(\"username\", \"password\", \"Tutor\"));"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewexams 1\","
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewExamsCommand.MESSAGE_VIEW_EXAMS_PERSON_SUCCESS, p1.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1.getAsTextShowExam(), expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeClear_validData_success() throws Exception {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper, 0, 2, 1);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e examExpected \u003d setUpThreeExamsNoTakers(helper);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(examExpected);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"clear\", ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                AddressBook.empty(), expectedExamBook, true, false,"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDelete_validData_removesCorrectPersonAndExam() throws Exception {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true, 2, true, 2);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 2);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false, 1);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e examList \u003d helper.generateExamList(e2, e3);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, examList);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2Expected \u003d helper.generateExam(2, true, 1);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e expectedExamList \u003d helper.generateExamList(e2Expected, e3);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(expectedExamList);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 2, true, 1);"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e newList \u003d helper.generatePersonList(p1, p3);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedAddressBook \u003d helper.generateAddressBook(newList);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook, expectedExamBook, true, false,"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                newList, Collections.emptyList());"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDelete_validArgs_missingExamMessage() throws Exception {"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false, 1);"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        examBook.addExam(e3);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Messages.MESSAGE_EXAM_NOT_IN_EXAMBOOK, examBook, false,"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), false);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeClearExams_validFormat_successWithAddressBook() throws Exception {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper , 0, 2, 1);"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e newList \u003d helper.generatePersonList(newP1, newP2, newP3);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedAddressBook \u003d helper.generateAddressBook(newList);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"clearexams\", ClearExamsCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook, ExamBook.empty(), false, true,"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDeleteExam_validArgs_removesCorrectExamInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper, 0, 2, 1);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 2);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedExamBook.removeExam(e2);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e newList \u003d helper.generatePersonList(newP1, newP2, newP3);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedAddressBook \u003d helper.generateAddressBook(newList);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"deleteexam 2\", String.format(DeleteExamCommand.MESSAGE_DELETE_EXAM_SUCCESS, e2),"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook, expectedExamBook, false, true,"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), expectedExamBook.getAllExam().immutableListView());"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeEditExam_validArgs_changesAddressBookSuccess() throws Exception {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d setUpThreeExamsWithTakers(helper, 0, 2, 1);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToExamBook(examBook, threeExams);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(threeExams);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expectedExamBook \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 2);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e4 \u003d helper.generateExam(4, false, 2);"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expectedExamBook.editExam(e2, e4);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d setUpThreePersonsStandardExam(helper);"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP1 \u003d helper.generatePerson(1, true, 4, false, 2);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP2 \u003d helper.generatePerson(2, true, 4, false, 2);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person newP3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e newList \u003d helper.generatePersonList(newP1, newP2, newP3);"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expectedAddressBook \u003d helper.generateAddressBook(newList);"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editexam 2 p/n e/Exam 4 s/Subject 4 d/01-02-2018 dt/Held in 4\","
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(EditExamCommand.MESSAGE_EDIT_EXAM_SUCCESS, e2, e4),"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedAddressBook, expectedExamBook, false, true,"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptyList(), expectedExamBook.getAllExam().immutableListView());"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewAllAlsoShowsPrivateAndAllExams() throws Exception {"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 1 , true, 1);"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false, 2, false , 1);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getName()),"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p1.getAsTextShowAll(), expected,"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false, lastShownList, false);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getName()),"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p2.getAsTextShowAll(), expected,"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false, lastShownList, false);"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cExam\u003e setUpThreeExamsNoTakers(TestDataHelper helper) throws Exception {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true);"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false);"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return threeExams;"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cExam\u003e setUpThreeExamsWithTakers(TestDataHelper helper, int taker1,"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                                                 int taker2, int taker3) throws Exception {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false, taker1);"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, taker2);"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false, taker3);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return threeExams;"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private List\u003cPerson\u003e setUpThreePersonsStandardExam(TestDataHelper helper) throws Exception {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 2, true, 2);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true, 2, true, 2);"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return threePersons;"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void setUpSingleExamPersonRegistered(boolean hasExamBookUpdated, boolean hasAddressBookUpdated)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false, 1);"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExam \u003d helper.generateExamList(e1);"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (hasExamBookUpdated) {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            helper.addToExamBook(examBook, singleExam);"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(singleExam);"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false, 1, false, 1);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (hasAddressBookUpdated) {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void setUpSingleExamPersonNotRegistered(boolean hasExamBookUpdated, boolean hasAddressBookUpdated)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e singleExam \u003d helper.generateExamList(e1);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (hasExamBookUpdated) {"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            helper.addToExamBook(examBook, singleExam);"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownExamList(singleExam);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e personList \u003d helper.generatePersonList(p1);"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        if (hasAddressBookUpdated) {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            helper.addToAddressBook(addressBook, personList);"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(personList);"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 945
    }
  },
  {
    "path": "test/java/classrepo/logic/ExamTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "micklwl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "micklwl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "micklwl"
        },
        "content": " * For further testing of methods in Exam class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "micklwl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "public class ExamTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"0132/2018\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"25:00\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"2500\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTime(\"notATime\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void isValidTimeInterval() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"2300\", \"1000\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"23:00\", \"10:00\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertFalse(Exam.isValidTimeInterval(\"10:00\", \"10:00\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertTrue(Exam.isValidTimeInterval(\"10:00\", \"10:01\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 2,
      "micklwl": 28
    }
  },
  {
    "path": "test/java/classrepo/logic/FeesCommandsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucdx"
        },
        "content": "//@@author lucdx"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucdx"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_FEES_VALUE_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.commands.fees.EditFeesCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.commands.fees.PaidFeesCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.commands.fees.ViewFeesCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.person.Fees;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucdx"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucdx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucdx"
        },
        "content": " * For testing of Fees-related Commands"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucdx"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucdx"
        },
        "content": "public class FeesCommandsTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucdx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StatisticsBook statisticBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Privilege set to admin to allow all commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // Privilege restrictions are tested separately under PrivilegeTest."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Privilege privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticBook, privilege);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        setData(stubFile, addressBook, logic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_invalidData_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"editfees 2 1.111 01-01-2018\", Fees.MESSAGE_FEES_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_validData_successfulMessage() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(helper.generateEditFeesCommand(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(EditFeesCommand.MESSAGE_SUCCESS, p2.getAsTextShowFee()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_updateZero_successfulMessage() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Tag temp \u003d new Tag(\"feesdue\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        p2.getTags().add(temp);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"editfees 1 0.00 00-00-0000\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                MESSAGE_DATE_CONSTRAINTS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getName()),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                p2.getAsTextShowAll(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_invalidPerson_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"editfees 2 1.11 11-11-2018\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_invalidIndex_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"editfees 0 12.12 01-01-2018\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeEditFees_invalidValue_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"editfees 2 0.00 12-12-2018\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                MESSAGE_FEES_VALUE_CONSTRAINTS,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeListFees_validData_successfulList() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expected.listFeesPerson();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"listfees\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Command.getMessageForFeesListShownSummary(expectedList),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeListFees_emptyData_emptyList() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(list);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"listfees\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Command.getMessageForFeesListShownSummary(expectedList),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeListDue_validData_successfulList() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        String date \u003d java.time.LocalDate.now().toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        p1.setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        p2.setFees(helper.makeFees(3));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        p3.setFees(helper.makeFees(2));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expected.listdueFeesPerson(date);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"listdue\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Command.getMessageForFeesListShownSummary(expectedList),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeListDueFees_withUpdate_successfulList() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePerson \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook temp \u003d helper.generateAddressBook(threePerson);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d temp.listdueFeesPerson(\"0000-00-00\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e twoPerson \u003d helper.generatePersonList(p1, p3);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected2 \u003d helper.generateAddressBook(twoPerson);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, twoPerson);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(twoPerson);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"listdue\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Command.getMessageForFeesListShownSummary(expectedList),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected2,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executeListDueFees_emptyData_emptyList() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(list);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"listdue\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                Command.getMessageForFeesListShownSummary(expectedList),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executePaidFees_validDataNoFees_successfulMessage() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"paidfees 2\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                String.format(PaidFeesCommand.MESSAGE_NO_FEES, p2.getAsTextShowOnlyName()),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    public void executePaidFees_validData_successfulMessage() throws Exception {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucdx"
        },
        "content": "        assertCommandBehavior(\"paidfees 2\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                \"Fees paid: Person 2\\nNo Fees owed!\\n\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucdx"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    //@@author micklwl"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executePaidFees_withPersonDue_successfulMessage() throws Exception {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Fees f1 \u003d helper.makeFees(1);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setFees(f1);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Set\u003cTag\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        temp.add(new Tag(\"feesdue\"));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.setTags(temp);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"paidfees 1\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"Fees paid: Person 1\\nNo Fees owed!\\n\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executePaidFees_invalidPerson_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"paidfees 2\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executePaidFees_invalidIndex_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"paidfees 0\","
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewFees_validData_successfulFee() throws Exception {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.findPerson(p2).setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewfees 2\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewFeesCommand.MESSAGE_VIEWFEE_PERSON_SUCCESS, p2.getName()),"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p2.getAsTextShowFee(),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewFees_invalidIndex_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewfees\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewFees_personMissingInAddressBook_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewfees 2\", MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected, false, lastShownList, false);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewFees_invalidArgsFormat_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewFeesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewfees \", expectedMessage);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewfees arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "micklwl": 107,
      "lucdx": 324
    }
  },
  {
    "path": "test/java/classrepo/logic/LogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_PERSON_NOT_IN_ADDRESSBOOK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertInvalidIndexBehaviorForCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.ListAccountCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.account.LogoutCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.MessageType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListAllCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewAllCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewSelfCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.EditPasswordCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Pair;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * See https://github.com/junit-team/junit4/wiki/rules#temporaryfolder-rule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook statisticBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        statisticBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Privilege set to admin to allow all commands."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Privilege restrictions are tested separately under PrivilegeTest."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege \u003d new Privilege(new AdminUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        logic \u003d new Logic(stubFile, addressBook, examBook, statisticBook, privilege);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        CommandAssertions.setData(stubFile, addressBook, logic, examBook, statisticBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void setUpThreePerson(AddressBook addressBook,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  AddressBook expected,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  Logic logic,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                                  TestDataHelper.ThreePersons threePersons) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(expected, threePersons.getExpected());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons.getActual());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setLastShownList(threePersons.getActual());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Constructor is called in the setup() method which executes before every test, no need to call it here again."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** Checks if logic\u0027s privilege is raised to Admin when calling initPrivilege with PERSONS of isPerm \u003d true.*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void init_isPerm() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab.setPermAdmin(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.setAddressBook(ab);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.resetPrivilege();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic.initPrivilege();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(new AdminUser(), privilege.getUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void defaultConstructor() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // Verifies if addressbook.txt, exams.txt, statistics.txt are loadable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        logic \u003d new Logic();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        //Confirm the last shown list is empty"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(Collections.emptyList(), logic.getLastShownList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void execute_invalidString_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"       \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(invalidCommand,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void execute_unknownCommandWord_helpMessageShown() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helpCommand.setData(addressBook, statisticBook, new ArrayList\u003c\u003e(), privilege);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String unknownCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(unknownCommand, MESSAGE_COMMAND_NOT_FOUND, helpCommand.makeHelpManual());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    // Checks if all void commands is rejected if there is a trailing argument."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeVoidCommands_trailingArg_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPair\u003cString, Command\u003e\u003e inputToExpectedOutput \u003d List.of("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"clear\", new ClearCommand()),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"list\", new ListCommand()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"listall\", new ListAllCommand()),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"viewself\", new ViewSelfCommand()),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"listacc\", new ListAccountCommand()),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"logout\", new LogoutCommand()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new Pair\u003c\u003e(\"help\", new HelpCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Pair\u003cString, Command\u003e inputToOutput: inputToExpectedOutput) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertCommandBehavior(inputToOutput.getFirst() + \" garbage\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, inputToOutput.getSecond().getCommandUsageMessage())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeHelp() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helpCommand.setData(addressBook, statisticBook, new ArrayList\u003c\u003e(), privilege);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", helpCommand.makeHelpManual(), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", helpCommand.makeHelpManual(), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"help\", helpCommand.makeHelpManual(), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeExit() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"exit\", ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeClear() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // generates the 3 test people and execute the add command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 3; ++i) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final Person testPerson \u003d helper.generatePerson(i, true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addressBook.addPerson(testPerson);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            logic.execute(helper.generateAddCommand(testPerson));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"clear\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                AddressBook.empty(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAdd_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add wrong args wrong args\", expectedMessage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name 12345 e/valid@email.butNoPhonePrefix a/valid, address\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/12345 valid@email.butNoPrefix a/valid, address\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/12345 e/valid@email.butNoAddressPrefix valid, address\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAdd_invalidPersonData_invalidMessage() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add []\\\\[;] p/12345 e/valid@e.mail a/valid, address\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"add Valid Name p/not_numbers e/valid@e.mail a/valid, address\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/12345 e/notAnEmail a/valid, address\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/12345 e/valid@e.mail a/valid, address t/invalid_-[.tag\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/12345 e/valid@e.mail a/#$%#@#What Am I?\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"add Valid Name p/1234 e/valid@e.mail a/valid, address t/invalid_-[.tag\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAdd_validData_success() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person toBeAdded \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, toBeAdded),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                List.of(toBeAdded),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucdx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeAdd_duplicateData_duplicateNotAllowed() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup expectations"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person toBeAdded \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(toBeAdded);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // setup starting state"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(toBeAdded); // person already in internal address book"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // execute command and verify result"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                helper.generateAddCommand(toBeAdded),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeListShowsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"list\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeListAllShowsAllPersons() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // prepare expectations"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(false, true);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003c? extends ReadOnlyPerson\u003e expectedList \u003d expected.getAllPersons().immutableListView();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // prepare address book state"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        helper.addToAddressBook(addressBook, false, true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"listall\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeView_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"view \", expectedMessage);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"view arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeView_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"view\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeView_validArgs_successOnlyShowsNonPrivate() throws Exception {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getName()),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                p1.getAsTextHidePrivate(),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"view 2\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getName()),"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                p2.getAsTextHidePrivate(),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeView_missingPerson_personMissingMessage() throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(p2);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p2);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"view 1\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewAll_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewall \", expectedMessage);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewall arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewAll_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"viewall\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeViewAllAlsoShowsPrivate() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        p1.setFees(helper.makeFees(1));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Assessment assessment \u003d helper.generateAssessment(1);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Grades grade \u003d new Grades(100);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assessment.addGrade(p1, grade);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        p1.addAssessment(assessment);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(lastShownList);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, lastShownList);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewall 1\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p1.getName()),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                p1.getAsTextShowAll(),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(ViewCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getName()),"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                p2.getAsTextShowAll(),"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewAll_missingPerson_missingPersonMessage() throws Exception {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, false);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d helper.generatePersonList(p1, p2);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.addPerson(p1);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(p1);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(lastShownList);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"viewall 2\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDelete_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete \", expectedMessage);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete arg not number\", expectedMessage);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeDelete_invalidIndex_invalidIndexMessage() throws Exception {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInvalidIndexBehaviorForCommand(\"delete\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteRemovesCorrectPerson() throws Exception {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getExpectedPerson(2);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        threePersons.getExpected().remove(p2);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, p2),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteSelfExceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                DeleteCommand.MESSAGE_DELETING_SELF,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeDeleteMissingInAddressBook() throws Exception {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, false);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        expected.removePerson(p2);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, threePersons);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(p2);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setLastShownList(threePersons);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"delete 2\","
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                MESSAGE_PERSON_NOT_IN_ADDRESSBOOK,"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeFind_invalidArgsFormat_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"find \", expectedMessage);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindOnlyMatchesFullWordsInNames() throws Exception {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"KE Y\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEYKEYKEY sduauo\");"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindIsCaseSensitive() throws Exception {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla KEY bla bceofeia\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"find KEY\","
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeFindMatchesIfAnyKeywordPresent() throws Exception {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget1 \u003d helper.generatePersonWithName(\"bla bla KEY bla\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        Person pTarget2 \u003d helper.generatePersonWithName(\"bla rAnDoM bla bceofeia\");"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p1 \u003d helper.generatePersonWithName(\"key key\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        Person p2 \u003d helper.generatePersonWithName(\"KEy sduauo\");"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e fourPersons \u003d helper.generatePersonList(p1, pTarget1, p2, pTarget2);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d helper.generateAddressBook(fourPersons);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedList \u003d helper.generatePersonList(pTarget1, pTarget2);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        helper.addToAddressBook(addressBook, fourPersons);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"find KEY rAnDoM\","
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                Command.getMessageForPersonListShownSummary(expectedList),"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                expectedList,"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewSelf_notLoggedIn_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewself\", Messages.MESSAGE_NOT_LOGGED_IN);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeViewSelf_loggedIn_success() throws Exception {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper.ThreePersons threePersons \u003d helper.generateThreePersons();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        setUpThreePerson(addressBook, expected, logic, threePersons);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Person p2 \u003d threePersons.getActualPerson(2);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        privilege.setMyPerson(p2);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewself\","
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(ViewSelfCommand.MESSAGE_VIEW_PERSON_DETAILS, p2.getName()),"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                p2.getAsTextShowAll(),"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                expected,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                threePersons.getExpected(),"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeChangePassword_invalidArgs_invalidCommandMessage() throws Exception {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                EditPasswordCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw\", expectedMessage);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw \", expectedMessage);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeChangePassword_invalidNumberOfArgs_invalidNumberMessage() throws Exception {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int requiredArguments \u003d 2;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        int actualArguments \u003d 1;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw\","
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments, EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        actualArguments \u003d 3;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw new_pw extra_arg\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, requiredArguments, actualArguments,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        EditPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeChangePassword_wrongPassword_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String initialPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d EditPasswordCommand.MESSAGE_WRONG_PASSWORD;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw wrong_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw default_password1 new_password\", expectedMessage);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw Default_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), initialPassword);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeChangePassword_sameAsOldPassword_errorMessage() throws Exception {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d EditPasswordCommand.MESSAGE_SAME_AS_OLD_PASSWORD;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw default_pw default_pw\", expectedMessage);"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setMasterPassword(\"new_password\");"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"editpw new_password new_password\", expectedMessage);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void executeChangePassword_validArgs_success() throws Exception {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d EditPasswordCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String commandFormat \u003d \"editpw %s %s\";"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String oldPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String newPassword \u003d \"new_password\";"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String commandInput \u003d String.format(commandFormat, oldPassword, newPassword);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(commandInput,"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, newPassword));"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), newPassword);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        oldPassword \u003d addressBook.getMasterPassword();"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        newPassword \u003d \"another_new_password\";"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        commandInput \u003d String.format(commandFormat, oldPassword, newPassword);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandBehavior(commandInput,"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(expectedMessage, newPassword));"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), newPassword);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 8,
      "0WN463": 331,
      "micklwl": 83,
      "lucdx": 2,
      "meisbokai": 1,
      "-": 228
    }
  },
  {
    "path": "test/java/classrepo/logic/PrivilegeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "content": "//@@author 0WN643"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INSUFFICIENT_PRIVILEGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.assertCommandBehavior;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.logic.CommandAssertions.setData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandresult.MessageType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.SetPermanentAdminCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.ViewPrivilegeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Pair;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.parser.Parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.Privilege;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.AdminUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.BasicUser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.privilege.user.User;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.stubs.StorageStub;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class PrivilegeTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * This tests for Commands that affects or depends on Privilege"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public TemporaryFolder saveFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private Privilege privilege \u003d new Privilege();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ExamBook examBook \u003d new ExamBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook statisticsBook \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageStub stubFile \u003d new StorageStub(saveFolder.newFile(\"testStubFile.txt\").getPath(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubExamFile.txt\").getPath(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                saveFolder.newFile(\"testStubStatisticsFile.txt\").getPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Logic logic \u003d new Logic(stubFile, addressBook, examBook, statisticsBook, privilege);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        setData(stubFile, addressBook, logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSay_notLoggedIn_notLoggedInMessageShown() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String feedbackFormat \u003d ViewPrivilegeCommand.MESSAGE_NOT_LOGGED_IN"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + ViewPrivilegeCommand.MESSAGE_PRIVILEGE_FORMAT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Basic.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Tutor.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        String.format(feedbackFormat, User.PrivilegeLevel.Admin.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSay_loggedIn_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Person testPerson \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String feedbackFormat \u003d String.format(ViewPrivilegeCommand.MESSAGE_LOGGED_IN, testPerson.getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                + ViewPrivilegeCommand.MESSAGE_PRIVILEGE_FORMAT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(testPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Basic.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Tutor.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"viewpri\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(feedbackFormat, User.PrivilegeLevel.Admin.toString()), MessageType.OUTPUT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void assertDefaultPasswordSetUp() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String defaultPassword \u003d \"default_pw\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(addressBook.getMasterPassword(), defaultPassword);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_invalidCommand_invalidMessageShown() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"raise\", \"raise \"};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                RaisePrivilegeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(input, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_wrongNumberOfArg_wrongNumberOfArgMessageShown() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // First value of the pair represents String input"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Second value of the pair represents number of arguments supplied, as an Integer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPair\u003cString, Integer\u003e\u003e inputToExpectedOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutput.add(new Pair\u003c\u003e(\"raise arg1 arg2 \", 2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutput.add(new Pair\u003c\u003e(\"raise arg1 arg2 arg3 \", 3));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final int requiredArgument \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Pair\u003cString, Integer\u003e inputToOutput: inputToExpectedOutput) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final String expectedMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, requiredArgument,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    inputToOutput.getSecond(), RaisePrivilegeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(inputToOutput.getFirst(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                    expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_wrongPassword_wrongPasswordMessageShown() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d RaisePrivilegeCommand.MESSAGE_WRONG_PASSWORD;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"raise wrong_password\", expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_loggedIn_loggedInMessageShown() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Person person \u003d helper.makeAdam();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.setMyPerson(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String expectedMessage \u003d String.format(RaisePrivilegeCommand.MESSAGE_LOGGED_IN, person.getName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"raise default_pw\", expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new BasicUser());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_defaultPassword_success() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String defaultPassword \u003d AddressBook.DEFAULT_MASTER_PASSWORD;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"raise \" + defaultPassword,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(RaisePrivilegeCommand.MESSAGE_SUCCESS, new AdminUser().getPrivilegeLevelAsString()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeRaisePrivilege_changedPassword_success() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        addressBook.setMasterPassword(\"new_Password\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"raise new_Password\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(RaisePrivilegeCommand.MESSAGE_SUCCESS, new AdminUser().getPrivilegeLevelAsString()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(privilege.getUser(), new AdminUser());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSetPerm_invalidCommand_invalidMessageShown() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"perm\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSetPerm_invalidDesiredState_invalidDesiredStateMessageShown() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"perm wut\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                        SetPermanentAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeSetPerm_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToAdmin();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"perm true\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(SetPermanentAdminCommand.MESSAGE_SUCCESS, \"\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertCommandBehavior(\"perm false\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(SetPermanentAdminCommand.MESSAGE_SUCCESS, \" not\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertFalse(addressBook.isPermAdmin());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeAdminCommands_insufficientPrivilege_insufficientPrivilegeMessageShown() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"clear\", \"editpw default_pw new_pw\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"add Valid Name p/12345 e/valid@e.mail a/valid, address \","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"delete 1\"};"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        privilege.raiseToTutor();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void executeTutorCommands_insufficientPrivilege_insufficientPrivilegeMessageShown() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {\"viewall 1\"};"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertCommandsInsufficientPrivilege(inputs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Asserts that the given command strings cannot be executed using the current privilege level*/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void assertCommandsInsufficientPrivilege(String[] inputs) throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input: inputs) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertCommandBehavior(input, String.format(MESSAGE_INSUFFICIENT_PRIVILEGE,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    privilege.getRequiredPrivilegeAsString(command), privilege.getLevelAsString())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "Meg1456": 4,
      "0WN463": 191,
      "micklwl": 27
    }
  },
  {
    "path": "test/java/classrepo/parser/ParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.commands.exams.EditExamCommand.MESSAGE_NO_ARGS_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static classrepo.common.Messages.MESSAGE_WRONG_NUMBER_ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddAssessmentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.AddGradesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.DeleteGradesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ListAssessmentCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.assessment.ViewGradesCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.commandformat.indexformat.ObjectTargeted;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.AddExamCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.EditExamCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.exams.ListExamsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewAllCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.privilege.RaisePrivilegeCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyInput_returnsIncorrect() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] emptyInputs \u003d { \"\", \"  \", \"\\n  \\n\" };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, emptyInputs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"unknowncommandword arguments arguments\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test 0-argument commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"clear\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"list\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_noArgs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete\", \"delete \" };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"delete notAnumber \", \"delete 8*wh12\", \"delete 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"delete \" + testIndex;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final DeleteCommand result \u003d parseAndAssertCommandType(input, DeleteCommand.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.PERSON), testIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_noArgs() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view\", \"view \" };"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"view notAnumber \", \"view 8*wh12\", \"view 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"view \" + testIndex;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewCommand result \u003d parseAndAssertCommandType(input, ViewCommand.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.PERSON), testIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_noArgs() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall\", \"viewall \" };"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d { \"viewall notAnumber \", \"viewall 8*wh12\", \"viewall 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void viewAllCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final int testIndex \u003d 3;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"viewall \" + testIndex;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final ViewAllCommand result \u003d parseAndAssertCommandType(input, ViewAllCommand.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.PERSON), testIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void viewGradesCommand_noArgs() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"viewgrades\", \"viewgrades \" };"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void viewGradesCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"viewgrades notAnumber \", \"viewgrades 8*wh12\", \"viewgrades 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void viewGradesCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final int testIndex \u003d 2;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String input \u003d \"viewgrades \" + testIndex;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final ViewGradesCommand result \u003d parseAndAssertCommandType(input, ViewGradesCommand.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.PERSON), testIndex);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test add assessment command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addGradesCommand_invalidArgs() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d {\"addgrades\", \"addgrades \", \"addgrades wrong args format\"};"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test add assessment command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addGradesCommand_invalidNumberOfArgs() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                //Missing grades value"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                String.format(\"addgrades 1 2\"),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        };"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 3, 2,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                AddGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test double index argument commands"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteGradesCommand_noArgs() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deletegrades\", \"deletegrades \" };"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteGradesCommand_argsIsNotDoubleNumber() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deletegrades notAnumber \", \"deletegrades 8*wh12\", \"deletegrades 1\" };"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_WRONG_NUMBER_ARGUMENTS, 2, 1,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteGradesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test find persons by keyword in name command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_invalidArgs() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \"find \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_validArgs_parsedCorrectly() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findCommand_duplicateKeys_parsedCorrectly() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] keywords \u003d { \"key1\", \"key2\", \"key3\" };"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cString\u003e keySet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // duplicate every keyword"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        final String input \u003d \"find \" + String.join(\" \", keySet) + \" \" + String.join(\" \", keySet);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        final FindCommand result \u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                parseAndAssertCommandType(input, FindCommand.class);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(keySet, result.getKeywords());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test add person command"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidArgs() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add \","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            // no phone prefix"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s %s e/%s a/%s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            // no email prefix"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s p/%s %s a/%s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            // no address prefix"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            String.format(\"add %s p/%s e/%s %s\", Name.EXAMPLE, Phone.EXAMPLE, Email.EXAMPLE, Address.EXAMPLE)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_invalidPersonDataInArgs() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidName \u003d \"[]\\\\[;]\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validName \u003d Name.EXAMPLE;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidPhoneArg \u003d \"p/not__numbers\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validPhoneArg \u003d \"p/\" + Phone.EXAMPLE;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidEmailArg \u003d \"e/notAnEmail123\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validEmailArg \u003d \"e/\" + Email.EXAMPLE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidTagArg \u003d \"t/invalid_-[.tag\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // address can be any string, so no invalid address"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String addCommandFormatString \u003d \"add %s %s %s a/\" + Address.EXAMPLE;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid name"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, invalidName, validPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid phone"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, invalidPhoneArg, validEmailArg),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid email"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, invalidEmailArg),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid tag"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(addCommandFormatString, validName, validPhoneArg, validEmailArg) + \" \" + invalidTagArg"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_validPersonData_parsedCorrectly() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            final String input \u003d convertPersonToAddCommandString(testPerson);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            final AddCommand result \u003d parseAndAssertCommandType(input, AddCommand.class);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_duplicateTags_merged() throws IllegalValueException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        final Person testPerson \u003d generateTestPerson();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder input \u003d new StringBuilder(convertPersonToAddCommandString(testPerson));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : testPerson.getTags()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            // create duplicates by doubling each tag"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            input.append(\" t/\").append(tag.tagName);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final AddCommand result \u003d parseAndAssertCommandType(input.toString(), AddCommand.class);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(result.getPerson(), testPerson);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void raisePrivilegeCommand_invalidArgs() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // no keywords"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"raise\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            \"raise \""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String resultMessage \u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RaisePrivilegeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test add exam command"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_invalidArgs() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"addexam\", \"addexam \", \"addexam wrong args format\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no subject name prefix"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s %s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no date prefix"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s %s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no start time prefix"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s %s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no end time prefix"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s st/%s %s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no details prefix"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"addexam %s s/%s d/%s st/%s et/%s %s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_invalidExamDataInArgs() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidDateArg \u003d \"d/not__numbers\";"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validDateArg \u003d \"d/\" + Exam.EXAM_DATE_EXAMPLE;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidStartTimeArg \u003d \"st/not__numbers\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validStartTimeArg \u003d \"st/\" + Exam.EXAM_START_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeArg \u003d \"et/not__numbers\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String validEndTimeArg \u003d \"et/\" + Exam.EXAM_END_TIME_EXAMPLE;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String invalidEndTimeIntervalArg \u003d \"et/08:00\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // subject name and details can be any string, so no invalid address"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String addExamCommandFormatString \u003d \"addexam \" + Exam.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" s/\" + Exam.SUBJECT_NAME_EXAMPLE"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + \" %s %s %s dt/\" + Exam.EXAM_DETAILS_EXAMPLE;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // test each incorrect person data field argument individually"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid date"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, invalidDateArg, validStartTimeArg, validEndTimeArg),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid start time"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, invalidStartTimeArg, validEndTimeArg),"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid end time"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, validStartTimeArg, invalidEndTimeArg),"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // invalid time interval"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(addExamCommandFormatString, validDateArg, validStartTimeArg,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        invalidEndTimeIntervalArg),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void addExamCommand_validExamData_parsedCorrectly() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final Exam testExam \u003d generateTestExam();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final String input \u003d convertExamToAddExamCommandString(testExam);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            final AddExamCommand result \u003d parseAndAssertCommandType(input, AddExamCommand.class);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(result.getExam(), testExam);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessmentCommand_validAssessmentData_parsedCorrectly() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final Assessment testAssessment \u003d generateTestAssessment();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final String input \u003d convertAssessmentToAddAssessmentCommandString(testAssessment);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            final AddAssessmentCommand result \u003d parseAndAssertCommandType(input, AddAssessmentCommand.class);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            assertEquals(result.getAssessment(), testAssessment);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test add assessment command"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void addAssessmentCommand_invalidArgs() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            \"addassess\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            \"addassess \","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        };"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void listAssessmentCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String input \u003d \"listassess\";"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertCommandType(input, ListAssessmentCommand.class);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Test single index argument commands"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_noArgs() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deleteassess\", \"deleteassess \" };"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_argsIsNotSingleNumber() {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String[] inputs \u003d { \"deleteassess notAnumber \", \"deleteassess 8*wh12\", \"deleteassess 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                DeleteAssessmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void deleteAssessmentCommand_numericArg_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final int testIndex \u003d -1;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final String input \u003d \"deleteassess \" + testIndex;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final DeleteAssessmentCommand result \u003d parseAndAssertCommandType(input, DeleteAssessmentCommand.class);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.ASSESSMENT), testIndex);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Test edit exam command"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_invalidArgs() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"editexam\", \"editexam \","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                //no index"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"editexam e/%s s/%s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE),"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                // no exam name prefix"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                String.format(\"editexam 1 %s s/%s d/%s st/%s et/%s dt/%s\", Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                        Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        };"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String input \u003d \"editexam 1\";"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_NO_ARGS_FOUND"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, input);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_indexIsNotSingleNumber() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String[] inputs \u003d { \"editexam notAnumber s/Mathematics st/09:00 et/11:00 dt/Held in MPSH\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 8*wh12 s/Mathematics\","
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            \"editexam 1 2 3 4 5 s/Mathematics\" };"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String resultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void editExamCommand_numericIndex_indexParsedCorrectly() {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final int testIndex \u003d 1;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String input \u003d String.format(\"editexam %d e/%s s/%s d/%s st/%s et/%s dt/%s\","
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                testIndex, Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam.SUBJECT_NAME_EXAMPLE, Exam.EXAM_DATE_EXAMPLE, Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Exam.EXAM_END_TIME_EXAMPLE, Exam.EXAM_DETAILS_EXAMPLE);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final EditExamCommand result \u003d parseAndAssertCommandType(input, EditExamCommand.class);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(result.getTargetIndex(ObjectTargeted.EXAM), testIndex);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void examsListCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final String input \u003d \"listexams\";"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        parseAndAssertCommandType(input, ListExamsCommand.class);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Person generateTestPerson() throws IllegalValueException {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person("
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(Name.EXAMPLE),"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(Phone.EXAMPLE, true),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(Email.EXAMPLE, false),"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(Address.EXAMPLE, true),"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"tag1\"), new Tag(\"tag2\"), new Tag(\"tag3\")))"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(\"test person data should be valid by definition\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertPersonToAddCommandString(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String phoneField \u003d helper.getPrefix(person.getPhone()) + person.getPhone();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String emailField \u003d helper.getPrefix(person.getEmail()) + person.getEmail();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        String addressField \u003d helper.getPrefix(person.getAddress()) + person.getAddress();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StringBuilder addCommand \u003d"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new StringBuilder(\"add \" + person.getName().fullName + phoneField + emailField + addressField);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addCommand.append(\" t/\").append(tag.tagName);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return addCommand.toString();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static Exam generateTestExam() throws IllegalValueException {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            return new Exam(Exam.EXAM_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.SUBJECT_NAME_EXAMPLE,"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_DATE_EXAMPLE,"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_START_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_END_TIME_EXAMPLE,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    Exam.EXAM_DETAILS_EXAMPLE,"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                    false"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            );"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            throw new IllegalValueException(\"test exam data should be valid by definition\");"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static Assessment generateTestAssessment() throws IllegalValueException {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            return new Assessment(Assessment.EXAM_NAME_EXAMPLE"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            );"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            throw new IllegalValueException(\"test assessment data should be valid by definition\");"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private static String convertExamToAddExamCommandString(Exam exam) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String examNameField \u003d helper.getExamNamePrefix(exam.isPrivate()) + exam.getExamName();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String subjectNameField \u003d helper.getSubjectNamePrefix() + exam.getSubjectName();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String dateField \u003d helper.getDatePrefix() + exam.getExamDate();"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String startTimeField \u003d helper.getStartTimePrefix()"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + exam.getExamStartTime();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String endTimeField \u003d helper.getEndTimePrefix()"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + exam.getExamEndTime();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String detailsField \u003d helper.getDetailsPrefix() + exam.getExamDetails();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String addExamCommand \u003d \"addexam \" + examNameField"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + subjectNameField + dateField + startTimeField"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                + endTimeField + detailsField;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return addExamCommand;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /** **/"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static String convertAssessmentToAddAssessmentCommandString(Assessment assessment) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String examNameField \u003d assessment.getExamName();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String addAssessmentCommand \u003d \"addassess \" + examNameField;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return addAssessmentCommand;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Utility methods"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Asserts that parsing the given inputs will return IncorrectCommand with the given feedback message."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String feedbackMessage, String... inputs) {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(result.feedbackToUser, feedbackMessage);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * Utility method for parsing input and asserting the class/type of the returned command object."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 138,
      "0WN463": 103,
      "micklwl": 173,
      "-": 237
    }
  },
  {
    "path": "test/java/classrepo/privilege/user/FaultyUserGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.ViewAllCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** Class for generating erroneously set up Users*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class FaultyUserGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public FaultyUserInternal generateFaultyUserInternal() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new FaultyUserInternal();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public FaultyUserExternal generateFaultyUserExternal() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new FaultyUserExternal();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** A User with duplicated command within itself*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public class FaultyUserInternal extends BasicUser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cCommand\u003e newAllowedCommand \u003d List.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new ViewAllCommand(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new ViewAllCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public FaultyUserInternal() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            setCurrentLevel(PrivilegeLevel.Tutor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            sortCommands();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Parent of FaultUserExternal*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public class UserParent extends BasicUser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cCommand\u003e newAllowedCommand \u003d List.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new DeleteCommand()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public UserParent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            setCurrentLevel(PrivilegeLevel.Tutor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            sortCommands();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** A User with duplicated command as its parent (UserParent) */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public class FaultyUserExternal extends UserParent {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        private List\u003cCommand\u003e newAllowedCommand \u003d List.of("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                new DeleteCommand()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        public FaultyUserExternal() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            addAllowedCommands(newAllowedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            setCurrentLevel(PrivilegeLevel.Tutor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            sortCommands();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 60
    }
  },
  {
    "path": "test/java/classrepo/privilege/user/UserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.privilege.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** This test checks if the Users allowedCommands are set properly*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void commandComparator_sameClass_returnsEquals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Assert.assertEquals(new AddCommand(), new AddCommand());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void commandComparator_differentClass_returnsNotEquals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        Assert.assertNotEquals(new AddCommand(), new DeleteCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Test if a User have a duplicated command within itself"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *  Expects AssertionError when the FaultyUser is generated*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test(expected \u003d AssertionError.class)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructUser_duplicatedInternalCommand_assertionErrorThrown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        FaultyUserGenerator generator \u003d new FaultyUserGenerator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        generator.generateFaultyUserInternal();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Test if a User have a duplicated command as its parent"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "     *  Expects AssertionError when the FaultyUser is generated*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test(expected \u003d AssertionError.class)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructUser_duplicatedExternalCommand_assertionErrorThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        FaultyUserGenerator generator \u003d new FaultyUserGenerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        generator.generateFaultyUserExternal();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructUser_basicUser_allowedCommandContainsNoDuplicateReturnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(new BasicUser().allowedCommandContainsNoDuplicate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructUser_tutorUser_allowedCommandContainsNoDuplicateReturnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(new TutorUser().allowedCommandContainsNoDuplicate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructUser_adminUser_allowedCommandContainsNoDuplicateReturnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(new AdminUser().allowedCommandContainsNoDuplicate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 54
    }
  },
  {
    "path": "test/java/classrepo/storage/StorageFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.TestDataHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.common.Pair;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.account.Account;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Assessment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.AssignmentStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Attendance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Exam;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Grades;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.person.details.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.util.TestUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"test/data/StorageFileTest\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String SAMPLE_DATA_FOLDER \u003d \"sample_data\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private static final String VALID_EXAM_DATA_PATH \u003d \"ValidExamData.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private static final String VALID_STATISTICS_DATA_PATH \u003d \"ValidStatisticsData.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(null, TEST_DATA_FOLDER + \"/\" + \"examBook.txt\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + \"statisticsBook.txt\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_nullExamFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"addressBook.txt\", null,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + \"statisticsBook.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void constructor_nullStatisticsFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"addressBook.txt\", TEST_DATA_FOLDER + \"/\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \"examBook.txt\", null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void constructor_nullAllFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(null, null, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void constructor_defaultPath() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d new StorageFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertNotNull(storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_noTxtAddressBookExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\", TEST_DATA_FOLDER + \"/\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \"exams.txt\", TEST_DATA_FOLDER + \"/\" + \"statistics.txt\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void constructor_noTxtExamBookExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        new StorageFile(TEST_DATA_FOLDER + \"/\" + \"addressbook.txt\", TEST_DATA_FOLDER + \"/\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                + \"InvalidExamfileName\", TEST_DATA_FOLDER + \"/\" + \"statistics.txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_invalidAccountFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidMissingAccountFieldData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void load_invalidExamFormatInAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidMissingExamFieldData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_invalidNameFieldFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // The file contains valid xml data, but contains an invalid name field"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidNameFieldData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String errorMessage \u003d \"Error processing Ke$ha: Person names should be spaces or alphanumeric characters\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertReturnsExceptionMessage(storage, errorMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_invalidTagFieldFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // The file contains valid xml data, but contains an invalid tag field"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidTagFieldData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String errorMessage \u003d \"Error processing Kesha: Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertReturnsExceptionMessage(storage, errorMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_invalidDuplicateAccountData_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidDuplicateUsernameData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final String errorMessage \u003d \"Data contains duplicate username\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertReturnsExceptionMessage(storage, errorMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // The file contains valid xml data, but does not match the AddressBook class"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile storage \u003d getStorage(\"InvalidDuplicateUsernameData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"InvalidStatistics.txt\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.load();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void loadExam_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // The file contains valid xml data, but does not match the ExamBook class"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getStorage(\"ValidData.txt\", \"InvalidExamData.txt\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatistics.txt\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.loadExam();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void loadStatistics_invalidFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // The file contains valid xml data, but does not match the StatisticsBook class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"notValidStatisticsData.txt\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.loadStatistics();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        List\u003cPair\u003cString, AddressBook\u003e\u003e inputToExpectedOutputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidDataWithNewPassword.txt\", getTestAddressBook(false, false)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidDataWithDefaultPassword.txt\", getTestAddressBook(true, false)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidEmptyData.txt\", AddressBook.empty()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidDataWithAccount.txt\", getTestAddressBook(true, true)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                \"ValidDataWithoutPassword.txt\", getTestAddressBook(true, false)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        inputToExpectedOutputs.add(new Pair\u003c\u003e("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                \"ValidDataWithExam.txt\", getTestAddressBook(true, false)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        for (Pair\u003cString, AddressBook\u003e inputToExpected: inputToExpectedOutputs) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final AddressBook actual \u003d getStorage(inputToExpected.getFirst()).load();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            final AddressBook expected \u003d inputToExpected.getSecond();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "micklwl"
        },
        "content": "            assertEquals(actual, expected);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(actual.getMasterPassword(), expected.getMasterPassword());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_validFormatIsPerm() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook actual \u003d getStorage(\"ValidDataWithIsPerm.txt\").load();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook expected \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertEquals(actual.getAllPersons(), expected.getAllPersons());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertTrue(actual.isPermAdmin());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Test that the sample data is valid and contains data*/"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public void load_sampleData_success() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StorageFile sampleStorage \u003d new StorageFile(SAMPLE_DATA_FOLDER + \"/\" + \"addressbook.txt\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                SAMPLE_DATA_FOLDER + \"/\" + \"exams.txt\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                SAMPLE_DATA_FOLDER + \"/\" + \"statistics.txt\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook addressBook \u003d sampleStorage.load();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ExamBook examBook \u003d sampleStorage.loadExam();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        StatisticsBook statisticsBook \u003d sampleStorage.loadStatistics();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertNotEquals(addressBook, AddressBook.empty());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertNotEquals(examBook, ExamBook.empty());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertNotEquals(statisticsBook, StatisticsBook.empty());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void loadExam_validFormat() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ExamBook actual \u003d getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\").loadExam();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook expected \u003d getTestExamBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void loadStatistics_validFormat() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook actual \u003d getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\").loadStatistics();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook expected \u003d getTestStatisticsBook();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // ensure loaded StatisticBook is properly constructed with test data"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assert(actual.equals(expected));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void loadAssessments_validFormat() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook actual \u003d getStorage(\"ValidDataWithAssessments.txt\").load();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook expected \u003d getTestAddressBookWithAssessment();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullAddressBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(null);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam_nullExamBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.saveExam(null);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveStatistics_nullStatisticsBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.saveStatistics(null);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_validAddressBook() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook(true, false);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        // Checks that the password and isPerm is saved as a new field"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithDefaultPassword.txt\"));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithNewPassword.txt\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithNewPassword.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucdx"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab \u003d getTestAddressBook(true, true);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAccount.txt\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam_validExamBook() throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d getTestExamBook();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.saveExam(eb);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertExamsFilesEqual(storage, getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveStatistics_validStatisticsBook() throws Exception {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook sb \u003d getTestStatisticsBook();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.saveStatistics(sb);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertStatisticsFilesEqual(storage, getStorage(\"ValidData.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void save_validAddressBookWithAssessments() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook ab \u003d getTestAddressBookWithAssessment(true, false);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        // Checks that the password and isPerm is saved as a new field"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAssessments.txt\"));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ab \u003d getTestAddressBookWithAssessment();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAssessments.txt\"));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAssessments.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ab \u003d getTestAddressBookWithAssessment(true, false);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAssessments.txt\"));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void syncAddressBookExamBook_personHasMissingExamInExamBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d getTestExamBook();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook ab \u003d getTestAddressBook();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        final Person john \u003d new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "micklwl"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ab.getAllPersons().find(john).addExam(e1);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.syncAddressBookExamBook(ab, eb);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void syncAddressBookExamBook_personHasAllExamsInExamBook() throws Exception {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false, 0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 2);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false, 1);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 2, true, 2);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true, 2, true, 2);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook ab \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.syncAddressBookExamBook(ab, eb);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void syncAddressBookExamBook_inaccurateExamInExamBook_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        TestDataHelper helper \u003d new TestDataHelper();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e1 \u003d helper.generateExam(1, false, 5);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e2 \u003d helper.generateExam(2, true, 2);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam e3 \u003d helper.generateExam(3, false, 1);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cExam\u003e threeExams \u003d helper.generateExamList(e1, e2, e3);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d helper.generateExamBook(threeExams);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p1 \u003d helper.generatePerson(1, true, 2, true, 2);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p2 \u003d helper.generatePerson(2, true, 2, true, 2);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Person p3 \u003d helper.generatePerson(3, true, 3, false, 1);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        List\u003cPerson\u003e threePersons \u003d helper.generatePersonList(p1, p2, p3);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        AddressBook ab \u003d helper.generateAddressBook(threePersons);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        thrown.expect(StorageOperationException.class);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        storage.syncAddressBookExamBook(ab, eb);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void load_validAttendance() throws Exception {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook actual \u003d getStorage(\"ValidDataWithAttendance.txt\").load();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook expected \u003d getTestAddressBookWithAttendance();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // ensure loaded AddressBook is properly constructed with test data"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertEquals(actual.getAllPersons(), expected.getAllPersons());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    /** Asserts that loading StorageFile will return an Exception with expectedMessage*/"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private void assertReturnsExceptionMessage(StorageFile storage, String expectedMessage) throws Exception {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestUtil.assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     * Asserts that the contents of two exams files are the same."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "micklwl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private void assertExamsFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestUtil.assertTextFilesEqual(Paths.get(sf1.getPathExam()), Paths.get(sf2.getPathExam()));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     * Asserts that the contents of two statistics files are the same."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private void assertStatisticsFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        TestUtil.assertTextFilesEqual(Paths.get(sf1.getPathStatistics()), Paths.get(sf2.getPathStatistics()));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StorageFile getStorage(String fileName, String examFileName, String statisticsFileName) throws Exception {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName, TEST_DATA_FOLDER + \"/\" + examFileName,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                TEST_DATA_FOLDER + \"/\" + statisticsFileName);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName, VALID_EXAM_DATA_PATH, VALID_STATISTICS_DATA_PATH);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        String tempExam \u003d testFolder.getRoot().getPath() + \"/\" + \"tempExam.txt\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        String tempStatistics \u003d testFolder.getRoot().getPath() + \"/\" + \"tempStatistics.txt\";"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StorageFile(testFolder.getRoot().getPath() + \"/\" + \"temp.txt\", tempExam, tempStatistics);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook getTestAddressBook() throws Exception {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return getTestAddressBook(false, false);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private AddressBook getTestAddressBook(boolean isUsingDefaultPassword, boolean hasAccount) throws Exception {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        final Person john \u003d new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0WN463"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        Exam exam \u003d new Exam(\"Math Midterms\", \"Mathematics\", \"01-12-2018\", \"09:00\", \"10:00\", \"Held in MPSH\", false);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        exam.setTakers(1);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        john.addExam(exam);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (hasAccount) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            john.setAccount(new Account(\"user\", \"pw\", \"Admin\"));"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        ab.addPerson(john);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        ab.addPerson(new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\")))));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        if (!isUsingDefaultPassword) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0WN463"
        },
        "content": "            ab.setMasterPassword(\"newPassword\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private ExamBook getTestExamBook() throws Exception {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        ExamBook eb \u003d new ExamBook();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        eb.addExam(new Exam(\"Math Midterms\", \"Mathematics\", \"01-12-2018\", \"09:00\", \"10:00\", \"Held in MPSH\", false));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        eb.addExam(new Exam(\"English Midterms\", \"English\", \"02-12-2018\", \"09:00\", \"10:00\", \"Held in MPSH\", false));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private StatisticsBook getTestStatisticsBook() throws Exception {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        StatisticsBook sb \u003d new StatisticsBook();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        sb.addStatistic(new AssignmentStatistics(\"Mathematics midterms\", 72, 102, 98, 32));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        sb.addStatistic(new AssignmentStatistics(\"Spanish final\", 88, 67, 97, 52));"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private AddressBook getTestAddressBookWithAssessment() throws Exception {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return getTestAddressBookWithAssessment(false, false);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private AddressBook getTestAddressBookWithAssessment(boolean isUsingDefaultPassword, boolean hasAccount) throws"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            Exception {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        final Person john \u003d new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Assessment assessment \u003d new Assessment(\"Math Midterms\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ab.addAssessment(assessment);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        Grades gradeVal \u003d new Grades(95);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        assessment.addGrade(john, gradeVal);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (hasAccount) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            john.setAccount(new Account(\"user\", \"pw\", \"Admin\"));"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        ab.addPerson(john);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        if (!isUsingDefaultPassword) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "            ab.setMasterPassword(\"default_pw\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private AddressBook getTestAddressBookWithAttendance() throws Exception {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return getTestAddressBookWithAttendance(false, false);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    private AddressBook getTestAddressBookWithAttendance(boolean isUsingDefaultPassword, boolean hasAccount)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        final Person john \u003d new Person(new Name(\"John Doe\"),"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Phone(\"98765432\", false),"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Email(\"johnd@gmail.com\", false),"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Address(\"John street, block 123, #01-01\", false),"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                Collections.emptySet());"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Attendance attendanceJohn \u003d new Attendance();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        attendanceJohn.getAttendancePersonMap().put(\"07-11-2018\", false);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        john.setAttendance(attendanceJohn);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (hasAccount) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            john.setAccount(new Account(\"user\", \"pw\", \"Admin\"));"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ab.addPerson(john);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        final Person betsy \u003d new Person(new Name(\"Betsy Crowe\"),"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Phone(\"1234567\", true),"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Email(\"betsycrowe@gmail.com\", false),"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new Address(\"Newgate Prison\", true),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"friend\"), new Tag(\"criminal\"))));"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        Attendance attendanceBetsy \u003d new Attendance();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        attendanceBetsy.getAttendancePersonMap().put(\"07-11-2018\", true);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        betsy.setAttendance(attendanceBetsy);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ab.addPerson(betsy);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        if (!isUsingDefaultPassword) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "            ab.setMasterPassword(\"default_pw\");"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    public void save_validAddressBookWithAttendance() throws Exception {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        AddressBook ab \u003d getTestAddressBookWithAttendance(true, false);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ExamBook eb \u003d getTestExamBook();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        StatisticsBook sb \u003d getTestStatisticsBook();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage.saveExam(eb);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage.saveStatistics(sb);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        // Checks that the password and isPerm is saved as a new field"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAttendance.txt\"));"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ab \u003d getTestAddressBookWithAttendance();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAttendance.txt\"));"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAttendance.txt\", \"ValidExamData.txt\","
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "                \"ValidStatisticsData.txt\"));"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "meisbokai"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        ab \u003d getTestAddressBookWithAttendance(true, false);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidDataWithAttendance.txt\"));"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "meisbokai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 139,
      "0WN463": 159,
      "micklwl": 132,
      "lucdx": 1,
      "meisbokai": 73,
      "-": 82
    }
  },
  {
    "path": "test/java/classrepo/stubs/StorageStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.ExamBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.data.StatisticsBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0WN463"
        },
        "content": "import classrepo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * Class used to apply DI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": " * */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0WN463"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    private String pathExam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    private String pathStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean hasSaved \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    private boolean hasSavedExam \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StorageStub(String filePath, String filePathExam, String filePathStatistics) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        pathExam \u003d filePathExam;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        pathStatistics \u003d filePathStatistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void save(AddressBook addressBook) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        hasSaved \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void saveExam(ExamBook examBook) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        hasSavedExam \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public void saveStatistics(StatisticsBook statisticsBook){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        //this is blank on purpose"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    /**Stub function*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public void syncAddressBookExamBook(AddressBook addressBook, ExamBook examBook){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        //this is blank on purpose"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "micklwl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean getHasSaved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return hasSaved;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public boolean getHasSavedExams() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return hasSavedExam;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public AddressBook load() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0WN463"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0WN463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public ExamBook loadExam() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return new ExamBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    public String getPathExam() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "micklwl"
        },
        "content": "        return pathExam;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "micklwl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Meg1456"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public StatisticsBook loadStatistics() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return new StatisticsBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    public String getPathStatistics() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "        return pathStatistics;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Meg1456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0WN463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Meg1456": 16,
      "0WN463": 34,
      "micklwl": 22
    }
  },
  {
    "path": "test/java/classrepo/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0WN463"
        },
        "content": "package classrepo.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0WN463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0WN463"
        },
        "content": "/** **/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0WN463": 3,
      "-": 18
    }
  }
]
